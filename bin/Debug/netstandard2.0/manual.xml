<?xml version="1.0" encoding="UTF-8"?>
<doc>
<assembly><name>manual</name></assembly>
<members>
<member name="T:Elementor.Core.Admin.Admin_Notices">
</member>
<member name="M:Elementor.Core.Admin.Admin_Notices.#ctor">
</member>
<member name="M:Elementor.Core.Admin.Admin_Notices.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Core.Admin.Admin_Notices.#ctor(Pchp.Core.Context)">
</member>
<member name="T:Elementor.Core.Admin.Admin">
</member>
<member name="M:Elementor.Core.Admin.Admin.#ctor">
<summary>
Admin constructor.
Initializing Elementor in WordPress admin.
</summary>
</member>
<member name="M:Elementor.Core.Admin.Admin.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Core.Admin.Admin.#ctor(Pchp.Core.Context)">
<summary>
Admin constructor.
Initializing Elementor in WordPress admin.
</summary>
</member>
<member name="T:Elementor.Core.Admin.Canary_Deployment">
</member>
<member name="M:Elementor.Core.Admin.Canary_Deployment.#ctor">
</member>
<member name="M:Elementor.Core.Admin.Canary_Deployment.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Core.Admin.Canary_Deployment.#ctor(Pchp.Core.Context)">
</member>
<member name="T:Elementor.Core.Admin.Feedback">
</member>
<member name="M:Elementor.Core.Admin.Feedback.#ctor">
</member>
<member name="M:Elementor.Core.Admin.Feedback.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Core.Admin.Feedback.#ctor(Pchp.Core.Context)">
</member>
<member name="T:Elementor.Core.Admin.Notices.Base_Notice">
</member>
<member name="T:Elementor.Core.Admin.Notices.Elementor_Dev_Notice">
</member>
<member name="F:Elementor.Core.Admin.Notices.Elementor_Dev_Notice.plugins">
<summary>
Holds the plugins names.
</summary>

</member>
<member name="F:Elementor.Core.Admin.Notices.Elementor_Dev_Notice.promotion_plugins">
<summary>
If one of those plugin is installed it will show the notice.
</summary>

</member>
<member name="F:Elementor.Core.Admin.Notices.Elementor_Dev_Notice.promotion_options">
<summary>
If one of those options is enabled it will show the notice.
</summary>

</member>
<member name="F:Elementor.Core.Admin.Notices.Elementor_Dev_Notice.ID">
<summary>
Notice ID.
</summary>

</member>
<member name="F:Elementor.Core.Admin.Notices.Elementor_Dev_Notice.PLUGIN_SLUG">
<summary>
Plugin slug to install.
</summary>

</member>
<member name="F:Elementor.Core.Admin.Notices.Elementor_Dev_Notice.PLUGIN_NAME">
<summary>
Plugin name.
</summary>

</member>
<member name="T:Elementor.Core.Admin.UI.Components.Button">
</member>
<member name="M:Elementor.Core.Admin.UI.Components.Button.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="T:Elementor.Core.App.App">
</member>
<member name="M:Elementor.Core.App.App.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="T:Elementor.Core.App.Modules.ImportExport.Compatibility.Base_Adapter">
</member>
<member name="T:Elementor.Core.App.Modules.ImportExport.Compatibility.Envato">
</member>
<member name="M:Elementor.Core.App.Modules.ImportExport.Compatibility.Envato.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="T:Elementor.Core.App.Modules.ImportExport.Compatibility.Kit_Library">
</member>
<member name="M:Elementor.Core.App.Modules.ImportExport.Compatibility.Kit_Library.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="T:Elementor.Core.App.Modules.ImportExport.Directories.Base">
</member>
<member name="T:Elementor.Core.App.Modules.ImportExport.Directories.Content">
</member>
<member name="M:Elementor.Core.App.Modules.ImportExport.Directories.Content.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="T:Elementor.Core.App.Modules.ImportExport.Directories.Post_Type">
</member>
<member name="M:Elementor.Core.App.Modules.ImportExport.Directories.Post_Type.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="T:Elementor.Core.App.Modules.ImportExport.Directories.Root">
</member>
<member name="M:Elementor.Core.App.Modules.ImportExport.Directories.Root.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="T:Elementor.Core.App.Modules.ImportExport.Directories.Templates">
</member>
<member name="M:Elementor.Core.App.Modules.ImportExport.Directories.Templates.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="T:Elementor.Core.App.Modules.ImportExport.Directories.WP_Content">
</member>
<member name="M:Elementor.Core.App.Modules.ImportExport.Directories.WP_Content.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="T:Elementor.Core.App.Modules.ImportExport.Directories.WP_Post_Type">
</member>
<member name="M:Elementor.Core.App.Modules.ImportExport.Directories.WP_Post_Type.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="T:Elementor.Core.App.Modules.ImportExport.Export">
</member>
<member name="M:Elementor.Core.App.Modules.ImportExport.Export.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="T:Elementor.Core.App.Modules.ImportExport.Import">
</member>
<member name="M:Elementor.Core.App.Modules.ImportExport.Import.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="T:Elementor.Core.App.Modules.ImportExport.Iterator">
</member>
<member name="T:Elementor.Core.App.Modules.ImportExport.Module">
<summary>
Import Export Module
Responsible for initializing Elementor App functionality
</summary>
</member>
<member name="M:Elementor.Core.App.Modules.ImportExport.Module.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="T:Elementor.Core.App.Modules.ImportExport.Wp_Cli">
</member>
<member name="T:Elementor.Core.App.Modules.KitLibrary.Connect.Kit_Library">
</member>
<member name="M:Elementor.Core.App.Modules.KitLibrary.Connect.Kit_Library.#ctor">
</member>
<member name="M:Elementor.Core.App.Modules.KitLibrary.Connect.Kit_Library.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Core.App.Modules.KitLibrary.Connect.Kit_Library.#ctor(Pchp.Core.Context)">
</member>
<member name="T:Elementor.Core.App.Modules.KitLibrary.Data.Base_Controller">
</member>
<member name="T:Elementor.Core.App.Modules.KitLibrary.Data.Exceptions.Wp_Error_Exception">
</member>
<member name="M:Elementor.Core.App.Modules.KitLibrary.Data.Exceptions.Wp_Error_Exception.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="T:Elementor.Core.App.Modules.KitLibrary.Data.Kits.Controller">
</member>
<member name="M:Elementor.Core.App.Modules.KitLibrary.Data.Kits.Controller.#ctor">
<summary>
Controller constructor.
Register endpoints on 'rest_api_init'.
</summary>
</member>
<member name="M:Elementor.Core.App.Modules.KitLibrary.Data.Kits.Controller.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Core.App.Modules.KitLibrary.Data.Kits.Controller.#ctor(Pchp.Core.Context)">
<summary>
Controller constructor.
Register endpoints on 'rest_api_init'.
</summary>
</member>
<member name="T:Elementor.Core.App.Modules.KitLibrary.Data.Kits.Endpoints.Download_Link">
</member>
<member name="M:Elementor.Core.App.Modules.KitLibrary.Data.Kits.Endpoints.Download_Link.#ctor(Pchp.Core.PhpValue)">
<summary>
Endpoint constructor.
run `$this-&gt;&gt;register()`.
</summary>
<param name="controller" type="\Elementor\Data\Base\Controller"></param>
</member>
<member name="M:Elementor.Core.App.Modules.KitLibrary.Data.Kits.Endpoints.Download_Link.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Core.App.Modules.KitLibrary.Data.Kits.Endpoints.Download_Link.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Endpoint constructor.
run `$this-&gt;&gt;register()`.
</summary>
<param name="controller" type="\Elementor\Data\Base\Controller"></param>
</member>
<member name="T:Elementor.Core.App.Modules.KitLibrary.Data.Kits.Endpoints.Favorites">
</member>
<member name="M:Elementor.Core.App.Modules.KitLibrary.Data.Kits.Endpoints.Favorites.#ctor(Pchp.Core.PhpValue)">
<summary>
Endpoint constructor.
run `$this-&gt;&gt;register()`.
</summary>
<param name="controller" type="\Elementor\Data\Base\Controller"></param>
</member>
<member name="M:Elementor.Core.App.Modules.KitLibrary.Data.Kits.Endpoints.Favorites.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Core.App.Modules.KitLibrary.Data.Kits.Endpoints.Favorites.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Endpoint constructor.
run `$this-&gt;&gt;register()`.
</summary>
<param name="controller" type="\Elementor\Data\Base\Controller"></param>
</member>
<member name="T:Elementor.Core.App.Modules.KitLibrary.Data.Kits.Endpoints.Index">
</member>
<member name="M:Elementor.Core.App.Modules.KitLibrary.Data.Kits.Endpoints.Index.#ctor(Pchp.Core.PhpValue)">
<summary>
Endpoint constructor.
run `$this-&gt;&gt;register()`.
</summary>
<param name="controller" type="\Elementor\Data\Base\Controller"></param>
</member>
<member name="M:Elementor.Core.App.Modules.KitLibrary.Data.Kits.Endpoints.Index.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Core.App.Modules.KitLibrary.Data.Kits.Endpoints.Index.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Endpoint constructor.
run `$this-&gt;&gt;register()`.
</summary>
<param name="controller" type="\Elementor\Data\Base\Controller"></param>
</member>
<member name="T:Elementor.Core.App.Modules.KitLibrary.Data.Repository">
</member>
<member name="M:Elementor.Core.App.Modules.KitLibrary.Data.Repository.#ctor(Elementor.Core.App.Modules.KitLibrary.Connect.Kit_Library,Elementor.Modules.Library.User_Favorites)">
<summary>
Repository constructor.
</summary>
<param name="kit_library" type="Kit_Library"></param>
<param name="user_favorites" type="User_Favorites"></param>
</member>
<member name="M:Elementor.Core.App.Modules.KitLibrary.Data.Repository.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Core.App.Modules.KitLibrary.Data.Repository.#ctor(Pchp.Core.Context,Elementor.Core.App.Modules.KitLibrary.Connect.Kit_Library,Elementor.Modules.Library.User_Favorites)">
<summary>
Repository constructor.
</summary>
<param name="kit_library" type="Kit_Library"></param>
<param name="user_favorites" type="User_Favorites"></param>
</member>
<member name="T:Elementor.Core.App.Modules.KitLibrary.Data.Taxonomies.Controller">
</member>
<member name="M:Elementor.Core.App.Modules.KitLibrary.Data.Taxonomies.Controller.#ctor">
<summary>
Controller constructor.
Register endpoints on 'rest_api_init'.
</summary>
</member>
<member name="M:Elementor.Core.App.Modules.KitLibrary.Data.Taxonomies.Controller.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Core.App.Modules.KitLibrary.Data.Taxonomies.Controller.#ctor(Pchp.Core.Context)">
<summary>
Controller constructor.
Register endpoints on 'rest_api_init'.
</summary>
</member>
<member name="T:Elementor.Core.App.Modules.KitLibrary.Data.Taxonomies.Endpoints.Index">
</member>
<member name="M:Elementor.Core.App.Modules.KitLibrary.Data.Taxonomies.Endpoints.Index.#ctor(Pchp.Core.PhpValue)">
<summary>
Endpoint constructor.
run `$this-&gt;&gt;register()`.
</summary>
<param name="controller" type="\Elementor\Data\Base\Controller"></param>
</member>
<member name="M:Elementor.Core.App.Modules.KitLibrary.Data.Taxonomies.Endpoints.Index.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Core.App.Modules.KitLibrary.Data.Taxonomies.Endpoints.Index.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Endpoint constructor.
run `$this-&gt;&gt;register()`.
</summary>
<param name="controller" type="\Elementor\Data\Base\Controller"></param>
</member>
<member name="T:Elementor.Core.App.Modules.KitLibrary.Module">
</member>
<member name="M:Elementor.Core.App.Modules.KitLibrary.Module.#ctor">
<summary>
Module constructor.
</summary>
</member>
<member name="M:Elementor.Core.App.Modules.KitLibrary.Module.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Core.App.Modules.KitLibrary.Module.#ctor(Pchp.Core.Context)">
<summary>
Module constructor.
</summary>
</member>
<member name="T:Elementor.Core.App.Modules.SiteEditor.Module">
<summary>
Site Editor Module
Responsible for initializing Elementor App functionality
</summary>
</member>
<member name="M:Elementor.Core.App.Modules.SiteEditor.Module.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="T:Elementor.Core.Base.App">
<summary>
Base App
Base app utility class that provides shared functionality of apps.
</summary>
</member>
<member name="T:Elementor.Core.Base.BackgroundProcess.WP_Async_Request">
<summary>
Abstract WP_Async_Request class.
</summary>
</member>
<member name="F:Elementor.Core.Base.BackgroundProcess.WP_Async_Request.prefix">
<summary>
Prefix
(default value: 'wp')
</summary>

</member>
<member name="F:Elementor.Core.Base.BackgroundProcess.WP_Async_Request.action">
<summary>
Action
(default value: 'async_request')
</summary>

</member>
<member name="F:Elementor.Core.Base.BackgroundProcess.WP_Async_Request.identifier">
<summary>
Identifier
</summary>

</member>
<member name="F:Elementor.Core.Base.BackgroundProcess.WP_Async_Request.data">
<summary>
Data
(default value: array())
</summary>

</member>
<member name="T:Elementor.Core.Base.BackgroundProcess.WP_Background_Process">
<summary>
Abstract WP_Background_Process class.
</summary>
</member>
<member name="F:Elementor.Core.Base.BackgroundProcess.WP_Background_Process.action">
<summary>
Action
(default value: 'background_process')
</summary>

</member>
<member name="F:Elementor.Core.Base.BackgroundProcess.WP_Background_Process.start_time">
<summary>
Start time of current process.
(default value: 0)
</summary>

</member>
<member name="F:Elementor.Core.Base.BackgroundProcess.WP_Background_Process.cron_hook_identifier">
<summary>
Cron_hook_identifier
</summary>

</member>
<member name="F:Elementor.Core.Base.BackgroundProcess.WP_Background_Process.cron_interval_identifier">
<summary>
Cron_interval_identifier
</summary>

</member>
<member name="T:Elementor.Core.Base.Background_Task_Manager">
</member>
<member name="T:Elementor.Core.Base.Background_Task">
<summary>
WC_Background_Process class.
</summary>
</member>
<member name="T:Elementor.Core.Base.Base_Object">
<summary>
Base Object
Base class that provides basic settings handling functionality.
</summary>
</member>
<member name="F:Elementor.Core.Base.Base_Object.settings">
<summary>
Settings.
Holds the object settings.
</summary>

</member>
<member name="T:Elementor.Core.Base.DB_Upgrades_Manager">
</member>
<member name="T:Elementor.Core.Base.Document">
<summary>
Elementor document.
An abstract class that provides the needed properties and methods to
manage and handle documents in inheriting classes.
</summary>
</member>
<member name="F:Elementor.Core.Base.Document.post">
<summary>
Document post data.
Holds the document post data.
</summary>

</member>
<member name="F:Elementor.Core.Base.Document.TYPE_META_KEY">
<summary>
Document type meta key.
</summary>

</member>
<member name="F:Elementor.Core.Base.Document.STATUS_PUBLISH">
<summary>
Document publish status.
</summary>

</member>
<member name="F:Elementor.Core.Base.Document.STATUS_DRAFT">
<summary>
Document draft status.
</summary>

</member>
<member name="F:Elementor.Core.Base.Document.STATUS_PRIVATE">
<summary>
Document private status.
</summary>

</member>
<member name="F:Elementor.Core.Base.Document.STATUS_AUTOSAVE">
<summary>
Document autosave status.
</summary>

</member>
<member name="F:Elementor.Core.Base.Document.STATUS_PENDING">
<summary>
Document pending status.
</summary>

</member>
<member name="T:Elementor.Core.Base.Elements_Iteration_Actions.Assets">
</member>
<member name="M:Elementor.Core.Base.Elements_Iteration_Actions.Assets.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="T:Elementor.Core.Base.Elements_Iteration_Actions.Base">
</member>
<member name="F:Elementor.Core.Base.Elements_Iteration_Actions.Base.document">
<summary>
The current document that the Base class instance was created from.
</summary>

</member>
<member name="F:Elementor.Core.Base.Elements_Iteration_Actions.Base.mode">
<summary>
Indicates if the methods are being triggered on page save or at render time (value will be either 'save' or 'render').
</summary>

</member>
<member name="T:Elementor.Core.Base.Module">
<summary>
Elementor module.
An abstract class that provides the needed properties and methods to
manage and handle modules in inheriting classes.
</summary>
</member>
<member name="F:Elementor.Core.Base.Module.reflection">
<summary>
Module class reflection.
Holds the information about a class.
</summary>

</member>
<member name="F:Elementor.Core.Base.Module.components">
<summary>
Module components.
Holds the module components.
</summary>

</member>
<member name="T:Elementor.Core.Breakpoints.Breakpoint">
</member>
<member name="M:Elementor.Core.Breakpoints.Breakpoint.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="T:Elementor.Core.Breakpoints.Manager">
</member>
<member name="F:Elementor.Core.Breakpoints.Manager.breakpoints">
<summary>
Breakpoints
An array containing instances of the all of the system's available breakpoints.
</summary>

</member>
<member name="F:Elementor.Core.Breakpoints.Manager.active_breakpoints">
<summary>
Active Breakpoints
An array containing instances of the enabled breakpoints.
</summary>

</member>
<member name="F:Elementor.Core.Breakpoints.Manager.responsive_control_duplication_mode">
<summary>
Responsive Control Duplication Mode.
Determines the current responsive control generation mode.
Options are:
-- 'on': Responsive controls are duplicated in `add_responsive_control()`.
-- 'off': Responsive controls are NOT duplicated in `add_responsive_control()`.
-- 'dynamic': Responsive controls are only duplicated if their config contains `'dynamic' =&gt; 'active' =&gt; true`.

When generating Post CSS, the mode is set to 'on'. When generating Dynamic CSS, the mode is set to 'dynamic'.

default value is 'off'.
</summary>

</member>
<member name="M:Elementor.Core.Breakpoints.Manager.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="T:Elementor.Core.Common.App">
<summary>
App
Elementor's common app that groups shared functionality, components and configuration
</summary>
</member>
<member name="M:Elementor.Core.Common.App.#ctor">
<summary>
App constructor.
</summary>
</member>
<member name="M:Elementor.Core.Common.App.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Core.Common.App.#ctor(Pchp.Core.Context)">
<summary>
App constructor.
</summary>
</member>
<member name="T:Elementor.Core.Common.Modules.Ajax.Module">
<summary>
Elementor ajax manager.
Elementor ajax manager handler class is responsible for handling Elementor
ajax requests, ajax responses and registering actions applied on them.
</summary>
</member>
<member name="F:Elementor.Core.Common.Modules.Ajax.Module.ajax_actions">
<summary>
Ajax actions.
Holds all the register ajax action.
</summary>

</member>
<member name="F:Elementor.Core.Common.Modules.Ajax.Module.requests">
<summary>
Ajax requests.
Holds all the register ajax requests.
</summary>

</member>
<member name="F:Elementor.Core.Common.Modules.Ajax.Module.response_data">
<summary>
Ajax response data.
Holds all the response data for all the ajax requests.
</summary>

</member>
<member name="F:Elementor.Core.Common.Modules.Ajax.Module.current_action_id">
<summary>
Current ajax action ID.
Holds all the ID for the current ajax action.
</summary>

</member>
<member name="M:Elementor.Core.Common.Modules.Ajax.Module.#ctor">
<summary>
Ajax manager constructor.
Initializing Elementor ajax manager.
</summary>
</member>
<member name="M:Elementor.Core.Common.Modules.Ajax.Module.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Core.Common.Modules.Ajax.Module.#ctor(Pchp.Core.Context)">
<summary>
Ajax manager constructor.
Initializing Elementor ajax manager.
</summary>
</member>
<member name="T:Elementor.Core.Common.Modules.Connect.Admin">
</member>
<member name="M:Elementor.Core.Common.Modules.Connect.Admin.#ctor">
</member>
<member name="M:Elementor.Core.Common.Modules.Connect.Admin.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Core.Common.Modules.Connect.Admin.#ctor(Pchp.Core.Context)">
</member>
<member name="T:Elementor.Core.Common.Modules.Connect.Apps.Base_App">
</member>
<member name="T:Elementor.Core.Common.Modules.Connect.Apps.Base_User_App">
</member>
<member name="T:Elementor.Core.Common.Modules.Connect.Apps.Common_App">
</member>
<member name="T:Elementor.Core.Common.Modules.Connect.Apps.Connect">
</member>
<member name="M:Elementor.Core.Common.Modules.Connect.Apps.Connect.#ctor">
</member>
<member name="M:Elementor.Core.Common.Modules.Connect.Apps.Connect.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Core.Common.Modules.Connect.Apps.Connect.#ctor(Pchp.Core.Context)">
</member>
<member name="T:Elementor.Core.Common.Modules.Connect.Apps.Library">
</member>
<member name="M:Elementor.Core.Common.Modules.Connect.Apps.Library.#ctor">
</member>
<member name="M:Elementor.Core.Common.Modules.Connect.Apps.Library.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Core.Common.Modules.Connect.Apps.Library.#ctor(Pchp.Core.Context)">
</member>
<member name="T:Elementor.Core.Common.Modules.Connect.Module">
</member>
<member name="F:Elementor.Core.Common.Modules.Connect.Module.apps">
<summary>
Apps Instances.
Holds the list of all the apps instances.
</summary>

</member>
<member name="F:Elementor.Core.Common.Modules.Connect.Module.categories">
<summary>
Registered apps categories.
Holds the list of all the registered apps categories.
</summary>

</member>
<member name="M:Elementor.Core.Common.Modules.Connect.Module.#ctor">
</member>
<member name="M:Elementor.Core.Common.Modules.Connect.Module.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Core.Common.Modules.Connect.Module.#ctor(Pchp.Core.Context)">
</member>
<member name="T:Elementor.Core.Common.Modules.Finder.Base_Category">
<summary>
Base Category
Base class for Elementor Finder categories.
</summary>
</member>
<member name="T:Elementor.Core.Common.Modules.Finder.Categories_Manager">
</member>
<member name="T:Elementor.Core.Common.Modules.Finder.Categories.Create">
<summary>
Create Category
Provides items related to creation of new posts/pages/templates etc.
</summary>
</member>
<member name="T:Elementor.Core.Common.Modules.Finder.Categories.Edit">
<summary>
Edit Category
Provides items related to editing of posts/pages/templates etc.
</summary>
</member>
<member name="T:Elementor.Core.Common.Modules.Finder.Categories.General">
<summary>
General Category
Provides general items related to Elementor Admin.
</summary>
</member>
<member name="T:Elementor.Core.Common.Modules.Finder.Categories.Settings">
<summary>
Settings Category
Provides items related to Elementor's settings.
</summary>
</member>
<member name="T:Elementor.Core.Common.Modules.Finder.Categories.Site">
<summary>
Site Category
Provides general site items.
</summary>
</member>
<member name="T:Elementor.Core.Common.Modules.Finder.Categories.Tools">
<summary>
Tools Category
Provides items related to Elementor's tools.
</summary>
</member>
<member name="T:Elementor.Core.Common.Modules.Finder.Module">
<summary>
Finder Module
Responsible for initializing Elementor Finder functionality
</summary>
</member>
<member name="F:Elementor.Core.Common.Modules.Finder.Module.categories_manager">
<summary>
Categories manager.
</summary>

</member>
<member name="M:Elementor.Core.Common.Modules.Finder.Module.#ctor">
<summary>
Module constructor.
</summary>
</member>
<member name="M:Elementor.Core.Common.Modules.Finder.Module.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Core.Common.Modules.Finder.Module.#ctor(Pchp.Core.Context)">
<summary>
Module constructor.
</summary>
</member>
<member name="T:Elementor.Core.Debug.Classes.Htaccess">
</member>
<member name="M:Elementor.Core.Debug.Classes.Htaccess.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="T:Elementor.Core.Debug.Classes.Inspection_Base">
</member>
<member name="T:Elementor.Core.Debug.Classes.Theme_Missing">
</member>
<member name="T:Elementor.Core.Debug.Inspector">
</member>
<member name="M:Elementor.Core.Debug.Inspector.#ctor">
</member>
<member name="M:Elementor.Core.Debug.Inspector.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Core.Debug.Inspector.#ctor(Pchp.Core.Context)">
</member>
<member name="T:Elementor.Core.Debug.Loading_Inspection_Manager">
</member>
<member name="T:Elementor.Core.DocumentTypes.PageBase">
</member>
<member name="T:Elementor.Core.DocumentTypes.Page">
</member>
<member name="M:Elementor.Core.DocumentTypes.Page.#ctor(Pchp.Core.PhpArray)">
<param name="data" type="array"></param>
</member>
<member name="M:Elementor.Core.DocumentTypes.Page.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Core.DocumentTypes.Page.#ctor(Pchp.Core.Context,Pchp.Core.PhpArray)">
<param name="data" type="array"></param>
</member>
<member name="T:Elementor.Core.DocumentTypes.Post">
</member>
<member name="M:Elementor.Core.DocumentTypes.Post.#ctor(Pchp.Core.PhpArray)">
<param name="data" type="array"></param>
</member>
<member name="M:Elementor.Core.DocumentTypes.Post.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Core.DocumentTypes.Post.#ctor(Pchp.Core.Context,Pchp.Core.PhpArray)">
<param name="data" type="array"></param>
</member>
<member name="T:Elementor.Core.Documents_Manager">
<summary>
Elementor documents manager.
Elementor documents manager handler class is responsible for registering and
managing Elementor documents.
</summary>
</member>
<member name="F:Elementor.Core.Documents_Manager.types">
<summary>
Registered types.
Holds the list of all the registered types.
</summary>

</member>
<member name="F:Elementor.Core.Documents_Manager.documents">
<summary>
Registered documents.
Holds the list of all the registered documents.
</summary>

</member>
<member name="F:Elementor.Core.Documents_Manager.current_doc">
<summary>
Current document.
Holds the current document.
</summary>

</member>
<member name="F:Elementor.Core.Documents_Manager.switched_data">
<summary>
Switched data.
Holds the current document when changing to the requested post.
</summary>

</member>
<member name="M:Elementor.Core.Documents_Manager.#ctor">
<summary>
Documents manager constructor.
Initializing the Elementor documents manager.
</summary>
</member>
<member name="M:Elementor.Core.Documents_Manager.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Core.Documents_Manager.#ctor(Pchp.Core.Context)">
<summary>
Documents manager constructor.
Initializing the Elementor documents manager.
</summary>
</member>
<member name="T:Elementor.Core.DynamicTags.Base_Tag">
<summary>
Elementor base tag.
An abstract class to register new Elementor tags.
</summary>
</member>
<member name="T:Elementor.Core.DynamicTags.Data_Tag">
<summary>
Elementor base data tag.
An abstract class to register new Elementor data tags.
</summary>
</member>
<member name="T:Elementor.Core.DynamicTags.Dynamic_CSS">
</member>
<member name="M:Elementor.Core.DynamicTags.Dynamic_CSS.#ctor(Pchp.Core.PhpValue,Elementor.Core.Files.CSS.Post)">
<summary>
Dynamic_CSS constructor.
</summary>
<param name="post_id" type="int">Post ID</param>
<param name="post_css_file" type="Post_CSS"></param>
</member>
<member name="M:Elementor.Core.DynamicTags.Dynamic_CSS.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Core.DynamicTags.Dynamic_CSS.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue,Elementor.Core.Files.CSS.Post)">
<summary>
Dynamic_CSS constructor.
</summary>
<param name="post_id" type="int">Post ID</param>
<param name="post_css_file" type="Post_CSS"></param>
</member>
<member name="T:Elementor.Core.DynamicTags.Manager">
</member>
<member name="M:Elementor.Core.DynamicTags.Manager.#ctor">
<summary>
Dynamic tags manager constructor.
Initializing Elementor dynamic tags manager.
</summary>
</member>
<member name="M:Elementor.Core.DynamicTags.Manager.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Core.DynamicTags.Manager.#ctor(Pchp.Core.Context)">
<summary>
Dynamic tags manager constructor.
Initializing Elementor dynamic tags manager.
</summary>
</member>
<member name="T:Elementor.Core.DynamicTags.Tag">
<summary>
Elementor tag.
An abstract class to register new Elementor tag.
</summary>
</member>
<member name="T:Elementor.Core.Editor.Data.Globals.Controller">
</member>
<member name="M:Elementor.Core.Editor.Data.Globals.Controller.#ctor">
<summary>
Controller constructor.
Register endpoints on 'rest_api_init'.
</summary>
</member>
<member name="M:Elementor.Core.Editor.Data.Globals.Controller.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Core.Editor.Data.Globals.Controller.#ctor(Pchp.Core.Context)">
<summary>
Controller constructor.
Register endpoints on 'rest_api_init'.
</summary>
</member>
<member name="T:Elementor.Core.Editor.Data.Globals.Endpoints.Base">
</member>
<member name="T:Elementor.Core.Editor.Data.Globals.Endpoints.Colors">
</member>
<member name="M:Elementor.Core.Editor.Data.Globals.Endpoints.Colors.#ctor(Pchp.Core.PhpValue)">
<summary>
Endpoint constructor.
run `$this-&gt;&gt;register()`.
</summary>
<param name="controller" type="\Elementor\Data\Base\Controller"></param>
</member>
<member name="M:Elementor.Core.Editor.Data.Globals.Endpoints.Colors.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Core.Editor.Data.Globals.Endpoints.Colors.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Endpoint constructor.
run `$this-&gt;&gt;register()`.
</summary>
<param name="controller" type="\Elementor\Data\Base\Controller"></param>
</member>
<member name="T:Elementor.Core.Editor.Data.Globals.Endpoints.Index">
</member>
<member name="M:Elementor.Core.Editor.Data.Globals.Endpoints.Index.#ctor(Pchp.Core.PhpValue)">
<summary>
Endpoint constructor.
run `$this-&gt;&gt;register()`.
</summary>
<param name="controller" type="\Elementor\Data\Base\Controller"></param>
</member>
<member name="M:Elementor.Core.Editor.Data.Globals.Endpoints.Index.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Core.Editor.Data.Globals.Endpoints.Index.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Endpoint constructor.
run `$this-&gt;&gt;register()`.
</summary>
<param name="controller" type="\Elementor\Data\Base\Controller"></param>
</member>
<member name="T:Elementor.Core.Editor.Data.Globals.Endpoints.Typography">
</member>
<member name="M:Elementor.Core.Editor.Data.Globals.Endpoints.Typography.#ctor(Pchp.Core.PhpValue)">
<summary>
Endpoint constructor.
run `$this-&gt;&gt;register()`.
</summary>
<param name="controller" type="\Elementor\Data\Base\Controller"></param>
</member>
<member name="M:Elementor.Core.Editor.Data.Globals.Endpoints.Typography.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Core.Editor.Data.Globals.Endpoints.Typography.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Endpoint constructor.
run `$this-&gt;&gt;register()`.
</summary>
<param name="controller" type="\Elementor\Data\Base\Controller"></param>
</member>
<member name="T:Elementor.Core.Editor.Editor">
<summary>
Elementor editor.
Elementor editor handler class is responsible for initializing Elementor
editor and register all the actions needed to display the editor.
</summary>
</member>
<member name="F:Elementor.Core.Editor.Editor.post_id">
<summary>
Post ID.
Holds the ID of the current post being edited.
</summary>

</member>
<member name="F:Elementor.Core.Editor.Editor.is_edit_mode">
<summary>
Whether the edit mode is active.
Used to determine whether we are in edit mode.
</summary>

</member>
<member name="F:Elementor.Core.Editor.Editor.EDITING_NONCE_KEY">
<summary>
The nonce key for Elementor editor.
</summary>

</member>
<member name="F:Elementor.Core.Editor.Editor.EDITING_CAPABILITY">
<summary>
User capability required to access Elementor editor.
</summary>

</member>
<member name="M:Elementor.Core.Editor.Editor.#ctor">
<summary>
Editor constructor.
Initializing Elementor editor and redirect from old URL structure of
Elementor editor.
</summary>
</member>
<member name="M:Elementor.Core.Editor.Editor.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Core.Editor.Editor.#ctor(Pchp.Core.Context)">
<summary>
Editor constructor.
Initializing Elementor editor and redirect from old URL structure of
Elementor editor.
</summary>
</member>
<member name="T:Elementor.Core.Editor.Notice_Bar">
</member>
<member name="M:Elementor.Core.Editor.Notice_Bar.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="T:Elementor.Core.Experiments.Manager">
</member>
<member name="M:Elementor.Core.Experiments.Manager.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="T:Elementor.Core.Files.Assets.Files_Upload_Handler">
</member>
<member name="T:Elementor.Core.Files.Assets.Json.Json_Handler">
</member>
<member name="M:Elementor.Core.Files.Assets.Json.Json_Handler.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="T:Elementor.Core.Files.Assets.Manager">
<summary>
Elementor files manager.
Elementor files manager handler class is responsible for creating files.
</summary>
</member>
<member name="F:Elementor.Core.Files.Assets.Manager.asset_types">
<summary>
Holds registered asset types
</summary>

</member>
<member name="M:Elementor.Core.Files.Assets.Manager.#ctor">
<summary>
Assets manager constructor.
Initializing the Elementor assets manager.
</summary>
</member>
<member name="M:Elementor.Core.Files.Assets.Manager.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Core.Files.Assets.Manager.#ctor(Pchp.Core.Context)">
<summary>
Assets manager constructor.
Initializing the Elementor assets manager.
</summary>
</member>
<member name="T:Elementor.Core.Files.Assets.Svg.Svg_Handler">
</member>
<member name="F:Elementor.Core.Files.Assets.Svg.Svg_Handler.attachment_id">
<summary>
Attachment ID.
Holds the current attachment ID.
</summary>

</member>
<member name="F:Elementor.Core.Files.Assets.Svg.Svg_Handler.META_KEY">
<summary>
Inline svg attachment meta key
</summary>

</member>
<member name="M:Elementor.Core.Files.Assets.Svg.Svg_Handler.#ctor">
<summary>
Svg_Handler constructor.
</summary>
</member>
<member name="M:Elementor.Core.Files.Assets.Svg.Svg_Handler.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Core.Files.Assets.Svg.Svg_Handler.#ctor(Pchp.Core.Context)">
<summary>
Svg_Handler constructor.
</summary>
</member>
<member name="T:Elementor.Core.Files.Base">
</member>
<member name="F:Elementor.Core.Files.Base.path">
<summary>
File path.
Holds the file path.
</summary>

</member>
<member name="F:Elementor.Core.Files.Base.content">
<summary>
Content.
Holds the file content.
</summary>

</member>
<member name="T:Elementor.Core.Files.CSS.Base">
<summary>
Elementor CSS file.
Elementor CSS file handler class is responsible for generating CSS files.
</summary>
</member>
<member name="F:Elementor.Core.Files.CSS.Base.fonts">
<summary>
Fonts.
Holds the list of fonts.
</summary>

</member>
<member name="F:Elementor.Core.Files.CSS.Base.stylesheet_obj">
<summary>
Stylesheet object.
Holds the CSS file stylesheet instance.
</summary>

</member>
<member name="F:Elementor.Core.Files.CSS.Base.CSS_STATUS_FILE">
<summary>
Elementor CSS file generated status.
The parsing result after generating CSS file.
</summary>

</member>
<member name="F:Elementor.Core.Files.CSS.Base.CSS_STATUS_INLINE">
<summary>
Elementor inline CSS status.
The parsing result after generating inline CSS.
</summary>

</member>
<member name="F:Elementor.Core.Files.CSS.Base.CSS_STATUS_EMPTY">
<summary>
Elementor CSS empty status.
The parsing result when an empty CSS returned.
</summary>

</member>
<member name="T:Elementor.Core.Files.CSS.Global_CSS">
<summary>
Elementor global CSS file.
Elementor CSS file handler class is responsible for generating the global CSS
file.
</summary>
</member>
<member name="F:Elementor.Core.Files.CSS.Global_CSS.FILE_HANDLER_ID">
<summary>
Elementor global CSS file handler ID.
</summary>

</member>
<member name="M:Elementor.Core.Files.CSS.Global_CSS.#ctor(Pchp.Core.PhpValue)">
</member>
<member name="M:Elementor.Core.Files.CSS.Global_CSS.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Core.Files.CSS.Global_CSS.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="T:Elementor.Core.Files.CSS.Post_Local_Cache">
</member>
<member name="F:Elementor.Core.Files.CSS.Post_Local_Cache.meta_cache">
<summary>
Meta cache
</summary>

</member>
<member name="T:Elementor.Core.Files.CSS.Post_Preview">
<summary>
Elementor post preview CSS file.
Elementor CSS file handler class is responsible for generating the post
preview CSS file.
</summary>
</member>
<member name="F:Elementor.Core.Files.CSS.Post_Preview.post_id_for_data">
<summary>
Preview ID.
Holds the ID of the current post being previewed.
</summary>

</member>
<member name="M:Elementor.Core.Files.CSS.Post_Preview.#ctor(Pchp.Core.PhpValue)">
<summary>
Post preview CSS file constructor.
Initializing the CSS file of the post preview. Set the post ID and the
parent ID and initiate the stylesheet.
</summary>
<param name="post_id" type="int">Post ID.</param>
</member>
<member name="M:Elementor.Core.Files.CSS.Post_Preview.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Core.Files.CSS.Post_Preview.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Post preview CSS file constructor.
Initializing the CSS file of the post preview. Set the post ID and the
parent ID and initiate the stylesheet.
</summary>
<param name="post_id" type="int">Post ID.</param>
</member>
<member name="T:Elementor.Core.Files.CSS.Post">
<summary>
Elementor post CSS file.
Elementor CSS file handler class is responsible for generating the single
post CSS file.
</summary>
</member>
<member name="F:Elementor.Core.Files.CSS.Post.post_id">
<summary>
Post ID.
Holds the current post ID.
</summary>

</member>
<member name="F:Elementor.Core.Files.CSS.Post.FILE_PREFIX">
<summary>
Elementor post CSS file prefix.
</summary>

</member>
<member name="M:Elementor.Core.Files.CSS.Post.#ctor(Pchp.Core.PhpValue)">
<summary>
Post CSS file constructor.
Initializing the CSS file of the post. Set the post ID and initiate the stylesheet.
</summary>
<param name="post_id" type="int">Post ID.</param>
</member>
<member name="M:Elementor.Core.Files.CSS.Post.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Core.Files.CSS.Post.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Post CSS file constructor.
Initializing the CSS file of the post. Set the post ID and initiate the stylesheet.
</summary>
<param name="post_id" type="int">Post ID.</param>
</member>
<member name="T:Elementor.Core.Files.File_Types.Base">
<summary>
Elementor File Types Base.
The File Types Base class provides base methods used by all file type handler classes.
These methods are used in file upl
</summary>
</member>
<member name="T:Elementor.Core.Files.File_Types.Json">
</member>
<member name="T:Elementor.Core.Files.File_Types.Zip">
<summary>
Elementor File Types Base.
The File Types Base class provides base methods used by all file type handler classes.
These methods are used in file upl
</summary>
</member>
<member name="T:Elementor.Core.Files.Manager">
<summary>
Elementor files manager.
Elementor files manager handler class is responsible for creating files.
</summary>
</member>
<member name="M:Elementor.Core.Files.Manager.#ctor">
<summary>
Files manager constructor.
Initializing the Elementor files manager.
</summary>
</member>
<member name="M:Elementor.Core.Files.Manager.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Core.Files.Manager.#ctor(Pchp.Core.Context)">
<summary>
Files manager constructor.
Initializing the Elementor files manager.
</summary>
</member>
<member name="T:Elementor.Core.Files.Uploads_Manager">
<summary>
Elementor uploads manager.
Elementor uploads manager handler class is responsible for handling file uploads that are not done with WP Media.
</summary>
</member>
<member name="M:Elementor.Core.Files.Uploads_Manager.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="T:Elementor.Core.Frontend.Render_Mode_Manager">
</member>
<member name="M:Elementor.Core.Frontend.Render_Mode_Manager.#ctor">
<summary>
Render_Mode_Manager constructor.
</summary>
</member>
<member name="M:Elementor.Core.Frontend.Render_Mode_Manager.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Core.Frontend.Render_Mode_Manager.#ctor(Pchp.Core.Context)">
<summary>
Render_Mode_Manager constructor.
</summary>
</member>
<member name="T:Elementor.Core.Frontend.RenderModes.Render_Mode_Base">
</member>
<member name="T:Elementor.Core.Frontend.RenderModes.Render_Mode_Normal">
</member>
<member name="M:Elementor.Core.Frontend.RenderModes.Render_Mode_Normal.#ctor(Pchp.Core.PhpValue)">
<summary>
Render_Mode_Base constructor.
</summary>
</member>
<member name="M:Elementor.Core.Frontend.RenderModes.Render_Mode_Normal.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Core.Frontend.RenderModes.Render_Mode_Normal.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Render_Mode_Base constructor.
</summary>
</member>
<member name="T:Elementor.Core.Kits.Controls.Repeater">
</member>
<member name="M:Elementor.Core.Kits.Controls.Repeater.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="T:Elementor.Core.Kits.Documents.Kit">
</member>
<member name="M:Elementor.Core.Kits.Documents.Kit.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="T:Elementor.Core.Kits.Documents.Tabs.Global_Colors">
</member>
<member name="M:Elementor.Core.Kits.Documents.Tabs.Global_Colors.#ctor(Pchp.Core.PhpValue)">
<summary>
Constructor.
Initializing the base class by setting parent stack.
</summary>
<param name="parent" type="Controls_Stack"></param>
</member>
<member name="M:Elementor.Core.Kits.Documents.Tabs.Global_Colors.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Core.Kits.Documents.Tabs.Global_Colors.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Constructor.
Initializing the base class by setting parent stack.
</summary>
<param name="parent" type="Controls_Stack"></param>
</member>
<member name="T:Elementor.Core.Kits.Documents.Tabs.Global_Typography">
</member>
<member name="M:Elementor.Core.Kits.Documents.Tabs.Global_Typography.#ctor(Pchp.Core.PhpValue)">
<summary>
Constructor.
Initializing the base class by setting parent stack.
</summary>
<param name="parent" type="Controls_Stack"></param>
</member>
<member name="M:Elementor.Core.Kits.Documents.Tabs.Global_Typography.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Core.Kits.Documents.Tabs.Global_Typography.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Constructor.
Initializing the base class by setting parent stack.
</summary>
<param name="parent" type="Controls_Stack"></param>
</member>
<member name="T:Elementor.Core.Kits.Documents.Tabs.Settings_Background">
</member>
<member name="M:Elementor.Core.Kits.Documents.Tabs.Settings_Background.#ctor(Pchp.Core.PhpValue)">
<summary>
Constructor.
Initializing the base class by setting parent stack.
</summary>
<param name="parent" type="Controls_Stack"></param>
</member>
<member name="M:Elementor.Core.Kits.Documents.Tabs.Settings_Background.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Core.Kits.Documents.Tabs.Settings_Background.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Constructor.
Initializing the base class by setting parent stack.
</summary>
<param name="parent" type="Controls_Stack"></param>
</member>
<member name="T:Elementor.Core.Kits.Documents.Tabs.Settings_Custom_CSS">
</member>
<member name="M:Elementor.Core.Kits.Documents.Tabs.Settings_Custom_CSS.#ctor(Pchp.Core.PhpValue)">
<summary>
Constructor.
Initializing the base class by setting parent stack.
</summary>
<param name="parent" type="Controls_Stack"></param>
</member>
<member name="M:Elementor.Core.Kits.Documents.Tabs.Settings_Custom_CSS.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Core.Kits.Documents.Tabs.Settings_Custom_CSS.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Constructor.
Initializing the base class by setting parent stack.
</summary>
<param name="parent" type="Controls_Stack"></param>
</member>
<member name="T:Elementor.Core.Kits.Documents.Tabs.Settings_Layout">
</member>
<member name="M:Elementor.Core.Kits.Documents.Tabs.Settings_Layout.#ctor(Pchp.Core.PhpValue)">
<summary>
Constructor.
Initializing the base class by setting parent stack.
</summary>
<param name="parent" type="Controls_Stack"></param>
</member>
<member name="M:Elementor.Core.Kits.Documents.Tabs.Settings_Layout.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Core.Kits.Documents.Tabs.Settings_Layout.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Constructor.
Initializing the base class by setting parent stack.
</summary>
<param name="parent" type="Controls_Stack"></param>
</member>
<member name="T:Elementor.Core.Kits.Documents.Tabs.Settings_Lightbox">
</member>
<member name="M:Elementor.Core.Kits.Documents.Tabs.Settings_Lightbox.#ctor(Pchp.Core.PhpValue)">
<summary>
Constructor.
Initializing the base class by setting parent stack.
</summary>
<param name="parent" type="Controls_Stack"></param>
</member>
<member name="M:Elementor.Core.Kits.Documents.Tabs.Settings_Lightbox.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Core.Kits.Documents.Tabs.Settings_Lightbox.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Constructor.
Initializing the base class by setting parent stack.
</summary>
<param name="parent" type="Controls_Stack"></param>
</member>
<member name="T:Elementor.Core.Kits.Documents.Tabs.Settings_Page_Transitions">
</member>
<member name="M:Elementor.Core.Kits.Documents.Tabs.Settings_Page_Transitions.#ctor(Pchp.Core.PhpValue)">
<summary>
Constructor.
Initializing the base class by setting parent stack.
</summary>
<param name="parent" type="Controls_Stack"></param>
</member>
<member name="M:Elementor.Core.Kits.Documents.Tabs.Settings_Page_Transitions.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Core.Kits.Documents.Tabs.Settings_Page_Transitions.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Constructor.
Initializing the base class by setting parent stack.
</summary>
<param name="parent" type="Controls_Stack"></param>
</member>
<member name="T:Elementor.Core.Kits.Documents.Tabs.Settings_Site_Identity">
</member>
<member name="M:Elementor.Core.Kits.Documents.Tabs.Settings_Site_Identity.#ctor(Pchp.Core.PhpValue)">
<summary>
Constructor.
Initializing the base class by setting parent stack.
</summary>
<param name="parent" type="Controls_Stack"></param>
</member>
<member name="M:Elementor.Core.Kits.Documents.Tabs.Settings_Site_Identity.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Core.Kits.Documents.Tabs.Settings_Site_Identity.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Constructor.
Initializing the base class by setting parent stack.
</summary>
<param name="parent" type="Controls_Stack"></param>
</member>
<member name="T:Elementor.Core.Kits.Documents.Tabs.Tab_Base">
</member>
<member name="T:Elementor.Core.Kits.Documents.Tabs.Theme_Style_Buttons">
</member>
<member name="M:Elementor.Core.Kits.Documents.Tabs.Theme_Style_Buttons.#ctor(Pchp.Core.PhpValue)">
<summary>
Constructor.
Initializing the base class by setting parent stack.
</summary>
<param name="parent" type="Controls_Stack"></param>
</member>
<member name="M:Elementor.Core.Kits.Documents.Tabs.Theme_Style_Buttons.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Core.Kits.Documents.Tabs.Theme_Style_Buttons.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Constructor.
Initializing the base class by setting parent stack.
</summary>
<param name="parent" type="Controls_Stack"></param>
</member>
<member name="T:Elementor.Core.Kits.Documents.Tabs.Theme_Style_Form_Fields">
</member>
<member name="M:Elementor.Core.Kits.Documents.Tabs.Theme_Style_Form_Fields.#ctor(Pchp.Core.PhpValue)">
<summary>
Constructor.
Initializing the base class by setting parent stack.
</summary>
<param name="parent" type="Controls_Stack"></param>
</member>
<member name="M:Elementor.Core.Kits.Documents.Tabs.Theme_Style_Form_Fields.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Core.Kits.Documents.Tabs.Theme_Style_Form_Fields.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Constructor.
Initializing the base class by setting parent stack.
</summary>
<param name="parent" type="Controls_Stack"></param>
</member>
<member name="T:Elementor.Core.Kits.Documents.Tabs.Theme_Style_Images">
</member>
<member name="M:Elementor.Core.Kits.Documents.Tabs.Theme_Style_Images.#ctor(Pchp.Core.PhpValue)">
<summary>
Constructor.
Initializing the base class by setting parent stack.
</summary>
<param name="parent" type="Controls_Stack"></param>
</member>
<member name="M:Elementor.Core.Kits.Documents.Tabs.Theme_Style_Images.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Core.Kits.Documents.Tabs.Theme_Style_Images.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Constructor.
Initializing the base class by setting parent stack.
</summary>
<param name="parent" type="Controls_Stack"></param>
</member>
<member name="T:Elementor.Core.Kits.Documents.Tabs.Theme_Style_Typography">
</member>
<member name="M:Elementor.Core.Kits.Documents.Tabs.Theme_Style_Typography.#ctor(Pchp.Core.PhpValue)">
<summary>
Constructor.
Initializing the base class by setting parent stack.
</summary>
<param name="parent" type="Controls_Stack"></param>
</member>
<member name="M:Elementor.Core.Kits.Documents.Tabs.Theme_Style_Typography.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Core.Kits.Documents.Tabs.Theme_Style_Typography.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Constructor.
Initializing the base class by setting parent stack.
</summary>
<param name="parent" type="Controls_Stack"></param>
</member>
<member name="T:Elementor.Core.Kits.Manager">
</member>
<member name="M:Elementor.Core.Kits.Manager.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="T:Elementor.Core.Logger.Items.Base">
</member>
<member name="M:Elementor.Core.Logger.Items.Base.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="T:Elementor.Core.Logger.Items.File">
</member>
<member name="M:Elementor.Core.Logger.Items.File.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="T:Elementor.Core.Logger.Items.JS">
</member>
<member name="M:Elementor.Core.Logger.Items.JS.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="T:Elementor.Core.Logger.Items.Log_Item_Interface">
<summary>
Interface Log_Item_Interface
</summary>
</member>
<member name="T:Elementor.Core.Logger.Items.PHP">
</member>
<member name="M:Elementor.Core.Logger.Items.PHP.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="T:Elementor.Core.Logger.Log_Reporter">
<summary>
Elementor Log reporter.
Elementor log reporter handler class is responsible for generating the
debug reports.
</summary>
</member>
<member name="M:Elementor.Core.Logger.Log_Reporter.#ctor(Pchp.Core.PhpValue)">
<summary>
Reporter base constructor.
Initializing the reporter base class.
</summary>
<param name="properties" type="array">Optional. Properties to filter. Default is `null`.</param>
</member>
<member name="M:Elementor.Core.Logger.Log_Reporter.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Core.Logger.Log_Reporter.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Reporter base constructor.
Initializing the reporter base class.
</summary>
<param name="properties" type="array">Optional. Properties to filter. Default is `null`.</param>
</member>
<member name="T:Elementor.Core.Logger.Loggers.Base">
</member>
<member name="T:Elementor.Core.Logger.Loggers.Db">
</member>
<member name="T:Elementor.Core.Logger.Loggers.Logger_Interface">
</member>
<member name="T:Elementor.Core.Logger.Manager">
</member>
<member name="M:Elementor.Core.Logger.Manager.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="T:Elementor.Core.Modules_Manager">
<summary>
Elementor modules manager.
Elementor modules manager handler class is responsible for registering and
managing Elementor modules.
</summary>
</member>
<member name="F:Elementor.Core.Modules_Manager.modules">
<summary>
Registered modules.
Holds the list of all the registered modules.
</summary>

</member>
<member name="M:Elementor.Core.Modules_Manager.#ctor">
<summary>
Modules manager constructor.
Initializing the Elementor modules manager.
</summary>
</member>
<member name="M:Elementor.Core.Modules_Manager.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Core.Modules_Manager.#ctor(Pchp.Core.Context)">
<summary>
Modules manager constructor.
Initializing the Elementor modules manager.
</summary>
</member>
<member name="T:Elementor.Core.Page_Assets.Data_Managers.Base">
<summary>
Elementor Assets Data.
</summary>
</member>
<member name="T:Elementor.Core.Page_Assets.Data_Managers.Font_Icon_Svg">
<summary>
Elementor Font Icon Svg.
</summary>
</member>
<member name="M:Elementor.Core.Page_Assets.Data_Managers.Font_Icon_Svg.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="T:Elementor.Core.Page_Assets.Data_Managers.Widgets_Css">
<summary>
Elementor Assets Data.
</summary>
</member>
<member name="M:Elementor.Core.Page_Assets.Data_Managers.Widgets_Css.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="T:Elementor.Core.Page_Assets.Loader">
<summary>
Elementor assets loader.
A class that is responsible for conditionally enqueuing styles and script assets that were pre-enabled.
</summary>
</member>
<member name="M:Elementor.Core.Page_Assets.Loader.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="T:Elementor.Core.Page_Assets.Managers.Font_Icon_Svg.Base">
<summary>
Elementor Font Icon Svg.
</summary>
</member>
<member name="T:Elementor.Core.Page_Assets.Managers.Font_Icon_Svg.Font_Awesome">
<summary>
Elementor Font Icon Svg.
</summary>
</member>
<member name="T:Elementor.Core.Page_Assets.Managers.Font_Icon_Svg.Manager">
<summary>
Elementor Font Icon Svg Manager.
</summary>
</member>
<member name="T:Elementor.Core.Responsive.Files.Frontend">
</member>
<member name="M:Elementor.Core.Responsive.Files.Frontend.#ctor(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:Elementor.Core.Responsive.Files.Frontend.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Core.Responsive.Files.Frontend.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="T:Elementor.Core.Responsive.Responsive">
<summary>
Elementor responsive.
Elementor responsive handler class is responsible for setting up Elementor
responsive breakpoints.
</summary>
</member>
<member name="F:Elementor.Core.Responsive.Responsive.BREAKPOINT_OPTION_PREFIX">
<summary>
The Elementor breakpoint prefix.
</summary>

</member>
<member name="T:Elementor.Core.RoleManager.Role_Manager">
</member>
<member name="M:Elementor.Core.RoleManager.Role_Manager.#ctor">
</member>
<member name="M:Elementor.Core.RoleManager.Role_Manager.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Core.RoleManager.Role_Manager.#ctor(Pchp.Core.Context)">
</member>
<member name="T:Elementor.Core.Schemes.Base_UI">
</member>
<member name="F:Elementor.Core.Schemes.Base_UI._system_schemes">
<summary>
System schemes.
Holds the list of all the system schemes.
</summary>

</member>
<member name="T:Elementor.Core.Schemes.Base">
<summary>
Elementor scheme base.
An abstract class implementing the scheme interface, responsible for
creating new schemes.
</summary>
</member>
<member name="F:Elementor.Core.Schemes.Base.LAST_UPDATED_META">
<summary>
DB option name for the time when the scheme was last updated.
</summary>

</member>
<member name="T:Elementor.Core.Schemes.Color_Picker">
<summary>
Elementor color picker scheme.
Elementor color picker scheme class is responsible for initializing a scheme
for color pickers.
</summary>
</member>
<member name="T:Elementor.Core.Schemes.Color">
<summary>
Elementor color scheme.
Elementor color scheme class is responsible for initializing a scheme for
colors.
</summary>
</member>
<member name="F:Elementor.Core.Schemes.Color.COLOR_1">
<summary>
1st color scheme.
</summary>

</member>
<member name="F:Elementor.Core.Schemes.Color.COLOR_2">
<summary>
2nd color scheme.
</summary>

</member>
<member name="F:Elementor.Core.Schemes.Color.COLOR_3">
<summary>
3rd color scheme.
</summary>

</member>
<member name="F:Elementor.Core.Schemes.Color.COLOR_4">
<summary>
4th color scheme.
</summary>

</member>
<member name="T:Elementor.Core.Schemes.Manager">
<summary>
Elementor scheme manager.
Elementor scheme manager handler class is responsible for registering and
initializing all the supported schemes.
</summary>
</member>
<member name="F:Elementor.Core.Schemes.Manager._registered_schemes">
<summary>
Registered schemes.
Holds the list of all the registered schemes.
</summary>

</member>
<member name="M:Elementor.Core.Schemes.Manager.#ctor">
<summary>
Schemes manager constructor.
Initializing Elementor schemes manager and register default schemes.
</summary>
</member>
<member name="M:Elementor.Core.Schemes.Manager.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Core.Schemes.Manager.#ctor(Pchp.Core.Context)">
<summary>
Schemes manager constructor.
Initializing Elementor schemes manager and register default schemes.
</summary>
</member>
<member name="T:Elementor.Core.Schemes.Typography">
<summary>
Elementor typography scheme.
Elementor typography scheme class is responsible for initializing a scheme
for typography.
</summary>
</member>
<member name="F:Elementor.Core.Schemes.Typography.TYPOGRAPHY_1">
<summary>
1st typography scheme.
</summary>

</member>
<member name="F:Elementor.Core.Schemes.Typography.TYPOGRAPHY_2">
<summary>
2nd typography scheme.
</summary>

</member>
<member name="F:Elementor.Core.Schemes.Typography.TYPOGRAPHY_3">
<summary>
3rd typography scheme.
</summary>

</member>
<member name="F:Elementor.Core.Schemes.Typography.TYPOGRAPHY_4">
<summary>
4th typography scheme.
</summary>

</member>
<member name="T:Elementor.Core.Settings.Base.CSS_Manager">
</member>
<member name="T:Elementor.Core.Settings.Base.CSS_Model">
</member>
<member name="T:Elementor.Core.Settings.Base.Manager">
<summary>
Elementor settings base manager.
Elementor settings base manager handler class is responsible for registering
and managing Elementor settings base managers.
</summary>
</member>
<member name="F:Elementor.Core.Settings.Base.Manager.models_cache">
<summary>
Models cache.
Holds all the models.
</summary>

</member>
<member name="T:Elementor.Core.Settings.Base.Model">
<summary>
Elementor settings base model.
Elementor settings base model handler class is responsible for registering
and managing Elementor settings base models.
</summary>
</member>
<member name="T:Elementor.Core.Settings.EditorPreferences.Manager">
</member>
<member name="M:Elementor.Core.Settings.EditorPreferences.Manager.#ctor">
<summary>
Settings base manager constructor.
Initializing Elementor settings base manager.
</summary>
</member>
<member name="M:Elementor.Core.Settings.EditorPreferences.Manager.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Core.Settings.EditorPreferences.Manager.#ctor(Pchp.Core.Context)">
<summary>
Settings base manager constructor.
Initializing Elementor settings base manager.
</summary>
</member>
<member name="T:Elementor.Core.Settings.EditorPreferences.Model">
</member>
<member name="M:Elementor.Core.Settings.EditorPreferences.Model.#ctor(Pchp.Core.PhpArray)">
<summary>
Controls stack constructor.
Initializing the control stack class using `$data`. The `$data` is required
for a normal instance. It is optional only for internal `type instance`.
</summary>
<param name="data" type="array">Optional. Control stack data. Default is an empty array.</param>
</member>
<member name="M:Elementor.Core.Settings.EditorPreferences.Model.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Core.Settings.EditorPreferences.Model.#ctor(Pchp.Core.Context,Pchp.Core.PhpArray)">
<summary>
Controls stack constructor.
Initializing the control stack class using `$data`. The `$data` is required
for a normal instance. It is optional only for internal `type instance`.
</summary>
<param name="data" type="array">Optional. Control stack data. Default is an empty array.</param>
</member>
<member name="T:Elementor.Core.Settings.General.Manager">
<summary>
This class is deprecated, use Plugin::$instance-&gt;kits_manager-&gt;get_active_kit_for_frontend() instead.
it changed to support call like this: Manager::get_settings_managers( 'general' )-&gt;get_model()-&gt;get_settings( 'elementor_default_generic_fonts' )
</summary>
</member>
<member name="F:Elementor.Core.Settings.General.Manager.META_KEY">
<summary>
Meta key for the general settings.
</summary>

</member>
<member name="M:Elementor.Core.Settings.General.Manager.#ctor">
<summary>
General settings manager constructor.
Initializing Elementor general settings manager.
</summary>
</member>
<member name="M:Elementor.Core.Settings.General.Manager.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Core.Settings.General.Manager.#ctor(Pchp.Core.Context)">
<summary>
General settings manager constructor.
Initializing Elementor general settings manager.
</summary>
</member>
<member name="T:Elementor.Core.Settings.General.Model">
<summary>
This file is deprecated, use Plugin::$instance-&gt;kits_manager-&gt;get_active_kit_for_frontend() instead.
it changed to support call like this: Manager::get_settings_managers( 'general' )-&gt;get_model()-&gt;get_settings( 'elementor_default_generic_fonts' )
</summary>
</member>
<member name="T:Elementor.Core.Settings.Manager">
<summary>
Elementor settings manager.
Elementor settings manager handler class is responsible for registering and
managing Elementor settings managers.
</summary>
</member>
<member name="T:Elementor.Core.Settings.Page.Manager">
<summary>
Elementor page settings manager.
Elementor page settings manager handler class is responsible for registering
and managing Elementor page settings managers.
</summary>
</member>
<member name="F:Elementor.Core.Settings.Page.Manager.META_KEY">
<summary>
Meta key for the page settings.
</summary>

</member>
<member name="M:Elementor.Core.Settings.Page.Manager.#ctor">
<summary>
Settings base manager constructor.
Initializing Elementor settings base css manager.
</summary>
</member>
<member name="M:Elementor.Core.Settings.Page.Manager.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Core.Settings.Page.Manager.#ctor(Pchp.Core.Context)">
<summary>
Settings base manager constructor.
Initializing Elementor settings base css manager.
</summary>
</member>
<member name="T:Elementor.Core.Settings.Page.Model">
<summary>
Elementor page settings model.
Elementor page settings model handler class is responsible for registering
and managing Elementor page settings models.
</summary>
</member>
<member name="F:Elementor.Core.Settings.Page.Model.post">
<summary>
WordPress post object.
Holds an instance of `WP_Post` containing the post object.
</summary>

</member>
<member name="M:Elementor.Core.Settings.Page.Model.#ctor(Pchp.Core.PhpArray)">
<summary>
Model constructor.
Initializing Elementor page settings model.
</summary>
<param name="data" type="array">Optional. Model data. Default is an empty array.</param>
</member>
<member name="M:Elementor.Core.Settings.Page.Model.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Core.Settings.Page.Model.#ctor(Pchp.Core.Context,Pchp.Core.PhpArray)">
<summary>
Model constructor.
Initializing Elementor page settings model.
</summary>
<param name="data" type="array">Optional. Model data. Default is an empty array.</param>
</member>
<member name="T:Elementor.Core.Upgrade.Elementor_3_Re_Migrate_Globals">
</member>
<member name="M:Elementor.Core.Upgrade.Elementor_3_Re_Migrate_Globals.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="T:Elementor.Core.Upgrade.Manager">
</member>
<member name="M:Elementor.Core.Upgrade.Manager.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="T:Elementor.Core.Upgrade.Updater">
</member>
<member name="M:Elementor.Core.Upgrade.Updater.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="T:Elementor.Core.Upgrade.Upgrade_Utils">
</member>
<member name="T:Elementor.Core.Upgrade.Upgrades">
<summary>
Elementor upgrades.
Elementor upgrades handler class is responsible for updating different
Elementor versions.
</summary>
</member>
<member name="T:Elementor.Core.Utils.Collection">
</member>
<member name="F:Elementor.Core.Utils.Collection.items">
<summary>
The items contained in the collection.
</summary>

</member>
<member name="M:Elementor.Core.Utils.Collection.#ctor(Pchp.Core.PhpArray)">
<summary>
Collection constructor.
</summary>
<param name="items" type="array"></param>
</member>
<member name="M:Elementor.Core.Utils.Collection.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Core.Utils.Collection.#ctor(Pchp.Core.Context,Pchp.Core.PhpArray)">
<summary>
Collection constructor.
</summary>
<param name="items" type="array"></param>
</member>
<member name="T:Elementor.Core.Utils.Exceptions">
<summary>
Elementor exceptions.
Elementor exceptions handler class is responsible for handling exceptions.
</summary>
</member>
<member name="F:Elementor.Core.Utils.Exceptions.BAD_REQUEST">
<summary>
HTTP status code for bad request error.
</summary>

</member>
<member name="F:Elementor.Core.Utils.Exceptions.UNAUTHORIZED">
<summary>
HTTP status code for unauthorized access error.
</summary>

</member>
<member name="F:Elementor.Core.Utils.Exceptions.FORBIDDEN">
<summary>
HTTP status code for forbidden access error.
</summary>

</member>
<member name="F:Elementor.Core.Utils.Exceptions.NOT_FOUND">
<summary>
HTTP status code for resource that could not be found.
</summary>

</member>
<member name="F:Elementor.Core.Utils.Exceptions.INTERNAL_SERVER_ERROR">
<summary>
HTTP status code for internal server error.
</summary>

</member>
<member name="T:Elementor.Core.Utils.Http">
</member>
<member name="T:Elementor.Core.Utils.ImportExport.Parsers.WXR_Parser_Regex">
<summary>
WXR Parser that uses regular expressions. Fallback for installs without an XML parser.
</summary>
</member>
<member name="M:Elementor.Core.Utils.ImportExport.Parsers.WXR_Parser_Regex.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="T:Elementor.Core.Utils.ImportExport.Parsers.WXR_Parser_SimpleXML">
<summary>
WXR Parser that makes use of the SimpleXML PHP extension.
</summary>
</member>
<member name="T:Elementor.Core.Utils.ImportExport.Parsers.WXR_Parser_XML">
<summary>
WXR Parser that makes use of the XML Parser PHP extension.
</summary>
</member>
<member name="T:Elementor.Core.Utils.ImportExport.Parsers.WXR_Parser">
<summary>
WordPress Importer class for managing parsing of WXR files.
</summary>
</member>
<member name="T:Elementor.Core.Utils.ImportExport.WP_Exporter">
</member>
<member name="M:Elementor.Core.Utils.ImportExport.WP_Exporter.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="T:Elementor.Core.Utils.ImportExport.WP_Import">
</member>
<member name="M:Elementor.Core.Utils.ImportExport.WP_Import.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="T:Elementor.Core.Utils.Str">
</member>
<member name="T:Elementor.Core.Utils.Version">
</member>
<member name="F:Elementor.Core.Utils.Version.major1">
<summary>
First number of a version 0.x.x
</summary>

</member>
<member name="F:Elementor.Core.Utils.Version.major2">
<summary>
Second number of a version x.0.x
</summary>

</member>
<member name="F:Elementor.Core.Utils.Version.patch">
<summary>
Third number of a version x.x.0
</summary>

</member>
<member name="F:Elementor.Core.Utils.Version.stage">
<summary>
The stage of a version x.x.x-stage.
e.g: x.x.x-dev1, x.x.x-beta3, x.x.x-rc
</summary>

</member>
<member name="M:Elementor.Core.Utils.Version.#ctor(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Version constructor.
</summary>
</member>
<member name="M:Elementor.Core.Utils.Version.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Core.Utils.Version.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Version constructor.
</summary>
</member>
<member name="T:Elementor.Core.Wp_Api">
<summary>
This class is responsible for the interaction with WordPress Core API.
The main benefit is making it easy to mock in testing
and it can help to create unit tests without the hustle of mocking WordPress itself.
</summary>
</member>
<member name="T:Elementor.Data.Base.Controller">
</member>
<member name="F:Elementor.Data.Base.Controller.endpoints">
<summary>
Loaded endpoint(s).
</summary>

</member>
<member name="F:Elementor.Data.Base.Controller.processors">
<summary>
Loaded processor(s).
</summary>

</member>
<member name="T:Elementor.Data.Base.Endpoint">
</member>
<member name="F:Elementor.Data.Base.Endpoint.controller">
<summary>
Controller of current endpoint.
</summary>

</member>
<member name="F:Elementor.Data.Base.Endpoint.sub_endpoints">
<summary>
Loaded sub endpoint(s).
</summary>

</member>
<member name="T:Elementor.Data.Base.Processor">
</member>
<member name="F:Elementor.Data.Base.Processor.controller">
<summary>
Controller.
</summary>

</member>
<member name="T:Elementor.Data.Base.Processor.After">
</member>
<member name="T:Elementor.Data.Base.Processor.Before">
</member>
<member name="T:Elementor.Data.Base.SubEndpoint">
</member>
<member name="T:Elementor.Data.Manager">
</member>
<member name="F:Elementor.Data.Manager.controllers">
<summary>
Loaded controllers.
</summary>

</member>
<member name="F:Elementor.Data.Manager.command_formats">
<summary>
Loaded command(s) format.
</summary>

</member>
<member name="M:Elementor.Data.Manager.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="T:Elementor.manual__ajaxloaddocumentation">
</member>
<member name="M:Elementor.manual__ajaxloaddocumentation.#ctor(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="M:Elementor.manual__ajaxloaddocumentation.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.manual__ajaxloaddocumentation.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="T:Elementor.manual__home_help_blocks">
</member>
<member name="M:Elementor.manual__home_help_blocks.#ctor(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="M:Elementor.manual__home_help_blocks.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.manual__home_help_blocks.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="T:Elementor.manual__counter_number">
</member>
<member name="M:Elementor.manual__counter_number.#ctor(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="M:Elementor.manual__counter_number.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.manual__counter_number.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="T:Elementor.manual__documentation_article">
</member>
<member name="M:Elementor.manual__documentation_article.#ctor(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="M:Elementor.manual__documentation_article.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.manual__documentation_article.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="T:Elementor.manual__faq_article">
</member>
<member name="M:Elementor.manual__faq_article.#ctor(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="M:Elementor.manual__faq_article.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.manual__faq_article.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="T:Elementor.manual__faq_category">
</member>
<member name="M:Elementor.manual__faq_category.#ctor(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="M:Elementor.manual__faq_category.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.manual__faq_category.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="T:Elementor.manual__frame_item">
</member>
<member name="M:Elementor.manual__frame_item.#ctor(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="M:Elementor.manual__frame_item.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.manual__frame_item.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="T:Elementor.manual__inlinedocumentation">
</member>
<member name="M:Elementor.manual__inlinedocumentation.#ctor(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="M:Elementor.manual__inlinedocumentation.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.manual__inlinedocumentation.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="T:Elementor.manual__kb_single_cat_records">
</member>
<member name="M:Elementor.manual__kb_single_cat_records.#ctor(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="M:Elementor.manual__kb_single_cat_records.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.manual__kb_single_cat_records.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="T:Elementor.manual__kb_tree_view">
</member>
<member name="M:Elementor.manual__kb_tree_view.#ctor(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="M:Elementor.manual__kb_tree_view.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.manual__kb_tree_view.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="T:Elementor.manual__kb_category">
</member>
<member name="M:Elementor.manual__kb_category.#ctor(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="M:Elementor.manual__kb_category.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.manual__kb_category.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="T:Elementor.manual__kb_popular_article">
</member>
<member name="M:Elementor.manual__kb_popular_article.#ctor(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="M:Elementor.manual__kb_popular_article.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.manual__kb_popular_article.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="T:Elementor.manual__knowledgebase">
</member>
<member name="M:Elementor.manual__knowledgebase.#ctor(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="M:Elementor.manual__knowledgebase.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.manual__knowledgebase.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="T:Elementor.manual__learnpress_course">
</member>
<member name="M:Elementor.manual__learnpress_course.#ctor(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="M:Elementor.manual__learnpress_course.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.manual__learnpress_course.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="T:Elementor.manual__login_box">
</member>
<member name="M:Elementor.manual__login_box.#ctor(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="M:Elementor.manual__login_box.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.manual__login_box.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="T:Elementor.manual__mega_post_grid">
</member>
<member name="M:Elementor.manual__mega_post_grid.#ctor(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="M:Elementor.manual__mega_post_grid.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.manual__mega_post_grid.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="T:Elementor.manual__message_box">
</member>
<member name="M:Elementor.manual__message_box.#ctor(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="M:Elementor.manual__message_box.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.manual__message_box.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="T:Elementor.manual__monitor_frame">
</member>
<member name="M:Elementor.manual__monitor_frame.#ctor(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="M:Elementor.manual__monitor_frame.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.manual__monitor_frame.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="T:Elementor.manual__portfolio">
</member>
<member name="M:Elementor.manual__portfolio.#ctor(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="M:Elementor.manual__portfolio.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.manual__portfolio.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="T:Elementor.manual__post_type_category_landing">
</member>
<member name="M:Elementor.manual__post_type_category_landing.#ctor(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="M:Elementor.manual__post_type_category_landing.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.manual__post_type_category_landing.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="T:Elementor.manual__postype_count_post">
</member>
<member name="M:Elementor.manual__postype_count_post.#ctor(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="M:Elementor.manual__postype_count_post.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.manual__postype_count_post.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="T:Elementor.manual__pricing_table">
</member>
<member name="M:Elementor.manual__pricing_table.#ctor(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="M:Elementor.manual__pricing_table.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.manual__pricing_table.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="T:Elementor.manual__search_box">
</member>
<member name="M:Elementor.manual__search_box.#ctor(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="M:Elementor.manual__search_box.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.manual__search_box.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="T:Elementor.manual__service_table">
</member>
<member name="M:Elementor.manual__service_table.#ctor(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="M:Elementor.manual__service_table.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.manual__service_table.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="T:Elementor.manual__team_memeber">
</member>
<member name="M:Elementor.manual__team_memeber.#ctor(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="M:Elementor.manual__team_memeber.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.manual__team_memeber.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="T:Elementor.manual__testimonials">
</member>
<member name="M:Elementor.manual__testimonials.#ctor(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="M:Elementor.manual__testimonials.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.manual__testimonials.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="T:Manual__Elementor_Extend_Icons">
</member>
<member name="M:Manual__Elementor_Extend_Icons.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="T:Elementor.Api">
<summary>
Elementor API.
Elementor API handler class is responsible for communicating with Elementor
remote servers retrieving templates data and to send uninstall feedback.
</summary>
</member>
<member name="F:Elementor.Api.LIBRARY_OPTION_KEY">
<summary>
Elementor library option key.
</summary>

</member>
<member name="F:Elementor.Api.FEED_OPTION_KEY">
<summary>
Elementor feed option key.
</summary>

</member>
<member name="T:Elementor.Autoloader">
<summary>
Elementor autoloader.
Elementor autoloader handler class is responsible for loading the different
classes needed to run the plugin.
</summary>
</member>
<member name="T:Elementor.Controls_Stack">
<summary>
Elementor controls stack.
An abstract class that provides the needed properties and methods to
manage and handle controls in the editor panel to inheriting classes.
</summary>
</member>
<member name="F:Elementor.Controls_Stack.id">
<summary>
Generic ID.
Holds the unique ID.
</summary>

</member>
<member name="F:Elementor.Controls_Stack.parsed_dynamic_settings">
<summary>
Parsed Dynamic Settings.
</summary>

</member>
<member name="F:Elementor.Controls_Stack.data">
<summary>
Raw Data.
Holds all the raw data including the element type, the child elements,
the user data.
</summary>

</member>
<member name="F:Elementor.Controls_Stack.config">
<summary>
The configuration.
Holds the configuration used to generate the Elementor editor. It includes
the element name, icon, categories, etc.
</summary>

</member>
<member name="F:Elementor.Controls_Stack.current_section">
<summary>
Current section.
Holds the current section while inserting a set of controls sections.
</summary>

</member>
<member name="F:Elementor.Controls_Stack.current_tab">
<summary>
Current tab.
Holds the current tab while inserting a set of controls tabs.
</summary>

</member>
<member name="F:Elementor.Controls_Stack.current_popover">
<summary>
Current popover.
Holds the current popover while inserting a set of controls.
</summary>

</member>
<member name="F:Elementor.Controls_Stack.injection_point">
<summary>
Injection point.
Holds the injection point in the stack where the control will be inserted.
</summary>

</member>
<member name="F:Elementor.Controls_Stack.settings_sanitized">
<summary>
Data sanitized.
</summary>

</member>
<member name="F:Elementor.Controls_Stack.render_attributes">
<summary>
Element render attributes.
Holds all the render attributes of the element. Used to store data like
the HTML class name and the class value, or HTML element ID name and value.
</summary>

</member>
<member name="F:Elementor.Controls_Stack.RESPONSIVE_DESKTOP">
<summary>
Responsive 'desktop' device name.
</summary>

</member>
<member name="F:Elementor.Controls_Stack.RESPONSIVE_TABLET">
<summary>
Responsive 'tablet' device name.
</summary>

</member>
<member name="F:Elementor.Controls_Stack.RESPONSIVE_MOBILE">
<summary>
Responsive 'mobile' device name.
</summary>

</member>
<member name="T:Elementor.Element_Base">
<summary>
Elementor element base.
An abstract class to register new Elementor elements. It extended the
`Controls_Stack` class to inherit its properties.

This abstract class must be extended in order to register new elements.
</summary>
</member>
<member name="F:Elementor.Element_Base.children">
<summary>
Child elements.
Holds all the child elements of the element.
</summary>

</member>
<member name="F:Elementor.Element_Base.default_args">
<summary>
Element default arguments.
Holds all the default arguments of the element. Used to store additional
data. For example WordPress widgets use this to store widget names.
</summary>

</member>
<member name="F:Elementor.Element_Base.is_type_instance">
<summary>
Is type instance.
Whether the element is an instance of that type or not.
</summary>

</member>
<member name="F:Elementor.Element_Base.depended_scripts">
<summary>
Depended scripts.
Holds all the element depended scripts to enqueue.
</summary>

</member>
<member name="F:Elementor.Element_Base.depended_styles">
<summary>
Depended styles.
Holds all the element depended styles to enqueue.
</summary>

</member>
<member name="T:Elementor.Skin_Base">
<summary>
Elementor skin base.
An abstract class to register new skins for Elementor widgets. Skins allows
you to add new templates, set custom controls and more.

To register new skins for your widget use the `add_skin()` method inside the
widget's `register_skins()` method.
</summary>
</member>
<member name="F:Elementor.Skin_Base.parent">
<summary>
Parent widget.
Holds the parent widget of the skin. Default value is null, no parent widget.
</summary>

</member>
<member name="T:Elementor.Sub_Controls_Stack">
<summary>
Elementor sub controls stack.
An abstract class that can be used to divide a large ControlsStack into small parts.
</summary>
</member>
<member name="T:Elementor.Widget_Base">
<summary>
Elementor widget base.
An abstract class to register new Elementor widgets. It extended the
`Element_Base` class to inherit its properties.

This abstract class must be extended in order to register new widgets.
</summary>
</member>
<member name="F:Elementor.Widget_Base._has_template_content">
<summary>
Whether the widget has content.
Used in cases where the widget has no content. When widgets uses only
skins to display dynamic content generated on the server. For example the
posts widget in Elementor Pro. Default is true, the widget has content
template.
</summary>

</member>
<member name="T:Elementor.Beta_Testers">
<summary>
Elementor beta testers.
Elementor beta testers handler class is responsible for the Beta Testers
feature that allows developers to test Elementor beta versions.
</summary>
</member>
<member name="F:Elementor.Beta_Testers.transient_key">
<summary>
Transient key.
Holds the Elementor beta testers transient key.
</summary>

</member>
<member name="M:Elementor.Beta_Testers.#ctor">
<summary>
Beta testers constructor.
Initializing Elementor beta testers.
</summary>
</member>
<member name="M:Elementor.Beta_Testers.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Beta_Testers.#ctor(Pchp.Core.Context)">
<summary>
Beta testers constructor.
Initializing Elementor beta testers.
</summary>
</member>
<member name="T:Elementor.Compatibility">
<summary>
Elementor compatibility.
Elementor compatibility handler class is responsible for compatibility with
external plugins. The class resolves different issues with non-compatible
plugins.
</summary>
</member>
<member name="T:Elementor.Conditions">
<summary>
Elementor conditions.
Elementor conditions handler class introduce the compare conditions and the
check conditions methods.
</summary>
</member>
<member name="T:Elementor.Control_Animation">
<summary>
Elementor animation control.
A base control for creating entrance animation control. Displays a select box
with the available entrance animation effects @see Control_Animation::get_animations() .
</summary>
</member>
<member name="M:Elementor.Control_Animation.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="T:Elementor.Base_Data_Control">
<summary>
Elementor base data control.
An abstract class for creating new data controls in the panel.
</summary>
</member>
<member name="T:Elementor.Base_Icon_Font">
</member>
<member name="T:Elementor.Control_Base_Multiple">
<summary>
Elementor control base multiple.
An abstract class for creating new controls in the panel that return
more than a single value. Each value of the multi-value control will
be returned as an item in a `key =&gt; value` array.
</summary>
</member>
<member name="T:Elementor.Base_UI_Control">
<summary>
Elementor base UI control.
An abstract class for creating new UI controls in the panel.
</summary>
</member>
<member name="T:Elementor.Control_Base_Units">
<summary>
Elementor control base units.
An abstract class for creating new unit controls in the panel.
</summary>
</member>
<member name="T:Elementor.Base_Control">
<summary>
Elementor base control.
An abstract class for creating new controls in the panel.
</summary>
</member>
<member name="F:Elementor.Base_Control._base_settings">
<summary>
Base settings.
Holds all the base settings of the control.
</summary>

</member>
<member name="T:Elementor.Control_Box_Shadow">
<summary>
Elementor box shadow control.
A base control for creating box shadows control. Displays input fields for
horizontal shadow, vertical shadow, shadow blur, shadow spread and shadow
color.
</summary>
</member>
<member name="M:Elementor.Control_Box_Shadow.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="T:Elementor.Control_Button">
<summary>
Elementor button control.
A base control for creating a button control. Displays a button that can
trigger an event.
</summary>
</member>
<member name="M:Elementor.Control_Button.#ctor">
<summary>
Control base constructor.
Initializing the control base class.
</summary>
</member>
<member name="M:Elementor.Control_Button.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Control_Button.#ctor(Pchp.Core.Context)">
<summary>
Control base constructor.
Initializing the control base class.
</summary>
</member>
<member name="T:Elementor.Control_Choose">
<summary>
Elementor choose control.
A base control for creating choose control. Displays radio buttons styled as
groups of buttons with icons for each option.
</summary>
</member>
<member name="M:Elementor.Control_Choose.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="T:Elementor.Control_Code">
<summary>
Elementor code control.
A base control for creating code control. Displays a code editor textarea.
Based on Ace editor (@see https://ace.c9.io/).
</summary>
</member>
<member name="M:Elementor.Control_Code.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="T:Elementor.Control_Color">
<summary>
Elementor color control.
A base control for creating color control. Displays a color picker field with
an alpha slider. Includes a customizable color palette that can be preset by
the user. Accepts a `scheme` argument that allows you to set a value from the
active color scheme as the default value returned by the control.
</summary>
</member>
<member name="M:Elementor.Control_Color.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="T:Elementor.Control_Date_Time">
<summary>
Elementor date/time control.
A base control for creating date time control. Displays a date/time picker
based on the Flatpickr library @see https://chmln.github.io/flatpickr/ .
</summary>
</member>
<member name="M:Elementor.Control_Date_Time.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="T:Elementor.Control_Deprecated_Notice">
<summary>
Elementor Deprecated Notice control.
A base control specific for creating Deprecation Notices control.
Displays a warning notice in the panel.
</summary>
</member>
<member name="M:Elementor.Control_Deprecated_Notice.#ctor">
<summary>
Control base constructor.
Initializing the control base class.
</summary>
</member>
<member name="M:Elementor.Control_Deprecated_Notice.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Control_Deprecated_Notice.#ctor(Pchp.Core.Context)">
<summary>
Control base constructor.
Initializing the control base class.
</summary>
</member>
<member name="T:Elementor.Control_Dimensions">
<summary>
Elementor dimension control.
A base control for creating dimension control. Displays input fields for top,
right, bottom, left and the option to link them together.
</summary>
</member>
<member name="M:Elementor.Control_Dimensions.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="T:Elementor.Control_Divider">
<summary>
Elementor divider control.
A base control for creating divider control. Displays horizontal line in
the panel.
</summary>
</member>
<member name="M:Elementor.Control_Divider.#ctor">
<summary>
Control base constructor.
Initializing the control base class.
</summary>
</member>
<member name="M:Elementor.Control_Divider.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Control_Divider.#ctor(Pchp.Core.Context)">
<summary>
Control base constructor.
Initializing the control base class.
</summary>
</member>
<member name="T:Elementor.Control_Exit_Animation">
<summary>
Elementor exit animation control.
A control for creating exit animation. Displays a select box
with the available exit animation effects @see Control_Exit_Animation::get_animations() .
</summary>
</member>
<member name="M:Elementor.Control_Exit_Animation.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="T:Elementor.Control_Font">
<summary>
Elementor font control.
A base control for creating font control. Displays font select box. The
control allows you to set a list of fonts.
</summary>
</member>
<member name="M:Elementor.Control_Font.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="T:Elementor.Control_Gallery">
<summary>
Elementor gallery control.
A base control for creating gallery chooser control. Based on the WordPress
media library galleries. Used to select images from the WordPress media library.
</summary>
</member>
<member name="M:Elementor.Control_Gallery.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="T:Elementor.Group_Control_Background">
<summary>
Elementor background control.
A base control for creating background control. Displays input fields to define
the background color, background image, background gradient or background video.
</summary>
</member>
<member name="T:Elementor.Group_Control_Base">
<summary>
Elementor group control base.
An abstract class for creating new group controls in the panel.
</summary>
</member>
<member name="F:Elementor.Group_Control_Base.args">
<summary>
Arguments.
Holds all the group control arguments.
</summary>

</member>
<member name="F:Elementor.Group_Control_Base.options">
<summary>
Options.
Holds all the group control options.

Currently supports only the popover options.
</summary>

</member>
<member name="T:Elementor.Group_Control_Border">
<summary>
Elementor border control.
A base control for creating border control. Displays input fields to define
border type, border width and border color.
</summary>
</member>
<member name="T:Elementor.Group_Control_Box_Shadow">
<summary>
Elementor box shadow control.
A base control for creating box shadow control. Displays input fields to define
the box shadow including the horizontal shadow, vertical shadow, shadow blur,
shadow spread, shadow color and the position.
</summary>
</member>
<member name="T:Elementor.Group_Control_Css_Filter">
<summary>
Elementor CSS Filter control.
A base control for applying css filters. Displays sliders to define the
values of different CSS filters including blur, brightens, contrast,
saturation and hue.
</summary>
</member>
<member name="T:Elementor.Group_Control_Image_Size">
<summary>
Elementor image size control.
A base control for creating image size control. Displays input fields to define
one of the default image sizes (thumbnail, medium, medium_large, large) or custom
image dimensions.
</summary>
</member>
<member name="T:Elementor.Group_Control_Text_Shadow">
<summary>
Elementor text shadow control.
A base control for creating text shadow control. Displays input fields to define
the text shadow including the horizontal shadow, vertical shadow, shadow blur and
shadow color.
</summary>
</member>
<member name="T:Elementor.Group_Control_Typography">
<summary>
Elementor typography control.
A base control for creating typography control. Displays input fields to define
the content typography including font size, font family, font weight, text
transform, font style, line height and letter spacing.
</summary>
</member>
<member name="T:Elementor.Control_Heading">
<summary>
Elementor heading control.
A base control for creating heading control. Displays a text heading between
controls in the panel.
</summary>
</member>
<member name="M:Elementor.Control_Heading.#ctor">
<summary>
Control base constructor.
Initializing the control base class.
</summary>
</member>
<member name="M:Elementor.Control_Heading.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Control_Heading.#ctor(Pchp.Core.Context)">
<summary>
Control base constructor.
Initializing the control base class.
</summary>
</member>
<member name="T:Elementor.Control_Hidden">
<summary>
Elementor hidden control.
A base control for creating hidden control. Used to save additional data in
the database without a visual presentation in the panel.
</summary>
</member>
<member name="M:Elementor.Control_Hidden.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="T:Elementor.Control_Hover_Animation">
<summary>
Elementor hover animation control.
A base control for creating hover animation control. Displays a select box
with the available hover animation effects @see Control_Hover_Animation::get_animations()
</summary>
</member>
<member name="M:Elementor.Control_Hover_Animation.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="T:Elementor.Control_Icon">
<summary>
Elementor icon control.
A base control for creating an icon control. Displays a font icon select box
field. The control accepts `include` or `exclude` arguments to set a partial
list of icons.
</summary>
</member>
<member name="M:Elementor.Control_Icon.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="T:Elementor.Control_Icons">
<summary>
Elementor Icons control.
A base control for creating a Icons chooser control.
Used to select an Icon.

Usage: @see https://developers.elementor.com/elementor-controls/icons-control
</summary>
</member>
<member name="M:Elementor.Control_Icons.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="T:Elementor.Control_Image_Dimensions">
<summary>
Elementor image dimensions control.
A base control for creating image dimension control. Displays image width
input, image height input and an apply button.
</summary>
</member>
<member name="M:Elementor.Control_Image_Dimensions.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="T:Elementor.Control_Media">
<summary>
Elementor media control.
A base control for creating a media chooser control. Based on the WordPress
media library. Used to select an image from the WordPress media library.
</summary>
</member>
<member name="M:Elementor.Control_Media.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="T:Elementor.Control_Number">
<summary>
Elementor number control.
A base control for creating a number control. Displays a simple number input.
</summary>
</member>
<member name="M:Elementor.Control_Number.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="T:Elementor.Control_Popover_Toggle">
<summary>
Elementor popover toggle control.
A base control for creating a popover toggle control. By default displays a toggle
button to open and close a popover.
</summary>
</member>
<member name="M:Elementor.Control_Popover_Toggle.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="T:Elementor.Control_Raw_Html">
<summary>
Elementor raw HTML control.
A base control for creating raw HTML control. Displays HTML markup between
controls in the panel.
</summary>
</member>
<member name="M:Elementor.Control_Raw_Html.#ctor">
<summary>
Control base constructor.
Initializing the control base class.
</summary>
</member>
<member name="M:Elementor.Control_Raw_Html.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Control_Raw_Html.#ctor(Pchp.Core.Context)">
<summary>
Control base constructor.
Initializing the control base class.
</summary>
</member>
<member name="T:Elementor.Control_Repeater">
<summary>
Elementor repeater control.
A base control for creating repeater control. Repeater control allows you to
build repeatable blocks of fields. You can create, for example, a set of
fields that will contain a title and a WYSIWYG text - the user will then be
able to add "rows", and each row will contain a title and a text. The data
can be wrapper in custom HTML tags, designed using CSS, and interact using JS
or external libraries.
</summary>
</member>
<member name="M:Elementor.Control_Repeater.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="T:Elementor.Control_Section">
<summary>
Elementor section control.
A base control for creating section control. Displays a header that
functions as a toggle to show or hide a set of controls.

Note: Do not use it directly, instead use `$widget-&gt;start_controls_section()`
and `$widget-&gt;end_controls_section()` to wrap a set of controls.
</summary>
</member>
<member name="M:Elementor.Control_Section.#ctor">
<summary>
Control base constructor.
Initializing the control base class.
</summary>
</member>
<member name="M:Elementor.Control_Section.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Control_Section.#ctor(Pchp.Core.Context)">
<summary>
Control base constructor.
Initializing the control base class.
</summary>
</member>
<member name="T:Elementor.Control_Select">
<summary>
Elementor select control.
A base control for creating select control. Displays a simple select box.
It accepts an array in which the `key` is the option value and the `value` is
the option name.
</summary>
</member>
<member name="M:Elementor.Control_Select.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="T:Elementor.Control_Select2">
<summary>
Elementor select2 control.
A base control for creating select2 control. Displays a select box control
based on select2 jQuery plugin @see https://select2.github.io/ .
It accepts an array in which the `key` is the value and the `value` is the
option name. Set `multiple` to `true` to allow multiple value selection.
</summary>
</member>
<member name="M:Elementor.Control_Select2.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="T:Elementor.Control_Slider">
<summary>
Elementor slider control.
A base control for creating slider control. Displays a draggable range slider.
The slider control can optionally have a number of unit types (`size_units`)
for the user to choose from. The control also accepts a range argument that
allows you to set the `min`, `max` and `step` values per unit type.
</summary>
</member>
<member name="M:Elementor.Control_Slider.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="T:Elementor.Control_Structure">
<summary>
Elementor structure control.
A base control for creating structure control. A private control for section
columns structure.
</summary>
</member>
<member name="M:Elementor.Control_Structure.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="T:Elementor.Control_Switcher">
<summary>
Elementor switcher control.
A base control for creating switcher control. Displays an on/off switcher,
basically a fancy UI representation of a checkbox.
</summary>
</member>
<member name="M:Elementor.Control_Switcher.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="T:Elementor.Control_Tab">
<summary>
Elementor tab control.
A base control for creating tab control. Displays a tab header for a set of
controls.

Note: Do not use it directly, instead use: `$widget-&gt;start_controls_tab()`
and in the end `$widget-&gt;end_controls_tab()`.
</summary>
</member>
<member name="M:Elementor.Control_Tab.#ctor">
<summary>
Control base constructor.
Initializing the control base class.
</summary>
</member>
<member name="M:Elementor.Control_Tab.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Control_Tab.#ctor(Pchp.Core.Context)">
<summary>
Control base constructor.
Initializing the control base class.
</summary>
</member>
<member name="T:Elementor.Control_Tabs">
<summary>
Elementor tabs control.
A base control for creating tabs control. Displays a tabs header for `tab`
controls.

Note: Do not use it directly, instead use: `$widget-&gt;start_controls_tabs()`
and in the end `$widget-&gt;end_controls_tabs()`.
</summary>
</member>
<member name="M:Elementor.Control_Tabs.#ctor">
<summary>
Control base constructor.
Initializing the control base class.
</summary>
</member>
<member name="M:Elementor.Control_Tabs.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Control_Tabs.#ctor(Pchp.Core.Context)">
<summary>
Control base constructor.
Initializing the control base class.
</summary>
</member>
<member name="T:Elementor.Control_Text_Shadow">
<summary>
Elementor text shadow control.
A base control for creating text shadows control. Displays input fields for
horizontal shadow, vertical shadow, shadow blur and shadow color.
</summary>
</member>
<member name="M:Elementor.Control_Text_Shadow.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="T:Elementor.Control_Text">
<summary>
Elementor text control.
A base control for creating text control. Displays a simple text input.
</summary>
</member>
<member name="M:Elementor.Control_Text.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="T:Elementor.Control_Textarea">
<summary>
Elementor textarea control.
A base control for creating textarea control. Displays a classic textarea.
</summary>
</member>
<member name="M:Elementor.Control_Textarea.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="T:Elementor.Control_URL">
<summary>
Elementor URL control.
A base control for creating url control. Displays a URL input with the
ability to set the target of the link to `_blank` to open in a new tab.
</summary>
</member>
<member name="M:Elementor.Control_URL.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="T:Elementor.Control_WP_Widget">
<summary>
Elementor WordPress widget control.
A base control for creating WordPress widget control. Displays native
WordPress widgets. This a private control for internal use.
</summary>
</member>
<member name="M:Elementor.Control_WP_Widget.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="T:Elementor.Control_Wysiwyg">
<summary>
Elementor WYSIWYG control.
A base control for creating WYSIWYG control. Displays a WordPress WYSIWYG
(TinyMCE) editor.
</summary>
</member>
<member name="M:Elementor.Control_Wysiwyg.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="T:Elementor.DB">
<summary>
Elementor database.
Elementor database handler class is responsible for communicating with the
DB, save and retrieve Elementor data and meta data.
</summary>
</member>
<member name="F:Elementor.DB.switched_post_data">
<summary>
Switched post data.
Holds the switched post data.
</summary>

</member>
<member name="F:Elementor.DB.switched_data">
<summary>
Switched data.
Holds the switched data.
</summary>

</member>
<member name="F:Elementor.DB.DB_VERSION">
<summary>
Current DB version of the editor.
</summary>

</member>
<member name="F:Elementor.DB.STATUS_PUBLISH">
<summary>
Post publish status.
</summary>

</member>
<member name="F:Elementor.DB.STATUS_DRAFT">
<summary>
Post draft status.
</summary>

</member>
<member name="F:Elementor.DB.STATUS_PRIVATE">
<summary>
Post private status.
</summary>

</member>
<member name="F:Elementor.DB.STATUS_AUTOSAVE">
<summary>
Post autosave status.
</summary>

</member>
<member name="F:Elementor.DB.STATUS_PENDING">
<summary>
Post pending status.
</summary>

</member>
<member name="T:Elementor.Element_Column">
<summary>
Elementor column element.
Elementor column handler class is responsible for initializing the column
element.
</summary>
</member>
<member name="M:Elementor.Element_Column.#ctor(Pchp.Core.PhpArray,Pchp.Core.PhpValue)">
<summary>
Element base constructor.
Initializing the element base class using `$data` and `$args`.

The `$data` parameter is required for a normal instance because of the
way Elementor renders data when initializing elements.
</summary>
<param name="data" type="array">Optional. Element data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Element default arguments. Default is null.</param>
</member>
<member name="M:Elementor.Element_Column.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Element_Column.#ctor(Pchp.Core.Context,Pchp.Core.PhpArray,Pchp.Core.PhpValue)">
<summary>
Element base constructor.
Initializing the element base class using `$data` and `$args`.

The `$data` parameter is required for a normal instance because of the
way Elementor renders data when initializing elements.
</summary>
<param name="data" type="array">Optional. Element data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Element default arguments. Default is null.</param>
</member>
<member name="T:Elementor.Repeater">
<summary>
Elementor repeater element.
Elementor repeater handler class is responsible for initializing the repeater.
</summary>
</member>
<member name="M:Elementor.Repeater.#ctor(Pchp.Core.PhpArray,Pchp.Core.PhpValue)">
<summary>
Repeater constructor.
Initializing Elementor repeater element.
</summary>
<param name="data" type="array">Optional. Element data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Element default arguments. Default is null.</param>
</member>
<member name="M:Elementor.Repeater.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Repeater.#ctor(Pchp.Core.Context,Pchp.Core.PhpArray,Pchp.Core.PhpValue)">
<summary>
Repeater constructor.
Initializing Elementor repeater element.
</summary>
<param name="data" type="array">Optional. Element data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Element default arguments. Default is null.</param>
</member>
<member name="T:Elementor.Element_Section">
<summary>
Elementor section element.
Elementor section handler class is responsible for initializing the section
element.
</summary>
</member>
<member name="M:Elementor.Element_Section.#ctor(Pchp.Core.PhpArray,Pchp.Core.PhpValue)">
<summary>
Element base constructor.
Initializing the element base class using `$data` and `$args`.

The `$data` parameter is required for a normal instance because of the
way Elementor renders data when initializing elements.
</summary>
<param name="data" type="array">Optional. Element data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Element default arguments. Default is null.</param>
</member>
<member name="M:Elementor.Element_Section.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Element_Section.#ctor(Pchp.Core.Context,Pchp.Core.PhpArray,Pchp.Core.PhpValue)">
<summary>
Element base constructor.
Initializing the element base class using `$data` and `$args`.

The `$data` parameter is required for a normal instance because of the
way Elementor renders data when initializing elements.
</summary>
<param name="data" type="array">Optional. Element data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Element default arguments. Default is null.</param>
</member>
<member name="T:Elementor.Embed">
<summary>
Elementor embed.
Elementor embed handler class is responsible for Elementor embed functionality.
The class holds the supported providers with their embed patters, and handles
their custom properties to create custom HTML with the embeded content.
</summary>
</member>
<member name="T:Elementor.Fonts">
<summary>
Elementor fonts.
Elementor fonts handler class is responsible for registering the supported
fonts used by Elementor.
</summary>
</member>
<member name="F:Elementor.Fonts.SYSTEM">
<summary>
The system font name.
</summary>

</member>
<member name="F:Elementor.Fonts.GOOGLE">
<summary>
The google font name.
</summary>

</member>
<member name="F:Elementor.Fonts.EARLYACCESS">
<summary>
The google early access font name.
</summary>

</member>
<member name="F:Elementor.Fonts.LOCAL">
<summary>
The local font name.
</summary>

</member>
<member name="T:Elementor.Frontend">
<summary>
Elementor frontend.
Elementor frontend handler class is responsible for initializing Elementor in
the frontend.
</summary>
</member>
<member name="F:Elementor.Frontend.post_id">
<summary>
Post ID.
Holds the ID of the current post.
</summary>

</member>
<member name="F:Elementor.Frontend.fonts_to_enqueue">
<summary>
Fonts to enqueue
Holds the list of fonts that are being used in the current page.
</summary>

</member>
<member name="F:Elementor.Frontend.render_mode_manager">
<summary>
Holds the class that respond to manage the render mode.
</summary>

</member>
<member name="F:Elementor.Frontend.registered_fonts">
<summary>
Registered fonts.
Holds the list of enqueued fonts in the current page.
</summary>

</member>
<member name="F:Elementor.Frontend.icon_fonts_to_enqueue">
<summary>
Icon Fonts to enqueue
Holds the list of Icon fonts that are being used in the current page.
</summary>

</member>
<member name="F:Elementor.Frontend.enqueued_icon_fonts">
<summary>
Enqueue Icon Fonts
Holds the list of Icon fonts already enqueued  in the current page.
</summary>

</member>
<member name="F:Elementor.Frontend._has_elementor_in_page">
<summary>
Whether the page is using Elementor.
Used to determine whether the current page is using Elementor.
</summary>

</member>
<member name="F:Elementor.Frontend._is_excerpt">
<summary>
Whether the excerpt is being called.
Used to determine whether the call to `the_content()` came from `get_the_excerpt()`.
</summary>

</member>
<member name="F:Elementor.Frontend.content_removed_filters">
<summary>
Filters removed from the content.
Hold the list of filters removed from `the_content()`. Used to hold the filters that
conflicted with Elementor while Elementor process the content.
</summary>

</member>
<member name="F:Elementor.Frontend.THE_CONTENT_FILTER_PRIORITY">
<summary>
The priority of the content filter.
</summary>

</member>
<member name="M:Elementor.Frontend.#ctor">
<summary>
Front End constructor.
Initializing Elementor front end. Make sure we are not in admin, not and
redirect from old URL structure of Elementor editor.
</summary>
</member>
<member name="M:Elementor.Frontend.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Frontend.#ctor(Pchp.Core.Context)">
<summary>
Front End constructor.
Initializing Elementor front end. Make sure we are not in admin, not and
redirect from old URL structure of Elementor editor.
</summary>
</member>
<member name="T:Elementor.Heartbeat">
<summary>
Elementor heartbeat.
Elementor heartbeat handler class is responsible for initializing Elementor
heartbeat. The class communicates with WordPress Heartbeat API while working
with Elementor.
</summary>
</member>
<member name="M:Elementor.Heartbeat.#ctor">
<summary>
Heartbeat constructor.
Initializing Elementor heartbeat.
</summary>
</member>
<member name="M:Elementor.Heartbeat.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Heartbeat.#ctor(Pchp.Core.Context)">
<summary>
Heartbeat constructor.
Initializing Elementor heartbeat.
</summary>
</member>
<member name="T:Elementor.Group_Control_Interface">
<summary>
Group control interface.
An interface for Elementor group control.
</summary>
</member>
<member name="T:BFI_Class_Factory?">
</member>
<member name="T:BFI_Image_Editor_Imagick_1_3?">
</member>
<member name="T:BFI_Image_Editor_GD_1_3?">
</member>
<member name="T:BFI_Thumb_1_3?">
</member>
<member name="T:WP_Async_Request?">
</member>
<member name="T:WP_Background_Process?">
</member>
<member name="T:Elementor.Maintenance_Mode">
<summary>
Elementor maintenance mode.
Elementor maintenance mode handler class is responsible for the Elementor
"Maintenance Mode" and the "Coming Soon" features.
</summary>
</member>
<member name="F:Elementor.Maintenance_Mode.OPTION_PREFIX">
<summary>
The options prefix.
</summary>

</member>
<member name="F:Elementor.Maintenance_Mode.MODE_MAINTENANCE">
<summary>
The maintenance mode.
</summary>

</member>
<member name="F:Elementor.Maintenance_Mode.MODE_COMING_SOON">
<summary>
The coming soon mode.
</summary>

</member>
<member name="M:Elementor.Maintenance_Mode.#ctor">
<summary>
Maintenance mode constructor.
Initializing Elementor maintenance mode.
</summary>
</member>
<member name="M:Elementor.Maintenance_Mode.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Maintenance_Mode.#ctor(Pchp.Core.Context)">
<summary>
Maintenance mode constructor.
Initializing Elementor maintenance mode.
</summary>
</member>
<member name="T:Elementor.Maintenance">
<summary>
Elementor maintenance.
Elementor maintenance handler class is responsible for setting up Elementor
activation and uninstallation hooks.
</summary>
</member>
<member name="T:Elementor.Controls_Manager">
<summary>
Elementor controls manager.
Elementor controls manager handler class is responsible for registering and
initializing all the supported controls, both regular controls and the group
controls.
</summary>
</member>
<member name="F:Elementor.Controls_Manager.controls">
<summary>
Controls.
Holds the list of all the controls. Default is `null`.
</summary>

</member>
<member name="F:Elementor.Controls_Manager.control_groups">
<summary>
Control groups.
Holds the list of all the control groups. Default is an empty array.
</summary>

</member>
<member name="F:Elementor.Controls_Manager.stacks">
<summary>
Control stacks.
Holds the list of all the control stacks. Default is an empty array.
</summary>

</member>
<member name="F:Elementor.Controls_Manager.TAB_CONTENT">
<summary>
Content tab.
</summary>

</member>
<member name="F:Elementor.Controls_Manager.TAB_STYLE">
<summary>
Style tab.
</summary>

</member>
<member name="F:Elementor.Controls_Manager.TAB_ADVANCED">
<summary>
Advanced tab.
</summary>

</member>
<member name="F:Elementor.Controls_Manager.TAB_RESPONSIVE">
<summary>
Responsive tab.
</summary>

</member>
<member name="F:Elementor.Controls_Manager.TAB_LAYOUT">
<summary>
Layout tab.
</summary>

</member>
<member name="F:Elementor.Controls_Manager.TAB_SETTINGS">
<summary>
Settings tab.
</summary>

</member>
<member name="F:Elementor.Controls_Manager.TEXT">
<summary>
Text control.
</summary>

</member>
<member name="F:Elementor.Controls_Manager.NUMBER">
<summary>
Number control.
</summary>

</member>
<member name="F:Elementor.Controls_Manager.TEXTAREA">
<summary>
Textarea control.
</summary>

</member>
<member name="F:Elementor.Controls_Manager.SELECT">
<summary>
Select control.
</summary>

</member>
<member name="F:Elementor.Controls_Manager.SWITCHER">
<summary>
Switcher control.
</summary>

</member>
<member name="F:Elementor.Controls_Manager.BUTTON">
<summary>
Button control.
</summary>

</member>
<member name="F:Elementor.Controls_Manager.HIDDEN">
<summary>
Hidden control.
</summary>

</member>
<member name="F:Elementor.Controls_Manager.HEADING">
<summary>
Heading control.
</summary>

</member>
<member name="F:Elementor.Controls_Manager.RAW_HTML">
<summary>
Raw HTML control.
</summary>

</member>
<member name="F:Elementor.Controls_Manager.DEPRECATED_NOTICE">
<summary>
Deprecated Notice control.
</summary>

</member>
<member name="F:Elementor.Controls_Manager.POPOVER_TOGGLE">
<summary>
Popover Toggle control.
</summary>

</member>
<member name="F:Elementor.Controls_Manager.SECTION">
<summary>
Section control.
</summary>

</member>
<member name="F:Elementor.Controls_Manager.TAB">
<summary>
Tab control.
</summary>

</member>
<member name="F:Elementor.Controls_Manager.TABS">
<summary>
Tabs control.
</summary>

</member>
<member name="F:Elementor.Controls_Manager.DIVIDER">
<summary>
Divider control.
</summary>

</member>
<member name="F:Elementor.Controls_Manager.COLOR">
<summary>
Color control.
</summary>

</member>
<member name="F:Elementor.Controls_Manager.MEDIA">
<summary>
Media control.
</summary>

</member>
<member name="F:Elementor.Controls_Manager.SLIDER">
<summary>
Slider control.
</summary>

</member>
<member name="F:Elementor.Controls_Manager.DIMENSIONS">
<summary>
Dimensions control.
</summary>

</member>
<member name="F:Elementor.Controls_Manager.CHOOSE">
<summary>
Choose control.
</summary>

</member>
<member name="F:Elementor.Controls_Manager.WYSIWYG">
<summary>
WYSIWYG control.
</summary>

</member>
<member name="F:Elementor.Controls_Manager.CODE">
<summary>
Code control.
</summary>

</member>
<member name="F:Elementor.Controls_Manager.FONT">
<summary>
Font control.
</summary>

</member>
<member name="F:Elementor.Controls_Manager.IMAGE_DIMENSIONS">
<summary>
Image dimensions control.
</summary>

</member>
<member name="F:Elementor.Controls_Manager.WP_WIDGET">
<summary>
WordPress widget control.
</summary>

</member>
<member name="F:Elementor.Controls_Manager.URL">
<summary>
URL control.
</summary>

</member>
<member name="F:Elementor.Controls_Manager.REPEATER">
<summary>
Repeater control.
</summary>

</member>
<member name="F:Elementor.Controls_Manager.ICON">
<summary>
Icon control.
</summary>

</member>
<member name="F:Elementor.Controls_Manager.ICONS">
<summary>
Icons control.
</summary>

</member>
<member name="F:Elementor.Controls_Manager.GALLERY">
<summary>
Gallery control.
</summary>

</member>
<member name="F:Elementor.Controls_Manager.STRUCTURE">
<summary>
Structure control.
</summary>

</member>
<member name="F:Elementor.Controls_Manager.SELECT2">
<summary>
Select2 control.
</summary>

</member>
<member name="F:Elementor.Controls_Manager.DATE_TIME">
<summary>
Date/Time control.
</summary>

</member>
<member name="F:Elementor.Controls_Manager.BOX_SHADOW">
<summary>
Box shadow control.
</summary>

</member>
<member name="F:Elementor.Controls_Manager.TEXT_SHADOW">
<summary>
Text shadow control.
</summary>

</member>
<member name="F:Elementor.Controls_Manager.ANIMATION">
<summary>
Entrance animation control.
</summary>

</member>
<member name="F:Elementor.Controls_Manager.HOVER_ANIMATION">
<summary>
Hover animation control.
</summary>

</member>
<member name="F:Elementor.Controls_Manager.EXIT_ANIMATION">
<summary>
Exit animation control.
</summary>

</member>
<member name="T:Elementor.Elements_Manager">
<summary>
Elementor elements manager.
Elementor elements manager handler class is responsible for registering and
initializing all the supported elements.
</summary>
</member>
<member name="F:Elementor.Elements_Manager._element_types">
<summary>
Element types.
Holds the list of all the element types.
</summary>

</member>
<member name="F:Elementor.Elements_Manager.categories">
<summary>
Element categories.
Holds the list of all the element categories.
</summary>

</member>
<member name="M:Elementor.Elements_Manager.#ctor">
<summary>
Elements constructor.
Initializing Elementor elements manager.
</summary>
</member>
<member name="M:Elementor.Elements_Manager.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Elements_Manager.#ctor(Pchp.Core.Context)">
<summary>
Elements constructor.
Initializing Elementor elements manager.
</summary>
</member>
<member name="T:Elementor.Icons_Manager">
<summary>
Elementor icons manager.
Elementor icons manager handler class
</summary>
</member>
<member name="M:Elementor.Icons_Manager.#ctor">
<summary>
Icons Manager constructor
</summary>
</member>
<member name="M:Elementor.Icons_Manager.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Icons_Manager.#ctor(Pchp.Core.Context)">
<summary>
Icons Manager constructor
</summary>
</member>
<member name="T:Elementor.Images_Manager">
<summary>
Elementor images manager.
Elementor images manager handler class is responsible for retrieving image
details.
</summary>
</member>
<member name="M:Elementor.Images_Manager.#ctor">
<summary>
Images manager constructor.
Initializing Elementor images manager.
</summary>
</member>
<member name="M:Elementor.Images_Manager.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Images_Manager.#ctor(Pchp.Core.Context)">
<summary>
Images manager constructor.
Initializing Elementor images manager.
</summary>
</member>
<member name="T:Elementor.Skins_Manager">
<summary>
Elementor skins manager.
Elementor skins manager handler class is responsible for registering and
initializing all the supported skins.
</summary>
</member>
<member name="F:Elementor.Skins_Manager._skins">
<summary>
Registered Skins.
Holds the list of all the registered skins for all the widgets.
</summary>

</member>
<member name="M:Elementor.Skins_Manager.#ctor">
<summary>
Skins manager constructor.
Initializing Elementor skins manager by requiring the skin base class.
</summary>
</member>
<member name="M:Elementor.Skins_Manager.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Skins_Manager.#ctor(Pchp.Core.Context)">
<summary>
Skins manager constructor.
Initializing Elementor skins manager by requiring the skin base class.
</summary>
</member>
<member name="T:Elementor.Widgets_Manager">
<summary>
Elementor widgets manager.
Elementor widgets manager handler class is responsible for registering and
initializing all the supported Elementor widgets.
</summary>
</member>
<member name="F:Elementor.Widgets_Manager._widget_types">
<summary>
Widget types.
Holds the list of all the widget types.
</summary>

</member>
<member name="M:Elementor.Widgets_Manager.#ctor">
<summary>
Widgets manager constructor.
Initializing Elementor widgets manager.
</summary>
</member>
<member name="M:Elementor.Widgets_Manager.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Widgets_Manager.#ctor(Pchp.Core.Context)">
<summary>
Widgets manager constructor.
Initializing Elementor widgets manager.
</summary>
</member>
<member name="T:Elementor.WordPress_Widgets_Manager">
<summary>
Elementor WordPress widgets manager.
Elementor WordPress widgets manager handler class is responsible for
registering and initializing all the supported controls, both regular
controls and the group controls.
</summary>
</member>
<member name="M:Elementor.WordPress_Widgets_Manager.#ctor">
<summary>
WordPress widgets manager constructor.
Initializing the WordPress widgets manager in Elementor editor.
</summary>
</member>
<member name="M:Elementor.WordPress_Widgets_Manager.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.WordPress_Widgets_Manager.#ctor(Pchp.Core.Context)">
<summary>
WordPress widgets manager constructor.
Initializing the WordPress widgets manager in Elementor editor.
</summary>
</member>
<member name="T:Elementor.Plugin">
<summary>
Elementor plugin.
The main plugin handler class is responsible for initializing Elementor. The
class registers and all the components required to run the plugin.
</summary>
</member>
<member name="F:Elementor.Plugin.db">
<summary>
Database.
Holds the plugin database handler which is responsible for communicating
with the database.
</summary>

</member>
<member name="F:Elementor.Plugin.ajax">
<summary>
Ajax Manager.
Holds the plugin ajax handlers which are responsible for ajax requests
and responses.
</summary>

</member>
<member name="F:Elementor.Plugin.controls_manager">
<summary>
Controls manager.
Holds the plugin controls manager handler is responsible for registering
and initializing controls.
</summary>

</member>
<member name="F:Elementor.Plugin.documents">
<summary>
Documents manager.
Holds the documents manager.
</summary>

</member>
<member name="F:Elementor.Plugin.schemes_manager">
<summary>
Schemes manager.
Holds the plugin schemes manager.
</summary>

</member>
<member name="F:Elementor.Plugin.elements_manager">
<summary>
Elements manager.
Holds the plugin elements manager.
</summary>

</member>
<member name="F:Elementor.Plugin.widgets_manager">
<summary>
Widgets manager.
Holds the plugin widgets manager which is responsible for registering and
initializing widgets.
</summary>

</member>
<member name="F:Elementor.Plugin.revisions_manager">
<summary>
Revisions manager.
Holds the plugin revisions manager which handles history and revisions
functionality.
</summary>

</member>
<member name="F:Elementor.Plugin.images_manager">
<summary>
Images manager.
Holds the plugin images manager which is responsible for retrieving image
details.
</summary>

</member>
<member name="F:Elementor.Plugin.maintenance_mode">
<summary>
Maintenance mode.
Holds the maintenance mode manager responsible for the "Maintenance Mode"
and the "Coming Soon" features.
</summary>

</member>
<member name="F:Elementor.Plugin.page_settings_manager">
<summary>
Page settings manager.
Holds the page settings manager.
</summary>

</member>
<member name="F:Elementor.Plugin.dynamic_tags">
<summary>
Dynamic tags manager.
Holds the dynamic tags manager.
</summary>

</member>
<member name="F:Elementor.Plugin.settings">
<summary>
Settings.
Holds the plugin settings.
</summary>

</member>
<member name="F:Elementor.Plugin.role_manager">
<summary>
Role Manager.
Holds the plugin role manager.
</summary>

</member>
<member name="F:Elementor.Plugin.admin">
<summary>
Admin.
Holds the plugin admin.
</summary>

</member>
<member name="F:Elementor.Plugin.tools">
<summary>
Tools.
Holds the plugin tools.
</summary>

</member>
<member name="F:Elementor.Plugin.preview">
<summary>
Preview.
Holds the plugin preview.
</summary>

</member>
<member name="F:Elementor.Plugin.editor">
<summary>
Editor.
Holds the plugin editor.
</summary>

</member>
<member name="F:Elementor.Plugin.frontend">
<summary>
Frontend.
Holds the plugin frontend.
</summary>

</member>
<member name="F:Elementor.Plugin.heartbeat">
<summary>
Heartbeat.
Holds the plugin heartbeat.
</summary>

</member>
<member name="F:Elementor.Plugin.system_info">
<summary>
System info.
Holds the system info data.
</summary>

</member>
<member name="F:Elementor.Plugin.templates_manager">
<summary>
Template library manager.
Holds the template library manager.
</summary>

</member>
<member name="F:Elementor.Plugin.skins_manager">
<summary>
Skins manager.
Holds the skins manager.
</summary>

</member>
<member name="F:Elementor.Plugin.files_manager">
<summary>
Files manager.
Holds the plugin files manager.
</summary>

</member>
<member name="F:Elementor.Plugin.assets_manager">
<summary>
Assets manager.
Holds the plugin assets manager.
</summary>

</member>
<member name="F:Elementor.Plugin.icons_manager">
<summary>
Icons Manager.
Holds the plugin icons manager.
</summary>

</member>
<member name="F:Elementor.Plugin.posts_css_manager">
<summary>
Files Manager.
Holds the plugin files manager.
</summary>

</member>
<member name="F:Elementor.Plugin.wordpress_widgets_manager">
<summary>
WordPress widgets manager.
Holds the WordPress widgets manager.
</summary>

</member>
<member name="F:Elementor.Plugin.modules_manager">
<summary>
Modules manager.
Holds the plugin modules manager.
</summary>

</member>
<member name="F:Elementor.Plugin.beta_testers">
<summary>
Beta testers.
Holds the plugin beta testers.
</summary>

</member>
<member name="F:Elementor.Plugin.debugger">
<summary>
Debugger.
Holds the plugin debugger data.
</summary>

</member>
<member name="F:Elementor.Plugin.inspector">
<summary>
Inspector.
Holds the plugin inspector data.
</summary>

</member>
<member name="F:Elementor.Plugin.common">
<summary>
Common functionality.
Holds the plugin common functionality.
</summary>

</member>
<member name="F:Elementor.Plugin.logger">
<summary>
Log manager.
Holds the plugin log manager.
</summary>

</member>
<member name="F:Elementor.Plugin.dev_tools">
<summary>
Dev tools.
Holds the plugin dev tools.
</summary>

</member>
<member name="F:Elementor.Plugin.upgrade">
<summary>
Upgrade manager.
Holds the plugin upgrade manager.
</summary>

</member>
<member name="F:Elementor.Plugin.kits_manager">
<summary>
Kits manager.
Holds the plugin kits manager.
</summary>

</member>
<member name="F:Elementor.Plugin.data_manager">
<summary>
Data manager.
Holds the plugin data manager.
</summary>

</member>
<member name="F:Elementor.Plugin.legacy_mode">
<summary>
Legacy mode.
Holds the plugin legacy mode data.
</summary>

</member>
<member name="F:Elementor.Plugin.app">
<summary>
App.
Holds the plugin app data.
</summary>

</member>
<member name="F:Elementor.Plugin.wp">
<summary>
WordPress API.
Holds the methods that interact with WordPress Core API.
</summary>

</member>
<member name="F:Elementor.Plugin.experiments">
<summary>
Experiments manager.
Holds the plugin experiments manager.
</summary>

</member>
<member name="F:Elementor.Plugin.uploads_manager">
<summary>
Uploads manager.
Holds the plugin uploads manager responsible for handling file uploads
that are not done with WordPress Media.
</summary>

</member>
<member name="F:Elementor.Plugin.breakpoints">
<summary>
Breakpoints manager.
Holds the plugin breakpoints manager.
</summary>

</member>
<member name="F:Elementor.Plugin.assets_loader">
<summary>
Assets loader.
Holds the plugin assets loader responsible for conditionally enqueuing
styles and script assets that were pre-enabled.
</summary>

</member>
<member name="M:Elementor.Plugin.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Plugin.#ctor(Pchp.Core.Context)">
<summary>
Plugin constructor.
Initializing Elementor plugin.
</summary>
</member>
<member name="T:Elementor.Preview">
<summary>
Elementor preview.
Elementor preview handler class is responsible for initializing Elementor in
preview mode.
</summary>
</member>
<member name="F:Elementor.Preview.is_preview">
<summary>
Is Preview.
Holds a flag if current request is a preview.
The flag is not related to a specific post or edit permissions.
</summary>

</member>
<member name="F:Elementor.Preview.post_id">
<summary>
Post ID.
Holds the ID of the current post being previewed.
</summary>

</member>
<member name="M:Elementor.Preview.#ctor">
<summary>
Preview constructor.
Initializing Elementor preview.
</summary>
</member>
<member name="M:Elementor.Preview.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Preview.#ctor(Pchp.Core.Context)">
<summary>
Preview constructor.
Initializing Elementor preview.
</summary>
</member>
<member name="T:Elementor.Rollback">
<summary>
Elementor rollback.
Elementor rollback handler class is responsible for rolling back Elementor to
previous version.
</summary>
</member>
<member name="F:Elementor.Rollback.package_url">
<summary>
Package URL.
Holds the package URL.
</summary>

</member>
<member name="F:Elementor.Rollback.version">
<summary>
Version.
Holds the version.
</summary>

</member>
<member name="F:Elementor.Rollback.plugin_name">
<summary>
Plugin name.
Holds the plugin name.
</summary>

</member>
<member name="F:Elementor.Rollback.plugin_slug">
<summary>
Plugin slug.
Holds the plugin slug.
</summary>

</member>
<member name="M:Elementor.Rollback.#ctor(Pchp.Core.PhpValue)">
<summary>
Rollback constructor.
Initializing Elementor rollback.
</summary>
<param name="args" type="array">Optional. Rollback arguments. Default is an empty array.</param>
</member>
<member name="M:Elementor.Rollback.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Rollback.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Rollback constructor.
Initializing Elementor rollback.
</summary>
<param name="args" type="array">Optional. Rollback arguments. Default is an empty array.</param>
</member>
<member name="T:Elementor.Settings_Controls">
<summary>
Elementor settings controls.
Elementor settings controls handler class responsible for creating the final
HTML for various input field types used in Elementor settings pages.
</summary>
</member>
<member name="T:Elementor.Settings_Page">
<summary>
Elementor settings page.
An abstract class that provides the needed properties and methods to handle
WordPress dashboard settings pages in inheriting classes.
</summary>
</member>
<member name="F:Elementor.Settings_Page.tabs">
<summary>
Tabs.
Holds the settings page tabs, sections and fields.
</summary>

</member>
<member name="F:Elementor.Settings_Page.PAGE_ID">
<summary>
Settings page ID.
</summary>

</member>
<member name="T:Elementor.Settings">
<summary>
Elementor "Settings" page in WordPress Dashboard.
Elementor settings page handler class responsible for creating and displaying
Elementor "Settings" page in WordPress dashboard.
</summary>
</member>
<member name="F:Elementor.Settings.PAGE_ID">
<summary>
Settings page ID for Elementor settings.
</summary>

</member>
<member name="F:Elementor.Settings.MENU_PRIORITY_GO_PRO">
<summary>
Go Pro menu priority.
</summary>

</member>
<member name="F:Elementor.Settings.UPDATE_TIME_FIELD">
<summary>
Settings page field for update time.
</summary>

</member>
<member name="F:Elementor.Settings.TAB_GENERAL">
<summary>
Settings page general tab slug.
</summary>

</member>
<member name="F:Elementor.Settings.TAB_STYLE">
<summary>
Settings page style tab slug.
</summary>

</member>
<member name="F:Elementor.Settings.TAB_INTEGRATIONS">
<summary>
Settings page integrations tab slug.
</summary>

</member>
<member name="F:Elementor.Settings.TAB_ADVANCED">
<summary>
Settings page advanced tab slug.
</summary>

</member>
<member name="M:Elementor.Settings.#ctor">
<summary>
Settings page constructor.
Initializing Elementor "Settings" page.
</summary>
</member>
<member name="M:Elementor.Settings.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Settings.#ctor(Pchp.Core.Context)">
<summary>
Settings page constructor.
Initializing Elementor "Settings" page.
</summary>
</member>
<member name="T:Elementor.Tools">
<summary>
Elementor "Tools" page in WordPress Dashboard.
Elementor settings page handler class responsible for creating and displaying
Elementor "Tools" page in WordPress dashboard.
</summary>
</member>
<member name="F:Elementor.Tools.PAGE_ID">
<summary>
Settings page ID for Elementor tools.
</summary>

</member>
<member name="M:Elementor.Tools.#ctor">
<summary>
Tools page constructor.
Initializing Elementor "Tools" page.
</summary>
</member>
<member name="M:Elementor.Tools.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Tools.#ctor(Pchp.Core.Context)">
<summary>
Tools page constructor.
Initializing Elementor "Tools" page.
</summary>
</member>
<member name="T:Elementor.Settings_Validations">
<summary>
Elementor settings validations.
Elementor settings validations handler class is responsible for validating settings
fields.
</summary>
</member>
<member name="T:Elementor.Shapes">
<summary>
Elementor shapes.
Elementor shapes handler class is responsible for setting up the supported
shape dividers.
</summary>
</member>
<member name="F:Elementor.Shapes.FILTER_EXCLUDE">
<summary>
The exclude filter.
</summary>

</member>
<member name="F:Elementor.Shapes.FILTER_INCLUDE">
<summary>
The include filter.
</summary>

</member>
<member name="T:Elementor.Stylesheet">
<summary>
Elementor stylesheet.
Elementor stylesheet handler class responsible for setting up CSS rules and
properties, and all the CSS `@media` rule with supported viewport width.
</summary>
</member>
<member name="F:Elementor.Stylesheet.rules">
<summary>
CSS Rules.
Holds the list of CSS rules.
</summary>

</member>
<member name="F:Elementor.Stylesheet.devices">
<summary>
Devices.
Holds the list of devices.
</summary>

</member>
<member name="F:Elementor.Stylesheet.raw">
<summary>
Raw CSS.
Holds the raw CSS.
</summary>

</member>
<member name="T:Elementor.TemplateLibrary.Classes.Import_Images">
<summary>
Elementor template library import images.
Elementor template library import images handler class is responsible for
importing remote images used by the template library.
</summary>
</member>
<member name="F:Elementor.TemplateLibrary.Classes.Import_Images._replace_image_ids">
<summary>
Replaced images IDs.
The IDs of all the new imported images. An array containing the old
attachment ID and the new attachment ID generated after the import.
</summary>

</member>
<member name="M:Elementor.TemplateLibrary.Classes.Import_Images.#ctor">
<summary>
Template library import images constructor.
Initializing the images import class used by the template library through
the WordPress Filesystem API.
</summary>
</member>
<member name="M:Elementor.TemplateLibrary.Classes.Import_Images.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.TemplateLibrary.Classes.Import_Images.#ctor(Pchp.Core.Context)">
<summary>
Template library import images constructor.
Initializing the images import class used by the template library through
the WordPress Filesystem API.
</summary>
</member>
<member name="T:Elementor.TemplateLibrary.Manager">
<summary>
Elementor template library manager.
Elementor template library manager handler class is responsible for
initializing the template library.
</summary>
</member>
<member name="F:Elementor.TemplateLibrary.Manager._registered_sources">
<summary>
Registered template sources.
Holds a list of all the supported sources with their instances.
</summary>

</member>
<member name="F:Elementor.TemplateLibrary.Manager._import_images">
<summary>
Imported template images.
Holds an instance of `Import_Images` class.
</summary>

</member>
<member name="M:Elementor.TemplateLibrary.Manager.#ctor">
<summary>
Template library manager constructor.
Initializing the template library manager by registering default template
sources and initializing ajax calls.
</summary>
</member>
<member name="M:Elementor.TemplateLibrary.Manager.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.TemplateLibrary.Manager.#ctor(Pchp.Core.Context)">
<summary>
Template library manager constructor.
Initializing the template library manager by registering default template
sources and initializing ajax calls.
</summary>
</member>
<member name="T:Elementor.TemplateLibrary.Source_Base">
<summary>
Elementor template library source base.
Elementor template library source base handler class is responsible for
initializing all the methods controlling the source of Elementor templates.
</summary>
</member>
<member name="F:Elementor.TemplateLibrary.Source_Base.user_meta">
<summary>
User meta.
Holds the current user meta data.
</summary>

</member>
<member name="T:Elementor.TemplateLibrary.Source_Local">
<summary>
Elementor template library local source.
Elementor template library local source handler class is responsible for
handling local Elementor templates saved by the user locally on his site.
</summary>
</member>
<member name="F:Elementor.TemplateLibrary.Source_Local.post_type_object">
<summary>
Post type object.
Holds the post type object of the current post.
</summary>

</member>
<member name="F:Elementor.TemplateLibrary.Source_Local.CPT">
<summary>
Elementor template-library post-type slug.
</summary>

</member>
<member name="F:Elementor.TemplateLibrary.Source_Local.TAXONOMY_TYPE_SLUG">
<summary>
Elementor template-library taxonomy slug.
</summary>

</member>
<member name="F:Elementor.TemplateLibrary.Source_Local.TAXONOMY_CATEGORY_SLUG">
<summary>
Elementor template-library category slug.
</summary>

</member>
<member name="F:Elementor.TemplateLibrary.Source_Local.TYPE_META_KEY">
<summary>
Elementor template-library meta key.
</summary>

</member>
<member name="F:Elementor.TemplateLibrary.Source_Local.TEMP_FILES_DIR">
<summary>
Elementor template-library temporary files folder.
</summary>

</member>
<member name="F:Elementor.TemplateLibrary.Source_Local.BULK_EXPORT_ACTION">
<summary>
Elementor template-library bulk export action name.
</summary>

</member>
<member name="M:Elementor.TemplateLibrary.Source_Local.#ctor">
<summary>
Template library local source constructor.
Initializing the template library local source base by registering custom
template data and running custom actions.
</summary>
</member>
<member name="M:Elementor.TemplateLibrary.Source_Local.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.TemplateLibrary.Source_Local.#ctor(Pchp.Core.Context)">
<summary>
Template library local source constructor.
Initializing the template library local source base by registering custom
template data and running custom actions.
</summary>
</member>
<member name="T:Elementor.TemplateLibrary.Source_Remote">
<summary>
Elementor template library remote source.
Elementor template library remote source handler class is responsible for
handling remote templates from Elementor.com servers.
</summary>
</member>
<member name="M:Elementor.TemplateLibrary.Source_Remote.#ctor">
<summary>
Template library source base constructor.
Initializing the template library source base by registering custom
template data.
</summary>
</member>
<member name="M:Elementor.TemplateLibrary.Source_Remote.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.TemplateLibrary.Source_Remote.#ctor(Pchp.Core.Context)">
<summary>
Template library source base constructor.
Initializing the template library source base by registering custom
template data.
</summary>
</member>
<member name="T:Elementor.Tracker">
<summary>
Elementor tracker.
Elementor tracker handler class is responsible for sending non-sensitive plugin
data to Elementor servers for users that actively allowed data tracking.
</summary>
</member>
<member name="T:Elementor.User">
<summary>
Elementor user.
Elementor user handler class is responsible for checking if the user can edit
with Elementor and displaying different admin notices.
</summary>
</member>
<member name="F:Elementor.User.ADMIN_NOTICES_KEY">
<summary>
The admin notices key.
</summary>

</member>
<member name="F:Elementor.User.BETA_TESTER_API_URL">
<summary>
API URL.
Holds the URL of the Beta Tester Opt-in API.
</summary>

</member>
<member name="T:Elementor.Utils">
<summary>
Elementor utils.
Elementor utils handler class is responsible for different utility methods
used by Elementor.
</summary>
</member>
<member name="T:Elementor.Widget_Accordion">
<summary>
Elementor accordion widget.
Elementor widget that displays a collapsible display of content in an
accordion style, showing only one item at a time.
</summary>
</member>
<member name="M:Elementor.Widget_Accordion.#ctor(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="M:Elementor.Widget_Accordion.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Widget_Accordion.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="T:Elementor.Widget_Alert">
<summary>
Elementor alert widget.
Elementor widget that displays a collapsible display of content in an toggle
style, allowing the user to open multiple items.
</summary>
</member>
<member name="M:Elementor.Widget_Alert.#ctor(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="M:Elementor.Widget_Alert.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Widget_Alert.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="T:Elementor.Widget_Audio">
<summary>
Elementor audio widget.
Elementor widget that displays an audio player.
</summary>
</member>
<member name="F:Elementor.Widget_Audio._current_instance">
<summary>
Current instance.
</summary>

</member>
<member name="M:Elementor.Widget_Audio.#ctor(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="M:Elementor.Widget_Audio.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Widget_Audio.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="T:Elementor.Widget_Button">
<summary>
Elementor button widget.
Elementor widget that displays a button with the ability to control every
aspect of the button design.
</summary>
</member>
<member name="M:Elementor.Widget_Button.#ctor(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="M:Elementor.Widget_Button.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Widget_Button.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="T:Elementor.Widget_Common">
<summary>
Elementor common widget.
Elementor base widget that gives you all the advanced options of the basic
widget.
</summary>
</member>
<member name="M:Elementor.Widget_Common.#ctor(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="M:Elementor.Widget_Common.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Widget_Common.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="T:Elementor.Widget_Counter">
<summary>
Elementor counter widget.
Elementor widget that displays stats and numbers in an escalating manner.
</summary>
</member>
<member name="M:Elementor.Widget_Counter.#ctor(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="M:Elementor.Widget_Counter.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Widget_Counter.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="T:Elementor.Widget_Divider">
<summary>
Elementor divider widget.
Elementor widget that displays a line that divides different elements in the
page.
</summary>
</member>
<member name="M:Elementor.Widget_Divider.#ctor(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="M:Elementor.Widget_Divider.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Widget_Divider.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="T:Elementor.Widget_Google_Maps">
<summary>
Elementor google maps widget.
Elementor widget that displays an embedded google map.
</summary>
</member>
<member name="M:Elementor.Widget_Google_Maps.#ctor(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="M:Elementor.Widget_Google_Maps.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Widget_Google_Maps.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="T:Elementor.Widget_Heading">
<summary>
Elementor heading widget.
Elementor widget that displays an eye-catching headlines.
</summary>
</member>
<member name="M:Elementor.Widget_Heading.#ctor(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="M:Elementor.Widget_Heading.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Widget_Heading.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="T:Elementor.Widget_Html">
<summary>
Elementor HTML widget.
Elementor widget that insert a custom HTML code into the page.
</summary>
</member>
<member name="M:Elementor.Widget_Html.#ctor(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="M:Elementor.Widget_Html.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Widget_Html.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="T:Elementor.Widget_Icon_Box">
<summary>
Elementor icon box widget.
Elementor widget that displays an icon, a headline and a text.
</summary>
</member>
<member name="M:Elementor.Widget_Icon_Box.#ctor(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="M:Elementor.Widget_Icon_Box.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Widget_Icon_Box.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="T:Elementor.Widget_Icon_List">
<summary>
Elementor icon list widget.
Elementor widget that displays a bullet list with any chosen icons and texts.
</summary>
</member>
<member name="M:Elementor.Widget_Icon_List.#ctor(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="M:Elementor.Widget_Icon_List.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Widget_Icon_List.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="T:Elementor.Widget_Icon">
<summary>
Elementor icon widget.
Elementor widget that displays an icon from over 600+ icons.
</summary>
</member>
<member name="M:Elementor.Widget_Icon.#ctor(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="M:Elementor.Widget_Icon.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Widget_Icon.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="T:Elementor.Widget_Image_Box">
<summary>
Elementor image box widget.
Elementor widget that displays an image, a headline and a text.
</summary>
</member>
<member name="M:Elementor.Widget_Image_Box.#ctor(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="M:Elementor.Widget_Image_Box.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Widget_Image_Box.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="T:Elementor.Widget_Image_Carousel">
<summary>
Elementor image carousel widget.
Elementor widget that displays a set of images in a rotating carousel or
slider.
</summary>
</member>
<member name="M:Elementor.Widget_Image_Carousel.#ctor(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="M:Elementor.Widget_Image_Carousel.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Widget_Image_Carousel.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="T:Elementor.Widget_Image_Gallery">
<summary>
Elementor image gallery widget.
Elementor widget that displays a set of images in an aligned grid.
</summary>
</member>
<member name="M:Elementor.Widget_Image_Gallery.#ctor(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="M:Elementor.Widget_Image_Gallery.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Widget_Image_Gallery.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="T:Elementor.Widget_Image">
<summary>
Elementor image widget.
Elementor widget that displays an image into the page.
</summary>
</member>
<member name="M:Elementor.Widget_Image.#ctor(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="M:Elementor.Widget_Image.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Widget_Image.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="T:Elementor.Widget_Menu_Anchor">
<summary>
Elementor menu anchor widget.
Elementor widget that allows to link and menu to a specific position on the
page.
</summary>
</member>
<member name="M:Elementor.Widget_Menu_Anchor.#ctor(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="M:Elementor.Widget_Menu_Anchor.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Widget_Menu_Anchor.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="T:Elementor.Widget_Progress">
<summary>
Elementor progress widget.
Elementor widget that displays an escalating progress bar.
</summary>
</member>
<member name="M:Elementor.Widget_Progress.#ctor(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="M:Elementor.Widget_Progress.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Widget_Progress.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="T:Elementor.Widget_Read_More">
<summary>
Elementor HTML widget.
Elementor widget that insert a custom HTML code into the page.
</summary>
</member>
<member name="M:Elementor.Widget_Read_More.#ctor(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="M:Elementor.Widget_Read_More.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Widget_Read_More.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="T:Elementor.Widget_Shortcode">
<summary>
Elementor shortcode widget.
Elementor widget that insert any shortcodes into the page.
</summary>
</member>
<member name="M:Elementor.Widget_Shortcode.#ctor(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="M:Elementor.Widget_Shortcode.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Widget_Shortcode.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="T:Elementor.Widget_Sidebar">
<summary>
Elementor sidebar widget.
Elementor widget that insert any sidebar into the page.
</summary>
</member>
<member name="M:Elementor.Widget_Sidebar.#ctor(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="M:Elementor.Widget_Sidebar.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Widget_Sidebar.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="T:Elementor.Widget_Social_Icons">
<summary>
Elementor social icons widget.
Elementor widget that displays icons to social pages like Facebook and Twitter.
</summary>
</member>
<member name="M:Elementor.Widget_Social_Icons.#ctor(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="M:Elementor.Widget_Social_Icons.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Widget_Social_Icons.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="T:Elementor.Widget_Spacer">
<summary>
Elementor spacer widget.
Elementor widget that inserts a space that divides various elements.
</summary>
</member>
<member name="M:Elementor.Widget_Spacer.#ctor(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="M:Elementor.Widget_Spacer.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Widget_Spacer.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="T:Elementor.Widget_Star_Rating">
<summary>
Elementor star rating widget.
Elementor widget that displays star rating.
</summary>
</member>
<member name="M:Elementor.Widget_Star_Rating.#ctor(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="M:Elementor.Widget_Star_Rating.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Widget_Star_Rating.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="T:Elementor.Widget_Tabs">
<summary>
Elementor tabs widget.
Elementor widget that displays vertical or horizontal tabs with different
pieces of content.
</summary>
</member>
<member name="M:Elementor.Widget_Tabs.#ctor(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="M:Elementor.Widget_Tabs.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Widget_Tabs.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="T:Elementor.Widget_Testimonial">
<summary>
Elementor testimonial widget.
Elementor widget that displays customer testimonials that show social proof.
</summary>
</member>
<member name="M:Elementor.Widget_Testimonial.#ctor(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="M:Elementor.Widget_Testimonial.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Widget_Testimonial.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="T:Elementor.Widget_Text_Editor">
<summary>
Elementor text editor widget.
Elementor widget that displays a WYSIWYG text editor, just like the WordPress
editor.
</summary>
</member>
<member name="M:Elementor.Widget_Text_Editor.#ctor(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="M:Elementor.Widget_Text_Editor.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Widget_Text_Editor.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="T:Elementor.Widget_Toggle">
<summary>
Elementor toggle widget.
Elementor widget that displays a collapsible display of content in an toggle
style, allowing the user to open multiple items.
</summary>
</member>
<member name="M:Elementor.Widget_Toggle.#ctor(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="M:Elementor.Widget_Toggle.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Widget_Toggle.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="T:Elementor.Widget_Video">
<summary>
Elementor video widget.
Elementor widget that displays a video player.
</summary>
</member>
<member name="M:Elementor.Widget_Video.#ctor(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="M:Elementor.Widget_Video.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Widget_Video.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="T:Elementor.Widget_WordPress">
<summary>
Elementor WordPress widget.
Elementor widget that displays all the WordPress widgets.
</summary>
</member>
<member name="F:Elementor.Widget_WordPress._widget_name">
<summary>
WordPress widget name.
</summary>

</member>
<member name="F:Elementor.Widget_WordPress._widget_instance">
<summary>
WordPress widget instance.
</summary>

</member>
<member name="M:Elementor.Widget_WordPress.#ctor(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
WordPress/Pojo widget constructor.
Used to run WordPress widget constructor.
</summary>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array">Widget arguments. Default is null.</param>
</member>
<member name="M:Elementor.Widget_WordPress.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Widget_WordPress.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
WordPress/Pojo widget constructor.
Used to run WordPress widget constructor.
</summary>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array">Widget arguments. Default is null.</param>
</member>
<member name="T:Elementor.Modules.AdminBar.Module">
</member>
<member name="M:Elementor.Modules.AdminBar.Module.#ctor">
<summary>
Module constructor.
</summary>
</member>
<member name="M:Elementor.Modules.AdminBar.Module.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Modules.AdminBar.Module.#ctor(Pchp.Core.Context)">
<summary>
Module constructor.
</summary>
</member>
<member name="T:Elementor.Modules.AdminTopBar.Module">
</member>
<member name="M:Elementor.Modules.AdminTopBar.Module.#ctor">
<summary>
Module constructor.
</summary>
</member>
<member name="M:Elementor.Modules.AdminTopBar.Module.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Modules.AdminTopBar.Module.#ctor(Pchp.Core.Context)">
<summary>
Module constructor.
</summary>
</member>
<member name="T:Elementor.Modules.CompatibilityTag.Base_Module">
</member>
<member name="T:Elementor.Modules.CompatibilityTag.Compatibility_Tag_Report">
</member>
<member name="M:Elementor.Modules.CompatibilityTag.Compatibility_Tag_Report.#ctor(Pchp.Core.PhpValue)">
<summary>
Compatibility_Tag_Report constructor.
</summary>
</member>
<member name="M:Elementor.Modules.CompatibilityTag.Compatibility_Tag_Report.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Modules.CompatibilityTag.Compatibility_Tag_Report.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Compatibility_Tag_Report constructor.
</summary>
</member>
<member name="T:Elementor.Modules.CompatibilityTag.Compatibility_Tag">
</member>
<member name="F:Elementor.Modules.CompatibilityTag.Compatibility_Tag.header">
<summary>
Holds the header that should be checked.
</summary>
<value>string</value>
</member>
<member name="M:Elementor.Modules.CompatibilityTag.Compatibility_Tag.#ctor(Pchp.Core.PhpValue)">
<summary>
Compatibility_Tag constructor.
</summary>
<param name="header" type="string"></param>
</member>
<member name="M:Elementor.Modules.CompatibilityTag.Compatibility_Tag.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Modules.CompatibilityTag.Compatibility_Tag.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Compatibility_Tag constructor.
</summary>
<param name="header" type="string"></param>
</member>
<member name="T:Elementor.Modules.CompatibilityTag.Module">
<summary>
Inspired By WooCommerce.
</summary>
</member>
<member name="F:Elementor.Modules.CompatibilityTag.Module.PLUGIN_VERSION_TESTED_HEADER">
<summary>
This is the header used by extensions to show testing.
</summary>

</member>
<member name="M:Elementor.Modules.CompatibilityTag.Module.#ctor">
<summary>
Base_Module constructor.
</summary>
</member>
<member name="M:Elementor.Modules.CompatibilityTag.Module.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Modules.CompatibilityTag.Module.#ctor(Pchp.Core.Context)">
<summary>
Base_Module constructor.
</summary>
</member>
<member name="T:Elementor.Modules.DevTools.Deprecation">
</member>
<member name="M:Elementor.Modules.DevTools.Deprecation.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="T:Elementor.Modules.DevTools.Module">
<summary>
Fix issue with 'Potentially polymorphic call. The code may be inoperable depending on the actual class instance passed as the argument.'.
Its tells to the editor that instance() return right module. instead of base module.
</summary>
</member>
<member name="M:Elementor.Modules.DevTools.Module.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="T:Elementor.Modules.DynamicTags.Module">
<summary>
Elementor dynamic tags module.
Elementor dynamic tags module handler class is responsible for registering
and managing Elementor dynamic tags modules.
</summary>
</member>
<member name="F:Elementor.Modules.DynamicTags.Module.BASE_GROUP">
<summary>
Base dynamic tag group.
</summary>

</member>
<member name="F:Elementor.Modules.DynamicTags.Module.TEXT_CATEGORY">
<summary>
Dynamic tags text category.
</summary>

</member>
<member name="F:Elementor.Modules.DynamicTags.Module.URL_CATEGORY">
<summary>
Dynamic tags URL category.
</summary>

</member>
<member name="F:Elementor.Modules.DynamicTags.Module.IMAGE_CATEGORY">
<summary>
Dynamic tags image category.
</summary>

</member>
<member name="F:Elementor.Modules.DynamicTags.Module.MEDIA_CATEGORY">
<summary>
Dynamic tags media category.
</summary>

</member>
<member name="F:Elementor.Modules.DynamicTags.Module.POST_META_CATEGORY">
<summary>
Dynamic tags post meta category.
</summary>

</member>
<member name="F:Elementor.Modules.DynamicTags.Module.GALLERY_CATEGORY">
<summary>
Dynamic tags gallery category.
</summary>

</member>
<member name="F:Elementor.Modules.DynamicTags.Module.NUMBER_CATEGORY">
<summary>
Dynamic tags number category.
</summary>

</member>
<member name="F:Elementor.Modules.DynamicTags.Module.COLOR_CATEGORY">
<summary>
Dynamic tags number category.
</summary>

</member>
<member name="M:Elementor.Modules.DynamicTags.Module.#ctor">
<summary>
Dynamic tags module constructor.
Initializing Elementor dynamic tags module.
</summary>
</member>
<member name="M:Elementor.Modules.DynamicTags.Module.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Modules.DynamicTags.Module.#ctor(Pchp.Core.Context)">
<summary>
Dynamic tags module constructor.
Initializing Elementor dynamic tags module.
</summary>
</member>
<member name="T:Elementor.Modules.ElementsColorPicker.Module">
</member>
<member name="M:Elementor.Modules.ElementsColorPicker.Module.#ctor">
<summary>
Module constructor - Initialize the Eye-Dropper module.
</summary>
</member>
<member name="M:Elementor.Modules.ElementsColorPicker.Module.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Modules.ElementsColorPicker.Module.#ctor(Pchp.Core.Context)">
<summary>
Module constructor - Initialize the Eye-Dropper module.
</summary>
</member>
<member name="T:Elementor.Modules.Gutenberg.Module">
</member>
<member name="M:Elementor.Modules.Gutenberg.Module.#ctor">
</member>
<member name="M:Elementor.Modules.Gutenberg.Module.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Modules.Gutenberg.Module.#ctor(Pchp.Core.Context)">
</member>
<member name="T:Elementor.Modules.History.Module">
<summary>
Elementor history module.
Elementor history module handler class is responsible for registering and
managing Elementor history modules.
</summary>
</member>
<member name="M:Elementor.Modules.History.Module.#ctor">
<summary>
History module constructor.
Initializing Elementor history module.
</summary>
</member>
<member name="M:Elementor.Modules.History.Module.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Modules.History.Module.#ctor(Pchp.Core.Context)">
<summary>
History module constructor.
Initializing Elementor history module.
</summary>
</member>
<member name="T:Elementor.Modules.History.Revisions_Manager">
<summary>
Elementor history revisions manager.
Elementor history revisions manager handler class is responsible for
registering and managing Elementor revisions manager.
</summary>
</member>
<member name="F:Elementor.Modules.History.Revisions_Manager.MAX_REVISIONS_TO_DISPLAY">
<summary>
Maximum number of revisions to display.
</summary>

</member>
<member name="M:Elementor.Modules.History.Revisions_Manager.#ctor">
<summary>
History revisions manager constructor.
Initializing Elementor history revisions manager.
</summary>
</member>
<member name="M:Elementor.Modules.History.Revisions_Manager.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Modules.History.Revisions_Manager.#ctor(Pchp.Core.Context)">
<summary>
History revisions manager constructor.
Initializing Elementor history revisions manager.
</summary>
</member>
<member name="T:Elementor.Modules.LandingPages.Documents.Landing_Page">
</member>
<member name="M:Elementor.Modules.LandingPages.Documents.Landing_Page.#ctor(Pchp.Core.PhpArray)">
<param name="data" type="array"></param>
</member>
<member name="M:Elementor.Modules.LandingPages.Documents.Landing_Page.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Modules.LandingPages.Documents.Landing_Page.#ctor(Pchp.Core.Context,Pchp.Core.PhpArray)">
<param name="data" type="array"></param>
</member>
<member name="T:Elementor.Modules.LandingPages.Module">
</member>
<member name="M:Elementor.Modules.LandingPages.Module.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="T:Elementor.Modules.Library.Documents.Library_Document">
<summary>
Elementor library document.
Elementor library document handler class is responsible for handling
a document of the library type.
</summary>
</member>
<member name="F:Elementor.Modules.Library.Documents.Library_Document.TAXONOMY_TYPE_SLUG">
<summary>
The taxonomy type slug for the library document.
</summary>

</member>
<member name="T:Elementor.Modules.Library.Documents.Not_Supported">
<summary>
Elementor section library document.
Elementor section library document handler class is responsible for
handling a document of a section type.
</summary>
</member>
<member name="M:Elementor.Modules.Library.Documents.Not_Supported.#ctor(Pchp.Core.PhpArray)">
<param name="data" type="array"></param>
<exception cref="Exception">If the post does not exist.</exception>
</member>
<member name="M:Elementor.Modules.Library.Documents.Not_Supported.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Modules.Library.Documents.Not_Supported.#ctor(Pchp.Core.Context,Pchp.Core.PhpArray)">
<param name="data" type="array"></param>
<exception cref="Exception">If the post does not exist.</exception>
</member>
<member name="T:Elementor.Modules.Library.Documents.Page">
<summary>
Elementor page library document.
Elementor page library document handler class is responsible for
handling a document of a page type.
</summary>
</member>
<member name="M:Elementor.Modules.Library.Documents.Page.#ctor(Pchp.Core.PhpArray)">
<param name="data" type="array"></param>
<exception cref="Exception">If the post does not exist.</exception>
</member>
<member name="M:Elementor.Modules.Library.Documents.Page.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Modules.Library.Documents.Page.#ctor(Pchp.Core.Context,Pchp.Core.PhpArray)">
<param name="data" type="array"></param>
<exception cref="Exception">If the post does not exist.</exception>
</member>
<member name="T:Elementor.Modules.Library.Documents.Section">
<summary>
Elementor section library document.
Elementor section library document handler class is responsible for
handling a document of a section type.
</summary>
</member>
<member name="M:Elementor.Modules.Library.Documents.Section.#ctor(Pchp.Core.PhpArray)">
<param name="data" type="array"></param>
<exception cref="Exception">If the post does not exist.</exception>
</member>
<member name="M:Elementor.Modules.Library.Documents.Section.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Modules.Library.Documents.Section.#ctor(Pchp.Core.Context,Pchp.Core.PhpArray)">
<param name="data" type="array"></param>
<exception cref="Exception">If the post does not exist.</exception>
</member>
<member name="T:Elementor.Modules.Library.Module">
<summary>
Elementor library module.
Elementor library module handler class is responsible for registering and
managing Elementor library modules.
</summary>
</member>
<member name="M:Elementor.Modules.Library.Module.#ctor">
<summary>
Library module constructor.
Initializing Elementor library module.
</summary>
</member>
<member name="M:Elementor.Modules.Library.Module.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Modules.Library.Module.#ctor(Pchp.Core.Context)">
<summary>
Library module constructor.
Initializing Elementor library module.
</summary>
</member>
<member name="T:Elementor.Modules.Library.Traits.Library`1`1">
<summary>
Elementor Library Trait
This trait is used by all Library Documents and Landing Pages.
</summary>
</member>
<member name="T:Elementor.Modules.Library.User_Favorites">
</member>
<member name="M:Elementor.Modules.Library.User_Favorites.#ctor(Pchp.Core.PhpValue)">
<summary>
User_Favorites constructor.
</summary>
</member>
<member name="M:Elementor.Modules.Library.User_Favorites.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Modules.Library.User_Favorites.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
User_Favorites constructor.
</summary>
</member>
<member name="T:Elementor.Modules.PageTemplates.Module">
<summary>
Elementor page templates module.
Elementor page templates module handler class is responsible for registering
and managing Elementor page templates modules.
</summary>
</member>
<member name="F:Elementor.Modules.PageTemplates.Module.print_callback">
<summary>
Print callback.
Holds the page template callback content.
</summary>

</member>
<member name="F:Elementor.Modules.PageTemplates.Module.TEMPLATE_THEME">
<summary>
The of the theme.
</summary>

</member>
<member name="F:Elementor.Modules.PageTemplates.Module.TEMPLATE_CANVAS">
<summary>
Elementor Canvas template name.
</summary>

</member>
<member name="F:Elementor.Modules.PageTemplates.Module.TEMPLATE_HEADER_FOOTER">
<summary>
Elementor Header &amp; Footer template name.
</summary>

</member>
<member name="M:Elementor.Modules.PageTemplates.Module.#ctor">
<summary>
Page templates module constructor.
Initializing Elementor page templates module.
</summary>
</member>
<member name="M:Elementor.Modules.PageTemplates.Module.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Modules.PageTemplates.Module.#ctor(Pchp.Core.Context)">
<summary>
Page templates module constructor.
Initializing Elementor page templates module.
</summary>
</member>
<member name="T:Elementor.Modules.SafeMode.Module">
</member>
<member name="M:Elementor.Modules.SafeMode.Module.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="T:Safe_Mode">
</member>
<member name="M:Safe_Mode.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="T:Elementor.Modules.Shapes.Module">
</member>
<member name="M:Elementor.Modules.Shapes.Module.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="T:Elementor.Modules.Shapes.Widgets.TextPath">
<summary>
Elementor WordArt widget.
Elementor widget that displays text along SVG path.
</summary>
</member>
<member name="M:Elementor.Modules.Shapes.Widgets.TextPath.#ctor(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="M:Elementor.Modules.Shapes.Widgets.TextPath.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Modules.Shapes.Widgets.TextPath.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="T:Elementor.Modules.System_Info.Helpers.Model_Helper">
<summary>
Elementor model helper.
Elementor model helper handler class is responsible for filtering properties.
</summary>
</member>
<member name="M:Elementor.Modules.System_Info.Helpers.Model_Helper.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Modules.System_Info.Helpers.Model_Helper.#ctor(Pchp.Core.Context)">
<summary>
Model helper constructor.
Initializing the model helper class.
</summary>
</member>
<member name="T:Elementor.Modules.System_Info.Module">
<summary>
Elementor system info module.
Elementor system info module handler class is responsible for registering and
managing Elementor system info reports.
</summary>
</member>
<member name="F:Elementor.Modules.System_Info.Module.capability">
<summary>
Required user capabilities.
Holds the user capabilities required to manage Elementor menus.
</summary>

</member>
<member name="M:Elementor.Modules.System_Info.Module.#ctor">
<summary>
Main system info page constructor.
Initializing Elementor system info page.
</summary>
</member>
<member name="M:Elementor.Modules.System_Info.Module.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Modules.System_Info.Module.#ctor(Pchp.Core.Context)">
<summary>
Main system info page constructor.
Initializing Elementor system info page.
</summary>
</member>
<member name="T:Elementor.Modules.System_Info.Reporters.Base">
<summary>
Elementor base reporter.
A base abstract class that provides the needed properties and methods to
manage and handle reporter in inheriting classes.
</summary>
</member>
<member name="F:Elementor.Modules.System_Info.Reporters.Base._properties">
<summary>
Reporter properties.
Holds the list of all the properties of the report.
</summary>

</member>
<member name="T:Elementor.Modules.System_Info.Reporters.MU_Plugins">
<summary>
Elementor must-use plugins report.
Elementor system report handler class responsible for generating a report for
must-use plugins.
</summary>
</member>
<member name="F:Elementor.Modules.System_Info.Reporters.MU_Plugins.plugins">
<summary>
Must-Use plugins.
Holds the sites must-use plugins list.
</summary>

</member>
<member name="M:Elementor.Modules.System_Info.Reporters.MU_Plugins.#ctor(Pchp.Core.PhpValue)">
<summary>
Reporter base constructor.
Initializing the reporter base class.
</summary>
<param name="properties" type="array">Optional. Properties to filter. Default is `null`.</param>
</member>
<member name="M:Elementor.Modules.System_Info.Reporters.MU_Plugins.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Modules.System_Info.Reporters.MU_Plugins.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Reporter base constructor.
Initializing the reporter base class.
</summary>
<param name="properties" type="array">Optional. Properties to filter. Default is `null`.</param>
</member>
<member name="T:Elementor.Modules.System_Info.Reporters.Network_Plugins">
<summary>
Elementor network plugins report.
Elementor system report handler class responsible for generating a report for
network plugins.
</summary>
</member>
<member name="F:Elementor.Modules.System_Info.Reporters.Network_Plugins.plugins">
<summary>
Network plugins.
Holds the sites network plugins list.
</summary>

</member>
<member name="M:Elementor.Modules.System_Info.Reporters.Network_Plugins.#ctor(Pchp.Core.PhpValue)">
<summary>
Reporter base constructor.
Initializing the reporter base class.
</summary>
<param name="properties" type="array">Optional. Properties to filter. Default is `null`.</param>
</member>
<member name="M:Elementor.Modules.System_Info.Reporters.Network_Plugins.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Modules.System_Info.Reporters.Network_Plugins.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Reporter base constructor.
Initializing the reporter base class.
</summary>
<param name="properties" type="array">Optional. Properties to filter. Default is `null`.</param>
</member>
<member name="T:Elementor.Modules.System_Info.Reporters.Plugins">
<summary>
Elementor active plugins report.
Elementor system report handler class responsible for generating a report for
active plugins.
</summary>
</member>
<member name="F:Elementor.Modules.System_Info.Reporters.Plugins.plugins">
<summary>
Active plugins.
Holds the sites active plugins list.
</summary>

</member>
<member name="M:Elementor.Modules.System_Info.Reporters.Plugins.#ctor(Pchp.Core.PhpValue)">
<summary>
Reporter base constructor.
Initializing the reporter base class.
</summary>
<param name="properties" type="array">Optional. Properties to filter. Default is `null`.</param>
</member>
<member name="M:Elementor.Modules.System_Info.Reporters.Plugins.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Modules.System_Info.Reporters.Plugins.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Reporter base constructor.
Initializing the reporter base class.
</summary>
<param name="properties" type="array">Optional. Properties to filter. Default is `null`.</param>
</member>
<member name="T:Elementor.Modules.System_Info.Reporters.Server">
<summary>
Elementor server environment report.
Elementor system report handler class responsible for generating a report for
the server environment.
</summary>
</member>
<member name="M:Elementor.Modules.System_Info.Reporters.Server.#ctor(Pchp.Core.PhpValue)">
<summary>
Reporter base constructor.
Initializing the reporter base class.
</summary>
<param name="properties" type="array">Optional. Properties to filter. Default is `null`.</param>
</member>
<member name="M:Elementor.Modules.System_Info.Reporters.Server.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Modules.System_Info.Reporters.Server.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Reporter base constructor.
Initializing the reporter base class.
</summary>
<param name="properties" type="array">Optional. Properties to filter. Default is `null`.</param>
</member>
<member name="T:Elementor.Modules.System_Info.Reporters.Theme">
<summary>
Elementor theme report.
Elementor system report handler class responsible for generating a report for
the theme.
</summary>
</member>
<member name="F:Elementor.Modules.System_Info.Reporters.Theme.theme">
<summary>
Theme.
Holds the sites theme object.
</summary>

</member>
<member name="M:Elementor.Modules.System_Info.Reporters.Theme.#ctor(Pchp.Core.PhpValue)">
<summary>
Reporter base constructor.
Initializing the reporter base class.
</summary>
<param name="properties" type="array">Optional. Properties to filter. Default is `null`.</param>
</member>
<member name="M:Elementor.Modules.System_Info.Reporters.Theme.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Modules.System_Info.Reporters.Theme.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Reporter base constructor.
Initializing the reporter base class.
</summary>
<param name="properties" type="array">Optional. Properties to filter. Default is `null`.</param>
</member>
<member name="T:Elementor.Modules.System_Info.Reporters.User">
<summary>
Elementor user report.
Elementor system report handler class responsible for generating a report for
the user.
</summary>
</member>
<member name="M:Elementor.Modules.System_Info.Reporters.User.#ctor(Pchp.Core.PhpValue)">
<summary>
Reporter base constructor.
Initializing the reporter base class.
</summary>
<param name="properties" type="array">Optional. Properties to filter. Default is `null`.</param>
</member>
<member name="M:Elementor.Modules.System_Info.Reporters.User.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Modules.System_Info.Reporters.User.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Reporter base constructor.
Initializing the reporter base class.
</summary>
<param name="properties" type="array">Optional. Properties to filter. Default is `null`.</param>
</member>
<member name="T:Elementor.Modules.System_Info.Reporters.WordPress">
<summary>
Elementor WordPress environment report.
Elementor system report handler class responsible for generating a report for
the WordPress environment.
</summary>
</member>
<member name="M:Elementor.Modules.System_Info.Reporters.WordPress.#ctor(Pchp.Core.PhpValue)">
<summary>
Reporter base constructor.
Initializing the reporter base class.
</summary>
<param name="properties" type="array">Optional. Properties to filter. Default is `null`.</param>
</member>
<member name="M:Elementor.Modules.System_Info.Reporters.WordPress.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Modules.System_Info.Reporters.WordPress.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Reporter base constructor.
Initializing the reporter base class.
</summary>
<param name="properties" type="array">Optional. Properties to filter. Default is `null`.</param>
</member>
<member name="T:Elementor.Modules.Usage.Module">
<summary>
Elementor usage module.
Elementor usage module handler class is responsible for registering and
managing Elementor usage data.
</summary>
</member>
<member name="M:Elementor.Modules.Usage.Module.#ctor">
<summary>
Usage module constructor.
Initializing Elementor usage module.
</summary>
</member>
<member name="M:Elementor.Modules.Usage.Module.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Modules.Usage.Module.#ctor(Pchp.Core.Context)">
<summary>
Usage module constructor.
Initializing Elementor usage module.
</summary>
</member>
<member name="T:Elementor.Modules.Usage.Usage_Reporter">
<summary>
Elementor usage report.
Elementor system report handler class responsible for generating a report for
the user.
</summary>
</member>
<member name="M:Elementor.Modules.Usage.Usage_Reporter.#ctor(Pchp.Core.PhpValue)">
<summary>
Reporter base constructor.
Initializing the reporter base class.
</summary>
<param name="properties" type="array">Optional. Properties to filter. Default is `null`.</param>
</member>
<member name="M:Elementor.Modules.Usage.Usage_Reporter.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Modules.Usage.Usage_Reporter.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Reporter base constructor.
Initializing the reporter base class.
</summary>
<param name="properties" type="array">Optional. Properties to filter. Default is `null`.</param>
</member>
<member name="T:Elementor.Modules.WpCli.Cli_Logger">
</member>
<member name="T:Elementor.Modules.WpCli.Command">
<summary>
Elementor Page Builder cli tools.
</summary>
</member>
<member name="T:Elementor.Modules.WpCli.Library">
<summary>
Elementor Page Builder cli tools.
</summary>
</member>
<member name="T:Elementor.Modules.WpCli.Module">
</member>
<member name="M:Elementor.Modules.WpCli.Module.#ctor">
</member>
<member name="M:Elementor.Modules.WpCli.Module.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Elementor.Modules.WpCli.Module.#ctor(Pchp.Core.Context)">
</member>
<member name="T:Elementor.Modules.WpCli.Update">
<summary>
Elementor Page Builder cli tools.
</summary>
</member>
<member name="T:manual_Customize">
</member>
<member name="T:manual_menu_walker">
</member>
<member name="T:VcGridsCommon?">
<summary>
Class VcGridsCommon
</summary>
</member>
<member name="T:Vc_Settings_Preset">
<summary>
Collection of static methods for work with settings presets
</summary>
</member>
<member name="T:Vc_Vendor_Preset">
<summary>
Singleton to hold all vendor presets
</summary>
</member>
<member name="M:Vc_Vendor_Preset.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="T:Vc_Hooks_Vc_Grid">
<summary>
Class Vc_Hooks_Vc_Grid
</summary>
</member>
<member name="T:Vc_Setting_Post_Type_Default_Template_Field">
<summary>
Default template for post types manager
Class Vc_Setting_Post_Type_Default_Template_Field
</summary>
</member>
<member name="M:Vc_Setting_Post_Type_Default_Template_Field.#ctor(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Vc_Setting_Post_Type_Default_Template_Field constructor.
</summary>
</member>
<member name="M:Vc_Setting_Post_Type_Default_Template_Field.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Vc_Setting_Post_Type_Default_Template_Field.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Vc_Setting_Post_Type_Default_Template_Field constructor.
</summary>
</member>
<member name="T:VcShortcodeAutoloader">
<summary>
Class VcShortcodeAutoloader
</summary>
</member>
<member name="M:VcShortcodeAutoloader.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:VcShortcodeAutoloader.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
VcShortcodeAutoloader constructor.
</summary>
<param name="load_config" type="bool"></param>
</member>
<member name="T:Vc_Access">
<summary>
Class Vc_Access
</summary>
</member>
<member name="T:Vc_Current_User_Access_Controller">
<summary>
Class Vc_Current_User_Access_Controller
</summary>
</member>
<member name="M:Vc_Current_User_Access_Controller.#ctor(Pchp.Core.PhpValue)">
<summary>
Vc_Role_Access_Controller constructor.
</summary>
</member>
<member name="M:Vc_Current_User_Access_Controller.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Vc_Current_User_Access_Controller.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Vc_Role_Access_Controller constructor.
</summary>
</member>
<member name="T:Vc_Current_User_Access">
<summary>
Class Vc_User_Access
</summary>
</member>
<member name="M:Vc_Current_User_Access.#ctor">
</member>
<member name="M:Vc_Current_User_Access.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Vc_Current_User_Access.#ctor(Pchp.Core.Context)">
</member>
<member name="T:Vc_Role_Access_Controller">
<summary>
Class Vc_Role_Access_Controller
</summary>
</member>
<member name="M:Vc_Role_Access_Controller.#ctor(Pchp.Core.PhpValue)">
<summary>
Vc_Role_Access_Controller constructor.
</summary>
</member>
<member name="M:Vc_Role_Access_Controller.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Vc_Role_Access_Controller.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Vc_Role_Access_Controller constructor.
</summary>
</member>
<member name="T:Vc_Role_Access">
<summary>
Class Vc_Role_Access
</summary>
</member>
<member name="M:Vc_Role_Access.#ctor">
</member>
<member name="M:Vc_Role_Access.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Vc_Role_Access.#ctor(Pchp.Core.Context)">
</member>
<member name="T:Vc_Base">
<summary>
WPBakery Page Builder basic class.
</summary>
</member>
<member name="F:Vc_Base.shortcode_edit_form">
<summary>
Shortcode's edit form.
</summary>

</member>
<member name="F:Vc_Base.templates_panel_editor">
<summary>
Templates management panel editor.
</summary>

</member>
<member name="F:Vc_Base.preset_panel_editor">
<summary>
Presets management panel editor.
</summary>

</member>
<member name="F:Vc_Base.post_admin">
<summary>
Post object for VC in Admin.
</summary>

</member>
<member name="F:Vc_Base.post">
<summary>
Post object for VC.
</summary>

</member>
<member name="F:Vc_Base.shortcodes">
<summary>
List of shortcodes map to VC.
</summary>

</member>
<member name="T:Vc_Manager">
<summary>
Vc starts here. Manager sets mode, adds required wp hooks and loads required object of structure
Manager controls and access to all modules and classes of VC.
</summary>
</member>
<member name="F:Vc_Manager.mode">
<summary>
Set status/mode for VC.
It depends on what functionality is required from vc to work with current page/part of WP.

Possible values:
none - current status is unknown, default mode;
page - simple wp page;
admin_page - wp dashboard;
admin_frontend_editor - WPBakery Page Builder front end editor version;
admin_settings_page - settings page
page_editable - inline version for iframe in front end editor;
</summary>

</member>
<member name="F:Vc_Manager.is_as_theme">
<summary>
Enables WPBakery Page Builder to act as the theme plugin.
</summary>

</member>
<member name="F:Vc_Manager.is_network_plugin">
<summary>
Vc is network plugin or not.
</summary>

</member>
<member name="F:Vc_Manager.paths">
<summary>
List of paths.
</summary>

</member>
<member name="F:Vc_Manager.editor_default_post_types">
<summary>
Default post types where to activate WPBakery Page Builder meta box settings
</summary>

</member>
<member name="F:Vc_Manager.custom_user_templates_dir">
<summary>
Directory name in theme folder where composer should search for alternative templates of the shortcode.
</summary>

</member>
<member name="F:Vc_Manager.disable_updater">
<summary>
Set updater mode
</summary>

</member>
<member name="F:Vc_Manager.factory">
<summary>
Modules and objects instances list
</summary>

</member>
<member name="F:Vc_Manager.components_manifest">
<summary>
File name for components manifest file.
</summary>

</member>
<member name="M:Vc_Manager.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Vc_Manager.#ctor(Pchp.Core.Context)">
<summary>
Constructor loads API functions, defines paths and adds required wp actions
</summary>
</member>
<member name="T:Vc_Mapper">
<summary>
Vc mapper new class. On maintenance
Allows to bind hooks for shortcodes.
</summary>
</member>
<member name="M:Vc_Mapper.#ctor">
</member>
<member name="M:Vc_Mapper.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Vc_Mapper.#ctor(Pchp.Core.Context)">
</member>
<member name="T:Vc_Modifications">
</member>
<member name="M:Vc_Modifications.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="T:Vc_Page">
<summary>
Class Vc_Page
</summary>
</member>
<member name="T:Vc_Pages_Group">
<summary>
Class Vs_Pages_Group Show the groups of the pages likes pages with tabs.
</summary>
</member>
<member name="T:Vc_Post_Admin">
<summary>
Ability to interact with post data.
</summary>
</member>
<member name="T:VcSharedLibrary">
</member>
<member name="T:Vc_Sort">
<summary>
Class Vc_Sort
</summary>
</member>
<member name="F:Vc_Sort.data">
<summary>
- sorting data
</summary>
<value>array</value>
</member>
<member name="F:Vc_Sort.key">
<summary>
- key for search
</summary>
<value>string</value>
</member>
<member name="M:Vc_Sort.#ctor(Pchp.Core.PhpValue)">
<param name="data">- array to sort</param>
</member>
<member name="M:Vc_Sort.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Vc_Sort.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
<param name="data">- array to sort</param>
</member>
<member name="T:WPBMap">
<summary>
WPBakery WPBakery Page Builder Main manager.
</summary>
</member>
<member name="T:Vc_Shared_Templates">
<summary>
Class Vc_Shared_Templates
</summary>
</member>
<member name="T:Vc_WP_Import?">
<summary>
Class Vc_WP_Import
</summary>
</member>
<member name="F:Vc_WP_Import?.version">
<summary>
to import from WXR file
</summary>
<value>information</value>
</member>
<member name="T:Vc_WXR_Parser_Plugin">
<summary>
Class Vc_WXR_Parser_Plugin
</summary>
</member>
<member name="M:Vc_WXR_Parser_Plugin.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="T:Vc_WXR_Parser_Regex">
<summary>
WXR Parser that uses regular expressions. Fallback for installs without an XML parser.
</summary>
</member>
<member name="M:Vc_WXR_Parser_Regex.#ctor">
<summary>
Vc_WXR_Parser_Regex constructor.
</summary>
</member>
<member name="M:Vc_WXR_Parser_Regex.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Vc_WXR_Parser_Regex.#ctor(Pchp.Core.Context)">
<summary>
Vc_WXR_Parser_Regex constructor.
</summary>
</member>
<member name="T:Vc_WXR_Parser_SimpleXML">
<summary>
WXR Parser that makes use of the SimpleXML PHP extension.
</summary>
</member>
<member name="T:Vc_WXR_Parser_XML">
<summary>
WXR Parser that makes use of the XML Parser PHP extension.
</summary>
</member>
<member name="T:Vc_WXR_Parser">
<summary>
WordPress Importer class for managing parsing of WXR files.
</summary>
</member>
<member name="T:Vc_Editor_Interface">
</member>
<member name="T:Vc_Render">
</member>
<member name="T:Vc_Vendor_Interface">
</member>
<member name="T:Vc_Backend_Editor">
<summary>
VC backend editor.
This editor is available on default Wp post/page admin edit page. ON admin_init callback adds meta box to
edit page.
</summary>
</member>
<member name="F:Vc_Backend_Editor.post">
<summary>
- stores data about post.
</summary>
<value>bool|string</value>
</member>
<member name="T:Vc_Edit_Form_Fields">
<summary>
Edit form fields builder for shortcode attributes.
</summary>
</member>
<member name="M:Vc_Edit_Form_Fields.#ctor(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Construct Form fields.
</summary>
<param name="tag">- shortcode tag</param>
<param name="atts">- list of attribute assign to the shortcode.</param>
</member>
<member name="M:Vc_Edit_Form_Fields.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Vc_Edit_Form_Fields.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Construct Form fields.
</summary>
<param name="tag">- shortcode tag</param>
<param name="atts">- list of attribute assign to the shortcode.</param>
</member>
<member name="T:Vc_Frontend_Editor">
<summary>
Vc front end editor.
Introduce principles ‘What You See Is What You Get’ into your page building process with our amazing frontend editor.
See how your content will look on the frontend instantly with no additional clicks or switches.
</summary>
</member>
<member name="T:Vc_Navbar_Frontend">
</member>
<member name="M:Vc_Navbar_Frontend.#ctor(WP_Post)">
<param name="post" type="WP_Post"></param>
</member>
<member name="M:Vc_Navbar_Frontend.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Vc_Navbar_Frontend.#ctor(Pchp.Core.Context,WP_Post)">
<param name="post" type="WP_Post"></param>
</member>
<member name="T:Vc_Navbar_Undoredo">
<summary>
Class Vc_Navbar_Undoredo
</summary>
</member>
<member name="M:Vc_Navbar_Undoredo.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="T:Vc_Navbar">
<summary>
Renders navigation bar for Editors.
</summary>
</member>
<member name="M:Vc_Navbar.#ctor(WP_Post)">
<param name="post" type="WP_Post"></param>
</member>
<member name="M:Vc_Navbar.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Vc_Navbar.#ctor(Pchp.Core.Context,WP_Post)">
<param name="post" type="WP_Post"></param>
</member>
<member name="T:Vc_Add_Element_Box">
<summary>
Add element for VC editors with a list of mapped shortcodes.
</summary>
</member>
<member name="F:Vc_Add_Element_Box.show_empty_message">
<summary>
Enable show empty message
</summary>

</member>
<member name="T:Vc_Edit_Layout">
<summary>
Edit row layout
</summary>
</member>
<member name="T:Vc_Post_Settings">
<summary>
Post settings like custom css for page are displayed here.
</summary>
</member>
<member name="M:Vc_Post_Settings.#ctor(Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Post_Settings.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Vc_Post_Settings.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="T:Vc_Preset_Panel_Editor">
<summary>
Class Vc_Preset_Panel_Editor
</summary>
</member>
<member name="T:Vc_Shortcode_Edit_Form">
<summary>
Edit form for shortcodes with ability to manage shortcode attributes in more convenient way.
</summary>
</member>
<member name="T:Vc_Templates_Panel_Editor">
<summary>
Class Vc_Templates_Panel_Editor
</summary>
</member>
<member name="T:Vc_Automap_Model?">
<summary>
Shortcode as model for automapper. Provides crud functionality for storing data for shortcodes that mapped by ATM
</summary>
</member>
<member name="M:Vc_Automap_Model?.#ctor(Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Automap_Model?.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Vc_Automap_Model?.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="T:Vc_Automapper?">
<summary>
Automated shortcode mapping
Automapper adds settings tab for VC settings tabs with ability to map custom shortcodes to VC editors,
if shortcode is not mapped by default or developers haven't done this yet.
No more shortcode copy/paste. Add any third party shortcode to the list of VC menu elements for reuse.
Edit params, values and description.
</summary>
</member>
<member name="M:Vc_Automapper?.#ctor">
</member>
<member name="M:Vc_Automapper?.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Vc_Automapper?.#ctor(Pchp.Core.Context)">
</member>
<member name="T:Vc_License">
<summary>
Manage license
Activation/deactivation is done via support portal and does not use Envato username and
api_key anymore
</summary>
</member>
<member name="T:Vc_Roles">
<summary>
Manage role.
</summary>
</member>
<member name="T:Vc_Settings">
<summary>
Settings page for VC. list of tabs for function composer
Settings page for VC creates menu item in admin menu as subpage of Settings section.
Settings are build with WP settings API and organized as tabs.

List of tabs
1. General Settings - set access rules and allowed content types for editors.
2. Design Options - custom color and spacing editor for VC shortcodes elements.
3. Custom CSS - add custom css to your WP pages.
4. Product License - license key activation for automatic VC updates.
5. My Shortcodes - automated mapping tool for shortcodes.
</summary>
</member>
<member name="T:Vc_Shortcodes_Manager">
</member>
<member name="T:WPBakeryShortCodeFishBones">
<summary>
Class WPBakeryShortCodeFishBones
</summary>
</member>
<member name="M:WPBakeryShortCodeFishBones.#ctor(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCodeFishBones.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:WPBakeryShortCodeFishBones.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="T:WPBakeryVisualComposerAbstract">
<summary>
Class WPBakeryVisualComposerAbstract
</summary>
</member>
<member name="T:WPBakeryShortCode">
<summary>
Class WPBakeryShortCode
</summary>
</member>
<member name="F:WPBakeryShortCode.shortcode">
<summary>
- shortcode tag
</summary>
<value>string</value>
</member>
<member name="T:WPBakeryShortCodesContainer">
<summary>
Class WPBakeryShortCodesContainer
</summary>
</member>
<member name="T:WPBakeryShortCode_Layerslider_Vc">
<summary>
Class WPBakeryShortCode_Layerslider_Vc
</summary>
</member>
<member name="M:WPBakeryShortCode_Layerslider_Vc.#ctor(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Layerslider_Vc.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:WPBakeryShortCode_Layerslider_Vc.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="T:WPBakeryShortCode_Vc_Pageable">
<summary>
Class Vc_Pageable
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Pageable.#ctor(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Pageable.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Pageable.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="T:WPBakeryShortCode_Rev_Slider_Vc">
<summary>
Class WPBakeryShortCode_Rev_Slider_Vc
</summary>
</member>
<member name="M:WPBakeryShortCode_Rev_Slider_Vc.#ctor(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Rev_Slider_Vc.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:WPBakeryShortCode_Rev_Slider_Vc.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="T:WPBakeryShortCode_VC_Accordion_Tab">
<summary>
Class WPBakeryShortCode_VC_Accordion_tab
</summary>
</member>
<member name="M:WPBakeryShortCode_VC_Accordion_Tab.#ctor(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_VC_Accordion_Tab.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:WPBakeryShortCode_VC_Accordion_Tab.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="T:WPBakeryShortCode_Vc_Accordion">
<summary>
WPBakery WPBakery Page Builder shortcodes
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Accordion.#ctor(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Accordion.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Accordion.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="T:WPBakeryShortCode_Vc_Basic_Grid">
<summary>
Class WPBakeryShortCode_Vc_Basic_Grid
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Basic_Grid.#ctor(Pchp.Core.PhpValue)">
<summary>
WPBakeryShortCode_Vc_Basic_Grid constructor.
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Basic_Grid.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Basic_Grid.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
WPBakeryShortCode_Vc_Basic_Grid constructor.
</summary>
</member>
<member name="T:WPBakeryShortCode_Vc_Btn">
<summary>
Class WPBakeryShortCode_Vc_Btn
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Btn.#ctor(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Btn.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Btn.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="T:WPBakeryShortCode_Vc_Button">
<summary>
WPBakery WPBakery Page Builder shortcodes
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Button.#ctor(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Button.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Button.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="T:WPBakeryShortCode_Vc_Button2">
<summary>
WPBakery WPBakery Page Builder shortcodes
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Button2.#ctor(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Button2.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Button2.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="T:WPBakeryShortCode_Vc_Column_Inner">
<summary>
Class WPBakeryShortCode_Vc_Column_Inner
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Column_Inner.#ctor(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Column_Inner.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Column_Inner.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="T:WPBakeryShortCode_Vc_Column_Text">
<summary>
Class WPBakeryShortCode_Vc_Column_Text
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Column_Text.#ctor(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Column_Text.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Column_Text.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="T:WPBakeryShortCode_VC_Column">
<summary>
WPBakery WPBakery Page Builder shortcodes
</summary>
</member>
<member name="M:WPBakeryShortCode_VC_Column.#ctor(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_VC_Column.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:WPBakeryShortCode_VC_Column.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="T:WPBakeryShortCode_Vc_Cta_Button">
<summary>
WPBakery WPBakery Page Builder shortcodes
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Cta_Button.#ctor(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Cta_Button.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Cta_Button.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="T:WPBakeryShortCode_Vc_Cta_Button2">
<summary>
WPBakery WPBakery Page Builder shortcodes
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Cta_Button2.#ctor(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Cta_Button2.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Cta_Button2.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="T:WPBakeryShortCode_Vc_Cta">
</member>
<member name="M:WPBakeryShortCode_Vc_Cta.#ctor(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Cta.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Cta.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="T:WPBakeryShortCode_Vc_Custom_Field">
<summary>
WPBakery WPBakery Page Builder shortcodes
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Custom_Field.#ctor(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Custom_Field.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Custom_Field.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="T:WPBakeryShortCode_Vc_Custom_Heading">
<summary>
Class WPBakeryShortCode_Vc_Custom_heading
</summary>
</member>
<member name="F:WPBakeryShortCode_Vc_Custom_Heading.fields">
<summary>
Defines fields names for google_fonts, font_container and etc
</summary>

</member>
<member name="M:WPBakeryShortCode_Vc_Custom_Heading.#ctor(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Custom_Heading.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Custom_Heading.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="T:WPBakeryShortCode_Vc_Empty_Space">
<summary>
Class WPBakeryShortCode_Vc_Empty_space
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Empty_Space.#ctor(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Empty_Space.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Empty_Space.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="T:WPBakeryShortCode_Vc_Facebook">
<summary>
Class WPBakeryShortCode_Vc_Facebook
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Facebook.#ctor(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Facebook.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Facebook.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="T:WPBakeryShortCode_Vc_Flickr">
<summary>
Class WPBakeryShortCode_Vc_flickr
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Flickr.#ctor(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Flickr.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Flickr.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="T:WPBakeryShortCode_Vc_Gallery">
<summary>
Class WPBakeryShortCode_Vc_gallery
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Gallery.#ctor(Pchp.Core.PhpValue)">
<summary>
WPBakeryShortCode_Vc_gallery constructor.
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Gallery.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Gallery.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
WPBakeryShortCode_Vc_gallery constructor.
</summary>
</member>
<member name="T:WPBakeryShortCode_Vc_Gitem_Animated_Block">
<summary>
Class WPBakeryShortCode_Vc_Gitem_Animated_Block
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Gitem_Animated_Block.#ctor(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Gitem_Animated_Block.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Gitem_Animated_Block.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="T:WPBakeryShortCode_Vc_Gitem_Col">
<summary>
Class WPBakeryShortCode_Vc_Gitem_Col
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Gitem_Col.#ctor(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Gitem_Col.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Gitem_Col.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="T:WPBakeryShortCode_Vc_Gitem_Image">
<summary>
Class WPBakeryShortCode_Vc_Gitem_Image
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Gitem_Image.#ctor(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Gitem_Image.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Gitem_Image.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="T:WPBakeryShortCode_Vc_Gitem_Post_Author">
<summary>
Class WPBakeryShortCode_Vc_Gitem_Post_Author
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Gitem_Post_Author.#ctor(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Gitem_Post_Author.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Gitem_Post_Author.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="T:WPBakeryShortCode_Vc_Gitem_Post_Categories">
<summary>
Class WPBakeryShortCode_Vc_Gitem_Post_Categories
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Gitem_Post_Categories.#ctor(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Gitem_Post_Categories.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Gitem_Post_Categories.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="T:WPBakeryShortCode_Vc_Gitem_Post_Data">
<summary>
Class WPBakeryShortCode_Vc_Gitem_Post_Data
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Gitem_Post_Data.#ctor(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Gitem_Post_Data.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Gitem_Post_Data.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="T:WPBakeryShortCode_Vc_Gitem_Post_Date">
<summary>
Class WPBakeryShortCode_Vc_Gitem_Post_Date
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Gitem_Post_Date.#ctor(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Gitem_Post_Date.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Gitem_Post_Date.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="T:WPBakeryShortCode_Vc_Gitem_Post_Excerpt">
<summary>
Class WPBakeryShortCode_Vc_Gitem_Post_Excerpt
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Gitem_Post_Excerpt.#ctor(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Gitem_Post_Excerpt.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Gitem_Post_Excerpt.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="T:WPBakeryShortCode_Vc_Gitem_Post_Meta">
<summary>
Class WPBakeryShortCode_Vc_Gitem_Post_Meta
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Gitem_Post_Meta.#ctor(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Gitem_Post_Meta.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Gitem_Post_Meta.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="T:WPBakeryShortCode_Vc_Gitem_Post_Title">
<summary>
Class WPBakeryShortCode_Vc_Gitem_Post_title
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Gitem_Post_Title.#ctor(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Gitem_Post_Title.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Gitem_Post_Title.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="T:WPBakeryShortCode_Vc_Gitem_Row">
<summary>
Class WPBakeryShortCode_Vc_Gitem_Row
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Gitem_Row.#ctor(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Gitem_Row.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Gitem_Row.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="T:WPBakeryShortCode_Vc_Gitem_Zone_A">
<summary>
Class WPBakeryShortCode_Vc_Gitem_Zone_A
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Gitem_Zone_A.#ctor(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Gitem_Zone_A.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Gitem_Zone_A.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="T:WPBakeryShortCode_Vc_Gitem_Zone_B">
<summary>
Class WPBakeryShortCode_Vc_Gitem_Zone_B
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Gitem_Zone_B.#ctor(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Gitem_Zone_B.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Gitem_Zone_B.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="T:WPBakeryShortCode_Vc_Gitem_Zone_C">
<summary>
Class WPBakeryShortCode_Vc_Gitem_Zone_C
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Gitem_Zone_C.#ctor(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Gitem_Zone_C.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Gitem_Zone_C.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="T:WPBakeryShortCode_Vc_Gitem_Zone">
<summary>
Class WPBakeryShortCode_Vc_Gitem_Zone
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Gitem_Zone.#ctor(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Gitem_Zone.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Gitem_Zone.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="T:WPBakeryShortCode_Vc_Gitem">
<summary>
Class WPBakeryShortCode_Vc_Gitem
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Gitem.#ctor(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Gitem.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Gitem.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="T:WPBakeryShortCode_Vc_Gmaps">
<summary>
Class WPBakeryShortCode_Vc_Gmaps
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Gmaps.#ctor(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Gmaps.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Gmaps.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="T:WPBakeryShortCode_Vc_GooglePlus">
<summary>
Class WPBakeryShortCode_Vc_GooglePlus
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_GooglePlus.#ctor(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_GooglePlus.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_GooglePlus.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="T:WPBakeryShortCode_Vc_Gutenberg">
<summary>
Class WPBakeryShortCode_Vc_Gutenberg
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Gutenberg.#ctor(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Gutenberg.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Gutenberg.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="T:WPBakeryShortCode_Vc_Hoverbox">
<summary>
Class WPBakeryShortCode_Vc_Hoverbox
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Hoverbox.#ctor(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Hoverbox.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Hoverbox.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="T:WPBakeryShortCode_Vc_Icon">
<summary>
Class WPBakeryShortCode_Vc_Icon
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Icon.#ctor(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Icon.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Icon.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="T:WPBakeryShortCode_Vc_Images_Carousel">
<summary>
Class WPBakeryShortCode_Vc_images_carousel
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Images_Carousel.#ctor(Pchp.Core.PhpValue)">
<summary>
WPBakeryShortCode_Vc_images_carousel constructor.
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Images_Carousel.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Images_Carousel.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
WPBakeryShortCode_Vc_images_carousel constructor.
</summary>
</member>
<member name="T:WPBakeryShortCode_Vc_Line_Chart">
<summary>
Class WPBakeryShortCode_Vc_Line_Chart
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Line_Chart.#ctor(Pchp.Core.PhpValue)">
<summary>
WPBakeryShortCode_Vc_Line_Chart constructor.
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Line_Chart.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Line_Chart.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
WPBakeryShortCode_Vc_Line_Chart constructor.
</summary>
</member>
<member name="T:WPBakeryShortCode_Vc_Masonry_Grid">
<summary>
Class WPBakeryShortCode_Vc_Masonry_Grid
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Masonry_Grid.#ctor(Pchp.Core.PhpValue)">
<summary>
WPBakeryShortCode_Vc_Basic_Grid constructor.
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Masonry_Grid.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Masonry_Grid.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
WPBakeryShortCode_Vc_Basic_Grid constructor.
</summary>
</member>
<member name="T:WPBakeryShortCode_Vc_Masonry_Media_Grid">
<summary>
Class WPBakeryShortCode_Vc_Masonry_Media_Grid
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Masonry_Media_Grid.#ctor(Pchp.Core.PhpValue)">
<summary>
WPBakeryShortCode_Vc_Media_Grid constructor.
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Masonry_Media_Grid.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Masonry_Media_Grid.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
WPBakeryShortCode_Vc_Media_Grid constructor.
</summary>
</member>
<member name="T:WPBakeryShortCode_Vc_Media_Grid">
<summary>
Class WPBakeryShortCode_Vc_Media_Grid
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Media_Grid.#ctor(Pchp.Core.PhpValue)">
<summary>
WPBakeryShortCode_Vc_Media_Grid constructor.
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Media_Grid.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Media_Grid.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
WPBakeryShortCode_Vc_Media_Grid constructor.
</summary>
</member>
<member name="T:WPBakeryShortCode_Vc_Message">
<summary>
Class WPBakeryShortCode_Vc_Message
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Message.#ctor(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Message.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Message.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="T:WPBakeryShortCode_Vc_Pie">
<summary>
Class WPBakeryShortCode_Vc_Pie
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Pie.#ctor(Pchp.Core.PhpValue)">
<summary>
WPBakeryShortCode_Vc_Pie constructor.
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Pie.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Pie.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
WPBakeryShortCode_Vc_Pie constructor.
</summary>
</member>
<member name="T:WPBakeryShortCode_Vc_Pinterest">
<summary>
Class WPBakeryShortCode_Vc_Pinterest
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Pinterest.#ctor(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Pinterest.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Pinterest.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="T:WPBakeryShortCode_Vc_Posts_Slider">
<summary>
Class WPBakeryShortCode_Vc_Posts_slider
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Posts_Slider.#ctor(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Posts_Slider.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Posts_Slider.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="T:WPBakeryShortCode_Vc_Progress_Bar">
<summary>
Class WPBakeryShortCode_Vc_Progress_Bar
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Progress_Bar.#ctor(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Progress_Bar.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Progress_Bar.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="T:WPBakeryShortCode_Vc_Raw_Html">
</member>
<member name="M:WPBakeryShortCode_Vc_Raw_Html.#ctor(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Raw_Html.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Raw_Html.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="T:WPBakeryShortCode_Vc_Raw_Js">
<summary>
Class WPBakeryShortCode_Vc_Raw_Js
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Raw_Js.#ctor(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Raw_Js.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Raw_Js.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="T:WPBakeryShortCode_Vc_Round_Chart">
<summary>
Class WPBakeryShortCode_Vc_Round_Chart
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Round_Chart.#ctor(Pchp.Core.PhpValue)">
<summary>
WPBakeryShortCode_Vc_Round_Chart constructor.
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Round_Chart.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Round_Chart.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
WPBakeryShortCode_Vc_Round_Chart constructor.
</summary>
</member>
<member name="T:WPBakeryShortCode_Vc_Row_Inner">
<summary>
Class WPBakeryShortCode_Vc_Row_Inner
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Row_Inner.#ctor(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Row_Inner.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Row_Inner.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="T:WPBakeryShortCode_Vc_Row">
<summary>
WPBakery WPBakery Page Builder row
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Row.#ctor(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Row.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Row.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="T:WPBakeryShortCode_Vc_Section">
<summary>
WPBakery WPBakery Page Builder section
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Section.#ctor(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Section.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Section.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="T:WPBakeryShortCode_Vc_Separator">
<summary>
Class WPBakeryShortCode_Vc_Separator
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Separator.#ctor(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Separator.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Separator.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="T:WPBakeryShortCode_Vc_Single_Image">
<summary>
Class WPBakeryShortCode_Vc_Single_image
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Single_Image.#ctor(Pchp.Core.PhpValue)">
<summary>
WPBakeryShortCode_Vc_Single_image constructor.
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Single_Image.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Single_Image.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
WPBakeryShortCode_Vc_Single_image constructor.
</summary>
</member>
<member name="T:WPBakeryShortCode_Vc_Tab">
<summary>
Class WPBakeryShortCode_Vc_Tab
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Tab.#ctor(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Tab.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Tab.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="T:WPBakeryShortCode_Vc_Tabs">
<summary>
Class WPBakeryShortCode_Vc_Tabs
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Tabs.#ctor(Pchp.Core.PhpValue)">
<summary>
WPBakeryShortCode_Vc_Tabs constructor.
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Tabs.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Tabs.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
WPBakeryShortCode_Vc_Tabs constructor.
</summary>
</member>
<member name="T:WPBakeryShortCode_Vc_Text_Separator">
<summary>
Class WPBakeryShortCode_Vc_Text_separator
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Text_Separator.#ctor(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Text_Separator.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Text_Separator.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="T:WPBakeryShortCode_Vc_Toggle">
<summary>
Class WPBakeryShortCode_Vc_Toggle
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Toggle.#ctor(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Toggle.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Toggle.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="T:WPBakeryShortCode_Vc_Tour">
<summary>
Class WPBakeryShortCode_Vc_Tour
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Tour.#ctor(Pchp.Core.PhpValue)">
<summary>
WPBakeryShortCode_Vc_Tabs constructor.
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Tour.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Tour.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
WPBakeryShortCode_Vc_Tabs constructor.
</summary>
</member>
<member name="T:WPBakeryShortCode_Vc_Tta_Accordion">
<summary>
Class WPBakeryShortCode_Vc_Tta_Accordion
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Tta_Accordion.#ctor(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Tta_Accordion.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Tta_Accordion.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="T:WPBakeryShortCode_Vc_Tta_Pageable">
<summary>
Class WPBakeryShortCode_Vc_Tta_Pageable
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Tta_Pageable.#ctor(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Tta_Pageable.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Tta_Pageable.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="T:WPBakeryShortCode_Vc_Tta_Section">
<summary>
Class WPBakeryShortCode_Vc_Tta_Section
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Tta_Section.#ctor(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Tta_Section.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Tta_Section.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="T:WPBakeryShortCode_Vc_Tta_Tabs">
<summary>
Class WPBakeryShortCode_Vc_Tta_Tabs
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Tta_Tabs.#ctor(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Tta_Tabs.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Tta_Tabs.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="T:WPBakeryShortCode_Vc_Tta_Tour">
<summary>
Class WPBakeryShortCode_Vc_Tta_Tour
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Tta_Tour.#ctor(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Tta_Tour.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Tta_Tour.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="T:WPBakeryShortCode_Vc_TweetMeMe">
<summary>
Class WPBakeryShortCode_Vc_TweetMeMe
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_TweetMeMe.#ctor(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_TweetMeMe.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_TweetMeMe.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="T:WPBakeryShortCode_Vc_Twitter">
<summary>
Class WPBakeryShortCode_Vc_Twitter
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Twitter.#ctor(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Twitter.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Twitter.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="T:WPBakeryShortCode_Vc_Video">
<summary>
Class WPBakeryShortCode_Vc_Video
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Video.#ctor(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Video.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Video.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="T:WPBakeryShortCode_Vc_Widget_Sidebar">
<summary>
Class WPBakeryShortCode_Vc_Widget_sidebar
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Widget_Sidebar.#ctor(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Widget_Sidebar.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Widget_Sidebar.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="T:WPBakeryShortCode_Vc_Zigzag">
<summary>
Class WPBakeryShortCode_Vc_Zigzag
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Zigzag.#ctor(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Zigzag.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Zigzag.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="T:WPBakeryShortCode_Vc_Wp_Text">
<summary>
Class WPBakeryShortCode_Vc_Wp_Text
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Wp_Text.#ctor(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Wp_Text.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Wp_Text.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="T:Vc_Updater">
<summary>
Vc updating manager.
</summary>
</member>
<member name="F:Vc_Updater.download_link_url">
<summary>
Proxy URL that returns real download link
</summary>

</member>
<member name="T:Vc_Updating_Manager">
<summary>
Manage update messages and Plugins info for VC in default WordPress plugins list.
</summary>
</member>
<member name="F:Vc_Updating_Manager.current_version">
<summary>
The plugin current version
</summary>

</member>
<member name="F:Vc_Updating_Manager.update_path">
<summary>
The plugin remote update path
</summary>

</member>
<member name="F:Vc_Updating_Manager.plugin_slug">
<summary>
Plugin Slug (plugin_directory/plugin_file.php)
</summary>

</member>
<member name="F:Vc_Updating_Manager.slug">
<summary>
Plugin name (plugin_file)
</summary>

</member>
<member name="F:Vc_Updating_Manager.url">
<summary>
Link to download VC.
</summary>

</member>
<member name="M:Vc_Updating_Manager.#ctor(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Initialize a new instance of the WordPress Auto-Update class
</summary>
<param name="current_version" type="string"></param>
<param name="update_path" type="string"></param>
<param name="plugin_slug" type="string"></param>
</member>
<member name="M:Vc_Updating_Manager.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Vc_Updating_Manager.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Initialize a new instance of the WordPress Auto-Update class
</summary>
<param name="current_version" type="string"></param>
<param name="update_path" type="string"></param>
<param name="plugin_slug" type="string"></param>
</member>
<member name="T:WPBakeryShortCode_Vc_Acf">
<summary>
Class WPBakeryShortCode_Vc_Acf
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Acf.#ctor(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Acf.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Acf.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="T:Vc_Gitem_Acf_Shortcode">
<summary>
Class Vc_Gitem_Acf_Shortcode
</summary>
</member>
<member name="M:Vc_Gitem_Acf_Shortcode.#ctor(Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Gitem_Acf_Shortcode.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Vc_Gitem_Acf_Shortcode.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="T:Vc_Vendor_AdvancedCustomFields">
<summary>
Vendor class for plugin advanced custom fields,
Needed to apply extra js when backend/frontend editor rendered.
Class Vc_Vendor_AdvancedCustomFields
</summary>
</member>
<member name="T:Vc_Vendor_ContactForm7">
<summary>
Contact form7 vendor
=======
Plugin Contact form 7 vendor
To fix issues when shortcode doesn't exists in frontend editor. #1053, #1054 etc.
</summary>
</member>
<member name="T:Vc_Vendor_Jwplayer">
<summary>
JWPLayer loader.
</summary>
</member>
<member name="T:Vc_Vendor_Layerslider">
<summary>
LayerSlider loader.
Adds layerSlider shortcode to WPBakery Page Builder and fixes issue in frontend editor
</summary>
</member>
<member name="T:Vc_Vendor_Mqtranslate">
<summary>
Class Vc_Vendor_Mqtranslate extends class Vc_Vendor_Qtranslate::__construct
</summary>
</member>
<member name="T:Vc_Vendor_NinjaForms">
<summary>
Ninja Forms vendor
</summary>
</member>
<member name="T:Vc_Vendor_QtranslateX">
<summary>
Class Vc_Vendor_QtranslateX
</summary>
</member>
<member name="T:Vc_Vendor_Qtranslate">
<summary>
Class Vc_Vendor_Qtranslate
</summary>
</member>
<member name="T:Vc_Vendor_Revslider">
<summary>
RevSlider loader.
</summary>
</member>
<member name="T:Vc_Vendor_Woocommerce">
<summary>
Class Vc_Vendor_Woocommerce
</summary>
</member>
<member name="T:Vc_WooCommerce_NotEditable">
<summary>
Removes EDIT button in backend and frontend editor
Class Vc_WooCommerce_NotEditable
</summary>
</member>
<member name="M:Vc_WooCommerce_NotEditable.#ctor(Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_WooCommerce_NotEditable.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Vc_WooCommerce_NotEditable.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="T:Vc_Vendor_WPML">
<summary>
Class Vc_Vendor_WPML
</summary>
</member>
<member name="T:Vc_Vendor_YoastSeo">
<summary>
Class Vc_Vendor_YoastSeo
</summary>
</member>
<member name="F:Vc_Vendor_YoastSeo.parsedContent">
<summary>
Created to improve yoast multiply calling wpseo_pre_analysis_post_content filter.
</summary>

</member>
<member name="M:Vc_Vendor_YoastSeo.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="T:Vc_Gitem_Woocommerce_Shortcode">
<summary>
Class Vc_Gitem_Woocommerce_Shortcode
</summary>
</member>
<member name="M:Vc_Gitem_Woocommerce_Shortcode.#ctor(Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Gitem_Woocommerce_Shortcode.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Vc_Gitem_Woocommerce_Shortcode.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="T:Vc_Color_Helper">
<summary>
Author: Arlo Carreon &lt;http://arlocarreon.com&gt;
Info: http://mexitek.github.io/phpColors/
License: http://arlo.mit-license.org/
</summary>
</member>
<member name="F:Vc_Color_Helper.hex">
<summary>
A color utility that helps manipulate HEX colors
</summary>

</member>
<member name="F:Vc_Color_Helper.DEFAULT_ADJUST">
<summary>
Auto darkens/lightens by 10% for sexily-subtle gradients.
Set this to FALSE to adjust automatic shade to be between given color
and black (for darken) or white (for lighten)
</summary>

</member>
<member name="M:Vc_Color_Helper.#ctor(Pchp.Core.PhpValue)">
<summary>
Instantiates the class with a HEX value
</summary>
<param name="hex" type="string"></param>
<exception cref="Exception">"Bad color format".</exception>
</member>
<member name="M:Vc_Color_Helper.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Vc_Color_Helper.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Instantiates the class with a HEX value
</summary>
<param name="hex" type="string"></param>
<exception cref="Exception">"Bad color format".</exception>
</member>
<member name="T:vcImageFilter">
</member>
<member name="M:vcImageFilter.#ctor(Pchp.Core.PhpAlias)">
<summary>
run constructor
</summary>
</member>
<member name="M:vcImageFilter.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:vcImageFilter.#ctor(Pchp.Core.Context,Pchp.Core.PhpAlias)">
<summary>
run constructor
</summary>
</member>
<member name="T:Vc_ParamAnimation">
<summary>
Class Vc_ParamAnimation
For working with animations
array(
'type' =&gt; 'animation_style',
'heading' =&gt; esc_html__( 'Animation', 'js_composer' ),
'param_name' =&gt; 'animation',
),
Preview in https://daneden.github.io/animate.css/
</summary>
</member>
<member name="F:Vc_ParamAnimation.settings">
<summary>
parameter settings from vc_map
</summary>
<value>array</value>
</member>
<member name="F:Vc_ParamAnimation.value">
<summary>
parameter value
</summary>
<value>string</value>
</member>
<member name="M:Vc_ParamAnimation.#ctor(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Set variables and register animate-css asset
</summary>
</member>
<member name="M:Vc_ParamAnimation.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Vc_ParamAnimation.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Set variables and register animate-css asset
</summary>
</member>
<member name="T:Vc_AutoComplete">
<summary>
Class Vc_AutoComplete
Param type 'autocomplete'
Used to create input field with predefined or ajax values suggestions.
See usage example in bottom of this file.
</summary>
</member>
<member name="F:Vc_AutoComplete.settings">
<summary>
- param settings
</summary>
<value>array</value>
</member>
<member name="F:Vc_AutoComplete.value">
<summary>
- current param value (if multiple it is splitted by ',' comma to make array)
</summary>
<value>string</value>
</member>
<member name="F:Vc_AutoComplete.tag">
<summary>
- shortcode name(base)
</summary>
<value>string</value>
</member>
<member name="M:Vc_AutoComplete.#ctor(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<param name="settings" type="array">- param settings (from vc_map)</param>
<param name="value" type="string">- current param value</param>
<param name="tag" type="string">- shortcode name(base)</param>
</member>
<member name="M:Vc_AutoComplete.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Vc_AutoComplete.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<param name="settings" type="array">- param settings (from vc_map)</param>
<param name="value" type="string">- current param value</param>
<param name="tag" type="string">- shortcode name(base)</param>
</member>
<member name="T:Vc_Column_Offset">
</member>
<member name="M:Vc_Column_Offset.#ctor(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Column_Offset.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Vc_Column_Offset.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="T:WPBakeryVisualComposerCssEditor?">
<summary>
Class WPBakeryVisualComposerCssEditor
</summary>
</member>
<member name="T:Vc_Font_Container">
<summary>
Class Vc_Font_Container
</summary>
</member>
<member name="T:Vc_Google_Fonts">
<summary>
Class Vc_Google_Fonts
</summary>
</member>
<member name="T:Vc_Gutenberg_Param">
<summary>
Class Vc_Gutenberg_Param
</summary>
</member>
<member name="M:Vc_Gutenberg_Param.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="T:Vc_IconPicker">
<summary>
Class Vc_IconPicker
</summary>
</member>
<member name="F:Vc_IconPicker.settings">
<summary>
- save current param data array from vc_map
</summary>
<value>array</value>
</member>
<member name="F:Vc_IconPicker.value">
<summary>
- save a current field value
</summary>
<value>string</value>
</member>
<member name="F:Vc_IconPicker.source">
<summary>
- optional, can be used as self source from self array., you
can pass it also with filter see Vc_IconPicker::setDefaults
</summary>
<value>array</value>
</member>
<member name="M:Vc_IconPicker.#ctor(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<param name="settings">- param field data array</param>
<param name="value">- param field value</param>
</member>
<member name="M:Vc_IconPicker.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Vc_IconPicker.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<param name="settings">- param field data array</param>
<param name="value">- param field value</param>
</member>
<member name="T:VcLoopQueryBuilder">
<summary>
Parses loop settings and creates WP_Query according to manual
</summary>
</member>
<member name="M:VcLoopQueryBuilder.#ctor(Pchp.Core.PhpValue)">
</member>
<member name="M:VcLoopQueryBuilder.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:VcLoopQueryBuilder.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="T:VcLoopSettings">
<summary>
Class VcLoopSettings
</summary>
</member>
<member name="M:VcLoopSettings.#ctor(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<param name="settings" type="array"></param>
</member>
<member name="M:VcLoopSettings.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:VcLoopSettings.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<param name="settings" type="array"></param>
</member>
<member name="T:VcLoopSuggestions">
<summary>
Suggestion list for wp_query field
Class VcLoopSuggestions
</summary>
</member>
<member name="M:VcLoopSuggestions.#ctor(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:VcLoopSuggestions.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:VcLoopSuggestions.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="T:WpbakeryShortcodeParams">
<summary>
Shortcode params class allows to create new params types.
class WpbakeryShortcodeParams
</summary>
</member>
<member name="T:Vc_ParamGroup_Edit_Form_Fields">
<summary>
Class Vc_ParamGroup_Edit_Form_Fields
</summary>
</member>
<member name="M:Vc_ParamGroup_Edit_Form_Fields.#ctor(Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_ParamGroup_Edit_Form_Fields.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Vc_ParamGroup_Edit_Form_Fields.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="T:Vc_ParamGroup">
<summary>
Class Vc_ParamGroup
</summary>
</member>
<member name="M:Vc_ParamGroup.#ctor(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_ParamGroup.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Vc_ParamGroup.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="T:Vc_Grid_Element">
<summary>
Class Vc_Grid_Element
</summary>
</member>
<member name="T:Vc_Grid_Item">
<summary>
Class Vc_Grid_Item to build grid item.
</summary>
</member>
<member name="T:WpbMap_Grid_Item">
<summary>
Class WpbMap_Grid_Item
</summary>
</member>
<member name="T:Vc_Grid_Item_Editor">
<summary>
Class Vc_Grid_Item_Editor
</summary>
</member>
<member name="T:Vc_Grid_Item_Preview">
<summary>
Class Vc_Grid_Item_Preview
</summary>
</member>
<member name="T:Vc_Navbar_Grid_Item">
<summary>
Renders navigation bar for Editors.
</summary>
</member>
<member name="M:Vc_Navbar_Grid_Item.#ctor(WP_Post)">
<param name="post" type="WP_Post"></param>
</member>
<member name="M:Vc_Navbar_Grid_Item.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:Vc_Navbar_Grid_Item.#ctor(Pchp.Core.Context,WP_Post)">
<param name="post" type="WP_Post"></param>
</member>
<member name="T:Vc_Add_Element_Box_Grid_Item">
<summary>
Add element for VC editors with a list of mapped shortcodes for gri item constructor.
</summary>
</member>
<member name="T:Vc_Templates_Editor_Grid_Item">
<summary>
Class Vc_Templates_Editor_Grid_Item
</summary>
</member>
<member name="M:Vc_Templates_Editor_Grid_Item.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="T:Manual__IP_Course?">
</member>
<member name="T:TGM_Plugin_Activation?">
<summary>
Automatic plugin installation and activation library.
Creates a way to automatically install and activate plugins from within themes.
The plugins can be either bundled, downloaded from the WordPress
Plugin Repository or downloaded from another external source.
</summary>
</member>
<member name="F:TGM_Plugin_Activation?.plugins">
<summary>
Holds arrays of plugin details.
</summary>

</member>
<member name="F:TGM_Plugin_Activation?.sort_order">
<summary>
Holds arrays of plugin names to use to sort the plugins array.
</summary>

</member>
<member name="F:TGM_Plugin_Activation?.has_forced_activation">
<summary>
Whether any plugins have the 'force_activation' setting set to true.
</summary>

</member>
<member name="F:TGM_Plugin_Activation?.has_forced_deactivation">
<summary>
Whether any plugins have the 'force_deactivation' setting set to true.
</summary>

</member>
<member name="F:TGM_Plugin_Activation?.id">
<summary>
Name of the unique ID to hash notices.
</summary>

</member>
<member name="F:TGM_Plugin_Activation?.menu">
<summary>
Name of the query-string argument for the admin page.
</summary>

</member>
<member name="F:TGM_Plugin_Activation?.parent_slug">
<summary>
Parent menu file slug.
</summary>

</member>
<member name="F:TGM_Plugin_Activation?.capability">
<summary>
Capability needed to view the plugin installation menu item.
</summary>

</member>
<member name="F:TGM_Plugin_Activation?.default_path">
<summary>
Default absolute path to folder containing bundled plugin zip files.
</summary>

</member>
<member name="F:TGM_Plugin_Activation?.has_notices">
<summary>
Flag to show admin notices or not.
</summary>

</member>
<member name="F:TGM_Plugin_Activation?.dismissable">
<summary>
Flag to determine if the user can dismiss the notice nag.
</summary>

</member>
<member name="F:TGM_Plugin_Activation?.dismiss_msg">
<summary>
Message to be output above nag notice if dismissable is false.
</summary>

</member>
<member name="F:TGM_Plugin_Activation?.is_automatic">
<summary>
Flag to set automatic activation of plugins. Off by default.
</summary>

</member>
<member name="F:TGM_Plugin_Activation?.message">
<summary>
Optional message to display before the plugins table.
</summary>

</member>
<member name="F:TGM_Plugin_Activation?.strings">
<summary>
Holds configurable array of strings.
Default values are added in the constructor.
</summary>

</member>
<member name="F:TGM_Plugin_Activation?.wp_version">
<summary>
Holds the version of WordPress.
</summary>

</member>
<member name="F:TGM_Plugin_Activation?.page_hook">
<summary>
Holds the hook name for the admin page.
</summary>

</member>
<member name="F:TGM_Plugin_Activation?.TGMPA_VERSION">
<summary>
TGMPA version number.
</summary>

</member>
<member name="F:TGM_Plugin_Activation?.WP_REPO_REGEX">
<summary>
Regular expression to test if a URL is a WP plugin repo URL.
</summary>

</member>
<member name="F:TGM_Plugin_Activation?.IS_URL_REGEX">
<summary>
Arbitrary regular expression to test if a string starts with a URL.
</summary>

</member>
<member name="M:TGM_Plugin_Activation?.#ctor">
<summary>
Adds a reference of this object to $instance, populates default strings,
does the tgmpa_init action hook, and hooks in the interactions to init.
{@internal This method should be `protected`, but as too many TGMPA implementations
haven't upgraded beyond v2.3.6 yet, this gives backward compatibility issues.
Reverted back to public for the time being.}}
</summary>
</member>
<member name="M:TGM_Plugin_Activation?.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:TGM_Plugin_Activation?.#ctor(Pchp.Core.Context)">
<summary>
Adds a reference of this object to $instance, populates default strings,
does the tgmpa_init action hook, and hooks in the interactions to init.
{@internal This method should be `protected`, but as too many TGMPA implementations
haven't upgraded beyond v2.3.6 yet, this gives backward compatibility issues.
Reverted back to public for the time being.}}
</summary>
</member>
<member name="T:TGMPA_List_Table?">
<summary>
List table class for handling plugins.
Extends the WP_List_Table class to provide a future-compatible
way of listing out all required/recommended plugins.

Gives users an interface similar to the Plugin Administration
area with similar (albeit stripped down) capabilities.

This class also allows for the bulk install of plugins.
</summary>
</member>
<member name="F:TGMPA_List_Table?.tgmpa">
<summary>
TGMPA instance.
</summary>

</member>
<member name="F:TGMPA_List_Table?.view_context">
<summary>
The currently chosen view.
</summary>

</member>
<member name="F:TGMPA_List_Table?.view_totals">
<summary>
The plugin counts for the various views.
</summary>

</member>
<member name="M:TGMPA_List_Table?.#ctor">
<summary>
References parent constructor and sets defaults for class.
</summary>
</member>
<member name="M:TGMPA_List_Table?.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:TGMPA_List_Table?.#ctor(Pchp.Core.Context)">
<summary>
References parent constructor and sets defaults for class.
</summary>
</member>
<member name="T:TGM_Bulk_Installer?">
<summary>
Hack: Prevent TGMPA v2.4.1- bulk installer class from being loaded if 2.4.1- is loaded after 2.5+.
</summary>
</member>
<member name="T:TGM_Bulk_Installer_Skin?">
<summary>
Hack: Prevent TGMPA v2.4.1- bulk installer skin class from being loaded if 2.4.1- is loaded after 2.5+.
</summary>
</member>
<member name="T:TGMPA_Bulk_Installer?">
<summary>
Installer class to handle bulk plugin installations.
Extends WP_Upgrader and customizes to suit the installation of multiple
plugins.
</summary>
</member>
<member name="F:TGMPA_Bulk_Installer?.result">
<summary>
Holds result of bulk plugin installation.
</summary>

</member>
<member name="F:TGMPA_Bulk_Installer?.bulk">
<summary>
Flag to check if bulk installation is occurring or not.
</summary>

</member>
<member name="F:TGMPA_Bulk_Installer?.tgmpa">
<summary>
TGMPA instance
</summary>

</member>
<member name="F:TGMPA_Bulk_Installer?.clear_destination">
<summary>
Whether or not the destination directory needs to be cleared ( = on update).
</summary>

</member>
<member name="M:TGMPA_Bulk_Installer?.#ctor(Pchp.Core.PhpValue)">
<summary>
References parent constructor and sets defaults for class.
</summary>
<param name="skin" type="\Bulk_Upgrader_Skin|null">Installer skin.</param>
</member>
<member name="M:TGMPA_Bulk_Installer?.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:TGMPA_Bulk_Installer?.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
References parent constructor and sets defaults for class.
</summary>
<param name="skin" type="\Bulk_Upgrader_Skin|null">Installer skin.</param>
</member>
<member name="T:TGMPA_Bulk_Installer_Skin?">
<summary>
Installer skin to set strings for the bulk plugin installations..
Extends Bulk_Upgrader_Skin and customizes to suit the installation of multiple
plugins.
</summary>
</member>
<member name="F:TGMPA_Bulk_Installer_Skin?.plugin_info">
<summary>
Holds plugin info for each individual plugin installation.
</summary>

</member>
<member name="F:TGMPA_Bulk_Installer_Skin?.plugin_names">
<summary>
Holds names of plugins that are undergoing bulk installations.
</summary>

</member>
<member name="F:TGMPA_Bulk_Installer_Skin?.i">
<summary>
Integer to use for iteration through each plugin installation.
</summary>

</member>
<member name="F:TGMPA_Bulk_Installer_Skin?.tgmpa">
<summary>
TGMPA instance
</summary>

</member>
<member name="M:TGMPA_Bulk_Installer_Skin?.#ctor(Pchp.Core.PhpValue)">
<summary>
Constructor. Parses default args with new ones and extracts them for use.
</summary>
<param name="args" type="array">Arguments to pass for use within the class.</param>
</member>
<member name="M:TGMPA_Bulk_Installer_Skin?.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:TGMPA_Bulk_Installer_Skin?.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Constructor. Parses default args with new ones and extracts them for use.
</summary>
<param name="args" type="array">Arguments to pass for use within the class.</param>
</member>
<member name="T:TGMPA_Utils?">
<summary>
Generic utilities for TGMPA.
All methods are static, poor-dev name-spacing class wrapper.

Class was called TGM_Utils in 2.5.0 but renamed TGMPA_Utils in 2.5.1 as this was conflicting with Soliloquy.
</summary>
</member>
<member name="T:WPBakeryShortCode_Manual_Service_Table_Section?">
</member>
<member name="M:WPBakeryShortCode_Manual_Service_Table_Section?.#ctor(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Manual_Service_Table_Section?.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:WPBakeryShortCode_Manual_Service_Table_Section?.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="T:WPBakeryShortCode_Manual_Pricing_Table_Section?">
</member>
<member name="M:WPBakeryShortCode_Manual_Pricing_Table_Section?.#ctor(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Manual_Pricing_Table_Section?.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:WPBakeryShortCode_Manual_Pricing_Table_Section?.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="T:WPBakeryShortCode_Manual_Service_Option?">
</member>
<member name="M:WPBakeryShortCode_Manual_Service_Option?.#ctor(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Manual_Service_Option?.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:WPBakeryShortCode_Manual_Service_Option?.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="T:WPBakeryShortCode_Manual_Pricing_Option?">
</member>
<member name="M:WPBakeryShortCode_Manual_Pricing_Option?.#ctor(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Manual_Pricing_Option?.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:WPBakeryShortCode_Manual_Pricing_Option?.#ctor(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="T:manual_custom_kb_cat">
<summary>
Add Custom Widget
</summary>
</member>
<member name="M:manual_custom_kb_cat.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="T:manual_faq">
</member>
<member name="M:manual_faq.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="T:manual_kbse">
</member>
<member name="M:manual_kbse.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="T:manual_kb_articles">
</member>
<member name="M:manual_kb_articles.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="T:manual_kb_cat_article_single_pg">
</member>
<member name="M:manual_kb_cat_article_single_pg.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="T:manual_doccat">
</member>
<member name="M:manual_doccat.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="T:manual_doc_articles">
</member>
<member name="M:manual_doc_articles.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="T:manual_auto_generate_post_toc">
</member>
<member name="M:manual_auto_generate_post_toc.#ctor(Pchp.Core.Context,Pchp.Core.DummyFieldsOnlyCtor)">
<summary>
Initializes the class without calling its '__construct' method.
</summary>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/elementor.elementor_php.elementor_load_plugin_textdomain(Pchp.Core.Context)">
<summary>
Load Elementor textdomain.
Load gettext translate for Elementor text domain.
</summary>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/elementor.elementor_php.elementor_fail_php_version(Pchp.Core.Context)">
<summary>
Elementor admin notice for minimum PHP version.
Warning when the site doesn't have the minimum required PHP version.
</summary>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/elementor.elementor_php.elementor_fail_wp_version(Pchp.Core.Context)">
<summary>
Elementor admin notice for minimum WordPress version.
Warning when the site doesn't have the minimum required WordPress version.
</summary>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/includes.hook_php.manual__edit_tgmpa_notice_action_links(Pchp.Core.Context,Pchp.Core.PhpValue)">
<param name="action_links" type="array">The action link(s) for a required plugin.</param>
<returns>The action link(s) for a required plugin.</returns>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/includes.hook_php.manual_remove_redux_messages(Pchp.Core.Context)">
<summary>
REMOVE REDUX MESSAGES
</summary>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/config/grids.vc-grids-functions_php.vc_autocomplete_taxonomies_field_render(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/config/grids.vc-grids-functions_php.vc_autocomplete_taxonomies_field_search(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/config/grids.vc-grids-functions_php.vc_search_by_title_only(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/config/grids.vc-grids-functions_php.vc_include_field_search(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/config/grids.vc-grids-functions_php.vc_include_field_render(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/config/grids.vc-grids-functions_php.vc_exclude_field_search(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/config/grids.vc-grids-functions_php.vc_exclude_field_render(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/config.lean-map_php.vc_add_css_animation(Pchp.Core.Context)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/autoload.bc-access-rules-4_8_php.vc_bc_access_rule_48_post_type_get_state(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/autoload.bc-access-rules-4_8_php.vc_bc_access_rule_48_post_type_rule(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/autoload.bc-access-rules-4_8_php.vc_bc_access_rule_48_shortcodes_get_state(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/autoload.bc-access-rules-4_8_php.vc_bc_access_rule_48_shortcodes_rule(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/autoload.bc-access-rules-4_8_php.vc_bc_access_get_shortcodes_state_is_set(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Check is state set
</summary>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/autoload.bc-access-rules-4_8_php.vc_bc_access_rule_48_backend_editor_get_state(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/autoload.bc-access-rules-4_8_php.vc_bc_access_rule_48_frontend_editor_get_state(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/autoload.bc-access-rules-4_8_php.vc_bc_access_rule_48_backend_editor_can_disabled_ce_editor_rule(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/autoload.bc-access-rules-4_8_php.vc_bc_access_rule_48_backend_editor_add_cap_disabled_ce_editor(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/autoload.bc-multisite-options_php.vc_bc_multisite_options(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/autoload.hook-vc-iconpicker-param_php.vc_iconpicker_base_register_css(Pchp.Core.Context)">
<summary>
This action registers all styles(fonts) to be enqueue later
</summary>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/autoload.hook-vc-iconpicker-param_php.vc_iconpicker_base_register_js(Pchp.Core.Context)">
<summary>
Register admin js for iconpicker functionality
</summary>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/autoload.hook-vc-iconpicker-param_php.vc_iconpicker_editor_jscss(Pchp.Core.Context)">
<summary>
Enqueue ALL fonts/styles for Editor(admin) mode. (to allow easy change icons)
- To append your icons fonts add action:
vc_backend_editor_enqueue_jscss and vc_frontend_editor_enqueue_jscss
</summary>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/autoload.params-to-init_php.vc_edit_for_fields_add_optional_params(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/autoload/params.vc_grid_item_php.vc_vc_grid_item_form_field(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/autoload/params.vc_grid_item_php.vc_gitem_post_data_get_link_target_frontend_editor(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/autoload/params.vc_grid_item_php.vc_gitem_post_data_get_link_rel_frontend_editor(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/autoload/params.vc_grid_item_php.vc_gitem_create_link(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<param name="default_class" type="string"></param>
<param name="title" type="string"></param>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/autoload/params.vc_grid_item_php.vc_gitem_create_link_real(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<param name="default_class" type="string"></param>
<param name="title" type="string"></param>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/autoload/params.vc_grid_item_php.vc_gitem_post_data_get_link_link_frontend_editor(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/autoload.post-type-default-template_php.vc_set_default_content_for_post_type_wpb_vc_js_status_filter(Pchp.Core.Context)">
<summary>
Return true value for filter 'wpb_vc_js_status_filter'.
It allows to start backend editor on load.
</summary>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/autoload.post-type-default-template_php.vc_set_default_content_for_post_type(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Set default content by post type in editor.
Data for post type templates stored in settings.
</summary>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/autoload.post-type-default-template_php.vc_settings_post_type_default_template_field_init?0(Pchp.Core.Context)">
<summary>
Initialize Vc_Setting_Post_Type_Default_Template_Field
Called by admin_init hook
</summary>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/autoload.ui-vc-pointers_php.vc_pointer_reset(Pchp.Core.Context)">
<summary>
Remove Vc pointers keys to show Tour markers again.
</summary>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/autoload.ui-vc-pointers_php.vc_pointers_is_dismissed(Pchp.Core.Context)">
<summary>
Reset tour guid
</summary>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/autoload.vc-grid-item-editor_php.vc_grid_item_editor_create_post_type(Pchp.Core.Context)">
<summary>
Creates new post type for grid_editor.
</summary>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/autoload.vc-grid-item-editor_php.vc_vendor_qtranslate_enqueue_js_backend_grid_editor(Pchp.Core.Context)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/autoload.vc-grid-item-editor_php.vc_grid_item_editor_init(Pchp.Core.Context)">
<summary>
Set required objects to render editor for grid item
</summary>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/autoload.vc-grid-item-editor_php.vc_grid_item_render_preview(Pchp.Core.Context)">
<summary>
Render preview for grid item
</summary>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/autoload.vc-grid-item-editor_php.vc_grid_item_map_shortcodes(Pchp.Core.Context)">
<summary>
Map grid element shortcodes.
</summary>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/autoload.vc-grid-item-editor_php.vc_grid_item_get_post_type(Pchp.Core.Context)">
<summary>
Get current post type
</summary>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/autoload.vc-grid-item-editor_php.vc_grid_item_editor_shortcodes(Pchp.Core.Context)">
<summary>
Check and Map grid element shortcodes if required.
</summary>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/autoload.vc-grid-item-editor_php.vc_grid_item_register_pointer(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/autoload.vc-grid-item-editor_php.vc_gitem_content_shortcodes(Pchp.Core.Context)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/autoload.vc-grid-item-editor_php.vc_gitem_has_content(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/autoload.vc-grid-item-editor_php.vc_gitem_add_submenu_page(Pchp.Core.Context)">
<summary>
Add sub page to WPBakery Page Builder pages
</summary>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/autoload.vc-grid-item-editor_php.vc_gitem_menu_highlight(Pchp.Core.Context)">
<summary>
Highlight Vc submenu.
</summary>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/autoload.vc-image-filters_php.vc_get_filters(Pchp.Core.Context)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/autoload.vc-image-filters_php.vc_attachment_filter_field(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Add Image Filter field to media uploader
</summary>
<param name="form_fields" type="array">, fields to include in attachment form</param>
<param name="post" type="object">, attachment record in database</param>
<returns>$form_fields, modified form fields</returns>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/autoload.vc-image-filters_php.vc_media_editor_add_image(Pchp.Core.Context)">
<summary>
Apply filters to specified images
If image(s) has filter specified via filters _POST param:
1) copy it
2) apply specified filter
3) return new image id

Required _POST params:
- array ids: array of attachment ids

Optional _POST params:
- array filters: mapped array of ids and filters to apply
</summary>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/autoload.vc-image-filters_php.vc_media_editor_preview_image(Pchp.Core.Context)">
<summary>
Generate filter preview
Preview url is generated as data uri (base64)

Required _POST params:
- string filter: filter name
- int attachment_id: attachment id
</summary>
<returns>Results are sent out as json</returns>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/autoload.vc-image-filters_php.vc_get_gd_resource(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Read file from disk as GD resource
</summary>
<param name="file" type="string"></param>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/autoload.vc-image-filters_php.vc_save_gd_resource(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Save GD resource to file
</summary>
<param name="resource" type="resource"></param>
<param name="file" type="string"></param>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/autoload.vc-image-filters_php.vc_attachment_filter_media_meta(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Add "Filter: ..." meta field to attachment details box
</summary>
<param name="media_meta" type="array">, meta to include in attachment form</param>
<param name="post" type="object">, attachment record in database</param>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/autoload/vc-pages.automapper_php.vc_automapper_init(Pchp.Core.Context)">
<summary>
Build and enqueue js/css for automapper settings tab.
</summary>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/autoload/vc-pages.automapper_php.vc_page_automapper_build(Pchp.Core.Context)">
<summary>
Returns automapper template.
</summary>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/autoload/vc-pages.page-design-options_php.vc_check_for_custom_css_build(Pchp.Core.Context)">
<summary>
Function check is system has custom build of css
and check it version in comparison with current VC version
</summary>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/autoload/vc-pages.page-design-options_php.vc_custom_css_admin_notice(Pchp.Core.Context)">
<summary>
Display admin notice depending on current page
</summary>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/autoload/vc-pages.page-design-options_php.vc_page_settings_tab_color_submit_attributes(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/autoload/vc-pages.page-role-manager_php.vc_settings_tabs_vc_roles(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/autoload/vc-pages.page-role-manager_php.vc_settings_render_tab_vc_roles(Pchp.Core.Context)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/autoload/vc-pages.page-role-manager_php.wpb_editor_access(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<param name="role" type="WP_Role"></param>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/autoload/vc-pages.pages_php.vc_page_css_enqueue(Pchp.Core.Context)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/autoload/vc-pages.pages_php.vc_pages_group_build(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Build group page objects.
</summary>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/autoload/vc-pages.pages_php.vc_menu_page_build(Pchp.Core.Context)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/autoload/vc-pages.welcome-screen_php.vc_page_welcome_slug(Pchp.Core.Context)">
<summary>
Get welcome pages main slug.
</summary>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/autoload/vc-pages.welcome-screen_php.vc_page_welcome_render(Pchp.Core.Context)">
<summary>
Build vc-welcome page block which will be shown after Vc installation.
vc_filter: vc_page_welcome_render_capabilities
</summary>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/autoload/vc-pages.welcome-screen_php.vc_page_welcome_set_redirect(Pchp.Core.Context)">
<summary>
Set redirect transition on update or activation
</summary>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/autoload/vc-pages.welcome-screen_php.vc_page_welcome_redirect(Pchp.Core.Context)">
<summary>
Do redirect if required on welcome page
</summary>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/autoload/vc-pages.welcome-screen_php.vc_get_page_welcome_tabs(Pchp.Core.Context)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/autoload.vc-pointers-backend-editor_php.vc_add_admin_pointer(Pchp.Core.Context)">
<summary>
Add WP ui pointers to backend editor.
</summary>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/autoload.vc-pointers-backend-editor_php.vc_backend_editor_register_pointer(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/autoload.vc-pointers-frontend-editor_php.vc_frontend_editor_pointer(Pchp.Core.Context)">
<summary>
Add WP ui pointers to backend editor.
</summary>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/autoload.vc-pointers-frontend-editor_php.vc_frontend_editor_register_pointer(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/autoload.vc-settings-presets_php.vc_vendor_preset(Pchp.Core.Context)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/autoload.vc-settings-presets_php.vc_action_save_settings_preset(Pchp.Core.Context)">
<summary>
Save settings preset for specific shortcode
Include freshly rendered html in response

Required _POST params:
- shortcode_name string
- title string
- data string params in json
- is_default
</summary>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/autoload.vc-settings-presets_php.vc_action_set_as_default_settings_preset(Pchp.Core.Context)">
<summary>
Set existing preset as default
Include freshly rendered html in response

Required _POST params:
- id int
- shortcode_name string
</summary>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/autoload.vc-settings-presets_php.vc_action_restore_default_settings_preset(Pchp.Core.Context)">
<summary>
Unmark current default preset as default
Include freshly rendered html in response

Required _POST params:
- shortcode_name string
</summary>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/autoload.vc-settings-presets_php.vc_action_delete_settings_preset(Pchp.Core.Context)">
<summary>
Delete specific settings preset
Include freshly rendered html in response

Required _POST params:
- shortcode_name string
- id int
</summary>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/autoload.vc-settings-presets_php.vc_action_get_settings_preset(Pchp.Core.Context)">
<summary>
Get data for specific settings preset
Required _POST params:
- id int
</summary>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/autoload.vc-settings-presets_php.vc_action_render_settings_preset_popup(Pchp.Core.Context)">
<summary>
Respond with rendered popup menu
Required _POST params:
- shortcode_name string
</summary>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/autoload.vc-settings-presets_php.vc_action_render_settings_preset_title_prompt(Pchp.Core.Context)">
<summary>
Return rendered title prompt
</summary>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/autoload.vc-settings-presets_php.vc_action_render_settings_templates_prompt(Pchp.Core.Context)">
<summary>
Return rendered template prompt
</summary>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/autoload.vc-settings-presets_php.vc_register_settings_preset(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Register (add) new vendor preset
</summary>
<param name="title" type="string"></param>
<param name="shortcode" type="string"></param>
<param name="params" type="array"></param>
<param name="default" type="bool"></param>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/autoload.vc-settings-presets_php.vc_add_new_elements_to_box(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/autoload.vc-settings-presets_php.vc_add_new_category_filter(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/autoload.vc-single-image_php.vc_single_image_convert_old_link_to_new(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Backward compatibility
</summary>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/autoload/vendors.gutenberg_php.vcv_disable_gutenberg_for_classic_editor(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/autoload/vendors.gutenberg_php.vc_gutenberg_add_settings(Pchp.Core.Context,Pchp.Core.PhpValue)">
<param name="settings" type="\Vc_Settings"></param>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/autoload/vendors.gutenberg_php.vc_gutenberg_sanitize_disable_callback(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/autoload/vendors.gutenberg_php.vc_gutenberg_disable_render_callback(Pchp.Core.Context)">
<summary>
Not responsive checkbox callback function
</summary>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/autoload/vendors.gutenberg_php.vc_gutenberg_check_disabled(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/autoload/vendors.gutenberg_php.vc_gutenberg_check_disabled_regular(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/autoload/vendors.gutenberg_php.vc_is_wpb_content(Pchp.Core.Context)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/autoload/vendors.woocommerce_php.vc_woocommerce_add_to_cart_script(Pchp.Core.Context)">
<summary>
Add script for grid item add to card link
</summary>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/classes/deprecated.helpers_deprecated_php.add_shortcode_param(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Helper function to register new shortcode attribute hook.
</summary>
<param name="name">- attribute name</param>
<param name="form_field_callback">- hook, will be called when settings form is shown and attribute added to shortcode
param list</param>
<param name="script_url">- javascript file url which will be attached at the end of settings form.</param>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/classes/deprecated.helpers_deprecated_php.get_row_css_class(Pchp.Core.Context)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/classes/deprecated.helpers_deprecated_php.vc_generate_dependencies_attributes(Pchp.Core.Context)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/classes/deprecated.helpers_deprecated_php.vcExtractDimensions(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Extract width/height from string
</summary>
<param name="dimensions" type="string">WxH</param>
<returns>array(width, height) or false</returns>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/classes/deprecated.helpers_deprecated_php.fieldAttachedImages(Pchp.Core.Context,Pchp.Core.PhpValue)">
<param name="images" type="array">IDs or srcs of images</param>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/classes/deprecated.helpers_deprecated_php.getVcShared(Pchp.Core.Context,Pchp.Core.PhpValue)">
<param name="asset" type="string"></param>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/classes/deprecated.helpers_deprecated_php.vc_wp_action(Pchp.Core.Context)">
<summary>
Return a action param for ajax
</summary>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/classes/editors.class-vc-frontend-editor_php.vc_container_anchor?0(Pchp.Core.Context)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/classes/settings/automapper.automapper_php.vc_atm_build_categories_array?0(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/classes/settings/automapper.automapper_php.vc_atm_build_params_array?0(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/classes/shortcodes.vc-tab_php.vc_tab_id_settings_field(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/classes/vendors/plugins/acf.grid-item-attributes_php.vc_gitem_template_attribute_acf(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Get ACF data
</summary>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/classes/vendors/plugins/woocommerce.grid-item-attributes_php.vc_gitem_template_attribute_woocommerce_product(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Get woocommerce data for product
</summary>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/classes/vendors/plugins/woocommerce.grid-item-attributes_php.vc_gitem_template_attribute_woocommerce_order(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Gte woocommerce data for order
</summary>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/classes/vendors/plugins/woocommerce.grid-item-attributes_php.vc_gitem_template_attribute_woocommerce_product_link(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Get woocommerce product add to cart url.
</summary>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/classes/vendors/plugins/woocommerce.grid-item-filters_php.vc_gitem_add_link_param_woocommerce(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Append 'add to card' link to the list of Add link for grid element shortcodes.
</summary>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/classes/vendors/plugins/woocommerce.grid-item-filters_php.vc_gitem_post_data_get_link_link_woocommerce(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Add WooCommerce link attributes to enable add to cart functionality
</summary>
<param name="css_class" type="string"></param>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/classes/vendors/plugins/woocommerce.grid-item-filters_php.vc_gitem_post_data_get_link_real_link_woocommerce(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Add WooCommerce link attributes to enable add to cart functionality. Not using item element templates vars.
</summary>
<param name="css_class" type="string"></param>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/classes/vendors/plugins/woocommerce.grid-item-filters_php.vc_gitem_zone_image_block_link_woocommerce(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_php.wpb_getImageBySize(Pchp.Core.Context,Pchp.Core.PhpValue)">
<param name="params" type="array"></param>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_php.vc_get_image_by_size(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_php.wpb_translateColumnWidthToFractional(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Convert vc_col-sm-3 to 1/4
</summary>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_php.wpb_translateColumnWidthToSpan(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_php.wpb_js_remove_wpautop(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<param name="autop" type="bool"></param>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_php.shortcode_exists?0(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Check if a shortcode is registered in WordPress.
Examples: shortcode_exists( 'caption' ) - will return true.
shortcode_exists( 'blah' ) - will return false.
</summary>
<param name="shortcode" type="bool"></param>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_php.vc_siteAttachedImages?0(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Helper function which returns list of site attached images, and if image is attached to the current post it adds class 'added'
</summary>
<param name="att_ids" type="array"></param>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_php.vc_field_attached_images(Pchp.Core.Context,Pchp.Core.PhpValue)">
<param name="images" type="array">IDs or srcs of images</param>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_php.wpb_removeNotExistingImgIDs(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_php.wpb_resize?0(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<param name="attach_id" type="int"></param>
<param name="img_url" type="string"></param>
<param name="width" type="int"></param>
<param name="height" type="int"></param>
<param name="crop" type="bool"></param>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_php.js_composer_body_class(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Method adds css class to body tag.
Hooked class method by body_class WP filter. Method adds custom css class to body tag of the page to help
identify and build design specially for VC shortcodes.
Used in wp-content/plugins/js_composer/include/classes/core/class-vc-base.php\Vc_Base\bodyClass
</summary>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_php.vc_convert_shortcode(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_php.vc_convert_tab_inner_shortcode(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_php.vc_convert_inner_shortcode(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_php.wpb_vc_get_column_width_indent(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_php.vc_colorCreator(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Make any HEX color lighter or darker
</summary>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_php.vc_hex2rgb(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
HEX to RGB converter
</summary>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_php.vc_parse_multi_attribute(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Parse string like "title:Hello world|weekday:Monday" to array('title' =&gt; 'Hello World', 'weekday' =&gt; 'Monday')
</summary>
<param name="default" type="array"></param>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_php.vc_param_options_parse_values(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_php.vc_param_options_get_settings(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_php.vc_convert_atts_to_string(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_php.vc_parse_options_string(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_php.vc_build_safe_css_class(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Convert string to a valid css class name.
</summary>
<param name="class" type="string"></param>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_php.vc_include_template(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Include template from templates dir.
</summary>
<param name="variables" type="array">- passed variables to the template.</param>
<param name="once" type="bool"></param>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_php.vc_get_template(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Output template from templates dir.
</summary>
<param name="variables" type="array">- passed variables to the template.</param>
<param name="once" type="bool"></param>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_php.lcfirst?0(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_php.vc_studly(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
VC Convert a value to studly caps case.
</summary>
<param name="value" type="string"></param>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_php.vc_camel_case(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
VC Convert a value to camel case.
</summary>
<param name="value" type="string"></param>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_php.vc_icon_element_fonts_enqueue(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Enqueue icon element font
</summary>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_php.vc_shortcode_attribute_parse(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Function merges defaults attributes in attributes by keeping it values
Example
array defaults     |   array attributes     |    result array
'color'=&gt;'black',         -                   'color'=&gt;'black',
'target'=&gt;'_self',      'target'=&gt;'_blank',   'target'=&gt;'_blank',
-                'link'=&gt;'google.com'  'link'=&gt;'google.com'
</summary>
<param name="defaults" type="array"></param>
<param name="attributes" type="array"></param>
<returns>- merged attributes</returns>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_php.vc_get_shortcode_regex(Pchp.Core.Context,Pchp.Core.PhpValue)">
<param name="tagregexp" type="string"></param>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_php.vc_message_warning(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Used to send warning message
</summary>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_php.vc_extract_youtube_id(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Extract video ID from youtube url
</summary>
<param name="url" type="string">Youtube url</param>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_php.vc_taxonomies_types(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_php.vc_get_term_object(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Since
</summary>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_php.vc_has_class(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Check if element has specific class
E.g. f('foo', 'foo bar baz') -&gt; true
</summary>
<param name="class" type="string">Class to check for</param>
<param name="classes" type="string">Classes separated by space(s)</param>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_php.vc_remove_class(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Remove specific class from classes string
E.g. f('foo', 'foo bar baz') -&gt; 'bar baz'
</summary>
<param name="class" type="string">Class to remove</param>
<param name="classes" type="string">Classes separated by space(s)</param>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_php.vc_stringify_attributes(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Convert array of named params to string version
All values will be escaped
E.g. f(array('name' =&gt; 'foo', 'id' =&gt; 'bar')) -&gt; 'name="foo" id="bar"'
</summary>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_php.vc_is_responsive_disabled(Pchp.Core.Context)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_php.vc_do_shortcode(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Do shortcode single render point
</summary>
<param name="content" type="null"></param>
<param name="tag" type="null"></param>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_php.vc_random_string(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Return random string
</summary>
<param name="length" type="int"></param>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_php.vc_slugify(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_php.wpb_widget_title(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
This filter should be applied to all content elements titles
$params['extraclass'] Extra class name will be added


To override content element title default html markup, paste this code in your theme's functions.php file
vc_filter: wpb_widget_title
add_filter('wpb_widget_title', 'override_widget_title', 10, 2);
function override_widget_title($output = '', $params = array('')) {
$extraclass = (isset($params['extraclass'])) ? " ".$params['extraclass'] : "";
return '&lt;h1 class="entry-title'.$extraclass.'"&gt;'.$params['title'].'&lt;/h1&gt;';
}
</summary>
<param name="params" type="array"></param>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_php.wpb_remove_custom_html(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Used to remove raw_html/raw_js elements from content
</summary>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_api_php.wpb_map(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_api_php.vc_lean_map(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Lean map shortcodes
</summary>
<param name="settings_function" type="null"></param>
<param name="settings_file" type="null"></param>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_api_php.vc_map(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_api_php.vc_remove_element(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_api_php.vc_add_param(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Add new shortcode param.
</summary>
<param name="shortcode">- tag for shortcode</param>
<param name="attributes">- attribute settings</param>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_api_php.vc_add_params(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Mass shortcode params adding function
</summary>
<param name="shortcode">- tag for shortcode</param>
<param name="attributes">- list of attributes arrays</param>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_api_php.vc_map_update(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Shorthand function for WPBMap::modify
</summary>
<param name="name" type="string"></param>
<param name="setting" type="string"></param>
<param name="value" type="string"></param>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_api_php.vc_update_shortcode_param(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Shorthand function for WPBMap::mutateParam
</summary>
<param name="attribute" type="array"></param>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_api_php.vc_remove_param(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Shorthand function for WPBMap::dropParam
</summary>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_api_php.vc_set_as_theme?0(Pchp.Core.Context)">
<summary>
Sets plugin as theme plugin.
</summary>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_api_php.vc_is_as_theme?0(Pchp.Core.Context)">
<summary>
Is VC as-theme-plugin.
</summary>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_api_php.vc_is_updater_disabled?0(Pchp.Core.Context)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_api_php.vc_default_editor_post_types?0(Pchp.Core.Context)">
<summary>
Returns list of default post type.
</summary>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_api_php.vc_set_default_editor_post_types?0(Pchp.Core.Context,Pchp.Core.PhpArray)">
<summary>
Set post types for VC editor.
</summary>
<param name="list" type="array">- list of valid post types to set</param>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_api_php.vc_editor_post_types?0(Pchp.Core.Context)">
<summary>
Returns list of post types where VC editor is enabled.
</summary>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_api_php.vc_editor_set_post_types?0(Pchp.Core.Context,Pchp.Core.PhpArray)">
<summary>
Set list of post types where VC editor is enabled.
</summary>
<param name="post_types" type="array"></param>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_api_php.vc_mode?0(Pchp.Core.Context)">
<summary>
Return current VC mode.
</summary>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_api_php.vc_set_shortcodes_templates_dir?0(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Sets directory where WPBakery Page Builder should look for template files for content elements.
</summary>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_api_php.vc_shortcodes_theme_templates_dir?0(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Get custom theme template path
</summary>
<param name="template">- filename for template</param>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_api_php.set_vc_is_inline(Pchp.Core.Context,Pchp.Core.PhpValue)">
<param name="value" type="bool"></param>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_api_php.vc_disable_frontend(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Disable frontend editor for VC
</summary>
<param name="disable" type="bool"></param>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_api_php.vc_enabled_frontend(Pchp.Core.Context)">
<summary>
Check is front end enabled.
</summary>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_api_php.vc_add_default_templates?0(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Add custom template in default templates list
</summary>
<param name="data" type="array">| template data (name, content, custom_class, image_path)</param>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_api_php.vc_map_integrate_shortcode(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<param name="field_prefix" type="string"></param>
<param name="group_prefix" type="string"></param>
<param name="change_fields" type="null"></param>
<param name="dependency" type="null"></param>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_api_php.vc_map_integrate_include_exclude_fields(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Used to filter params (include/exclude)
</summary>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_api_php.vc_map_integrate_add_dependency(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_api_php.vc_map_integrate_get_params(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<param name="field_prefix" type="string"></param>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_api_php.vc_map_integrate_get_atts(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<param name="field_prefix" type="string"></param>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_api_php.vc_map_integrate_parse_atts(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<param name="field_prefix" type="string"></param>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_api_php.vc_map_add_css_animation(Pchp.Core.Context,Pchp.Core.PhpValue)">
<param name="label" type="bool"></param>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_api_php.vc_get_shortcode(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Get settings of the mapped shortcode.
</summary>
<returns>- settings or null if shortcode not mapped</returns>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_api_php.vc_remove_all_elements(Pchp.Core.Context)">
<summary>
Remove all mapped shortcodes and the moment when function is called.
</summary>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_api_php.vc_map_get_defaults(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Function to get defaults values for shortcode.
</summary>
<param name="tag">- shortcode tag</param>
<returns>- list of param=&gt;default_value</returns>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_api_php.vc_map_get_params_defaults(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_api_php.vc_map_get_attributes(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<param name="tag">- shortcode tag3</param>
<param name="atts" type="array">- shortcode attributes</param>
<returns>- return merged values with provided attributes (
'a'=&gt;1,'b'=&gt;2 + 'b'=&gt;3,'c'=&gt;4 --&gt; 'a'=&gt;1,'b'=&gt;3 )</returns>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_api_php.vc_convert_vc_color(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_api_php.vc_extract_dimensions(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Extract width/height from string
</summary>
<param name="dimensions" type="string">WxH</param>
<returns>array(width, height) or false</returns>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_api_php.vc_get_shared(Pchp.Core.Context,Pchp.Core.PhpValue)">
<param name="asset" type="string"></param>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_api_php.vc_add_shortcode_param(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Helper function to register new shortcode attribute hook.
</summary>
<param name="name">- attribute name</param>
<param name="form_field_callback">- hook, will be called when settings form is shown and attribute added to shortcode
param list</param>
<param name="script_url">- javascript file url which will be attached at the end of settings form.</param>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_api_php.vc_do_shortcode_param_settings_field(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Call hook for attribute.
</summary>
<param name="name">- attribute name</param>
<param name="param_settings">- attribute settings from shortcode</param>
<param name="param_value">- attribute value</param>
<param name="tag">- attribute tag</param>
<returns>- returns html which will be render in hook</returns>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_factory_php.vc_manager?0(Pchp.Core.Context)">
<summary>
WPBakery Page Builder manager.
</summary>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_factory_php.visual_composer?0(Pchp.Core.Context)">
<summary>
WPBakery Page Builder instance.
</summary>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_factory_php.vc_mapper?0(Pchp.Core.Context)">
<summary>
Shorthand for Vc Mapper.
</summary>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_factory_php.vc_settings?0(Pchp.Core.Context)">
<summary>
Shorthand for WPBakery Page Builder settings.
</summary>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_factory_php.vc_license?0(Pchp.Core.Context)">
<summary>
Get License manager
</summary>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_factory_php.vc_automapper?0(Pchp.Core.Context)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_factory_php.vc_frontend_editor?0(Pchp.Core.Context)">
<summary>
Shorthand for VC frontend editor
</summary>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_factory_php.vc_backend_editor?0(Pchp.Core.Context)">
<summary>
Shorthand for VC frontend editor
</summary>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_factory_php.vc_updater?0(Pchp.Core.Context)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_factory_php.vc_is_network_plugin?0(Pchp.Core.Context)">
<summary>
Vc is network plugin or not.
</summary>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_factory_php.vc_path_dir?0(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Get file/directory path in Vc.
</summary>
<param name="name" type="string">- path name</param>
<param name="file" type="string"></param>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_factory_php.vc_asset_url?0(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Get full url for assets.
</summary>
<param name="file" type="string"></param>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_factory_php.vc_upload_dir?0(Pchp.Core.Context)">
<summary>
Temporary files upload dir;
</summary>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_factory_php.vc_template?0(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_factory_php.vc_post_param?0(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Get param value from $_POST if exists.
</summary>
<param name="check" type="bool"></param>
<returns>- null for undefined param.</returns>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_factory_php.vc_get_param?0(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Get param value from $_GET if exists.
</summary>
<param name="param" type="string"></param>
<param name="check" type="bool"></param>
<returns>- null for undefined param.</returns>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_factory_php.vc_request_param?0(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Get param value from $_REQUEST if exists.
</summary>
<param name="check" type="bool"></param>
<returns>- null for undefined param.</returns>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_factory_php.vc_is_frontend_editor?0(Pchp.Core.Context)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_factory_php.vc_is_page_editable?0(Pchp.Core.Context)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_factory_php.vc_action?0(Pchp.Core.Context)">
<summary>
Get VC special action param.
</summary>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_factory_php.vc_is_inline?0(Pchp.Core.Context)">
<summary>
Get is inline or not.
</summary>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_factory_php.vc_is_frontend_ajax?0(Pchp.Core.Context)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_factory_php.vc_is_editor(Pchp.Core.Context)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_factory_php.vc_value_from_safe(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<param name="encode" type="bool"></param>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_factory_php.vc_disable_automapper(Pchp.Core.Context,Pchp.Core.PhpValue)">
<param name="disable" type="bool"></param>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_factory_php.vc_automapper_is_disabled(Pchp.Core.Context)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_factory_php.vc_get_dropdown_option(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_factory_php.vc_get_css_color(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_factory_php.vc_shortcode_custom_css_class(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<param name="prefix" type="string"></param>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_factory_php.vc_shortcode_custom_css_has_property(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<param name="strict" type="bool|false"></param>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_factory_php.vc_plugin_name(Pchp.Core.Context)">
<summary>
Plugin name for VC.
</summary>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_factory_php.vc_file_get_contents(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_factory_php.vc_role_access(Pchp.Core.Context)">
<summary>
HowTo: vc_role_access()-&gt;who('administrator')-&gt;with('editor')-&gt;can('frontend_editor');
</summary>
<returns>Vc_Role_Access;</returns>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_factory_php.vc_user_access(Pchp.Core.Context)">
<summary>
Get access manager for current user.
HowTo: vc_user_access()-&gt;-&gt;with('editor')-&gt;can('frontend_editor');
</summary>
<returns>Vc_Current_User_Access;</returns>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_factory_php.vc_user_roles_get_all(Pchp.Core.Context)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_factory_php.vc_generate_nonce(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_factory_php.vc_hook_esi(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_factory_php.vc_verify_nonce(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_factory_php.vc_verify_admin_nonce(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_factory_php.vc_verify_public_nonce(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_factory_php.vc_check_post_type(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_factory_php.vc_user_access_check_shortcode_edit(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_factory_php.vc_user_access_check_shortcode_all(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_factory_php.vc_htmlspecialchars_decode_deep(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
htmlspecialchars_decode_deep
Call the htmlspecialchars_decode to a gived multilevel array
</summary>
<param name="value" type="mixed">The value to be stripped.</param>
<returns>Stripped value.</returns>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/helpers.helpers_factory_php.vc_str_remove_protocol(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/params/animation_style.animation_style_php.vc_animation_style_form_field(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Function for rendering param in edit form (add element)
Parse settings from vc_map and entered 'values'.
</summary>
<param name="settings" type="array">- parameter settings in vc_map</param>
<param name="value" type="string">- parameter value</param>
<param name="tag" type="string">- shortcode tag

vc_filter: vc_animation_style_render_filter - filter to override editor form
field output</param>
<returns>rendered template for params in edit form</returns>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/params/autocomplete.autocomplete_php.vc_get_autocomplete_suggestion(Pchp.Core.Context)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/params/autocomplete.autocomplete_php.vc_render_suggestion(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<param name="param_name">vc_filter: vc_autocomplete_{tag}_{param_name}_callback - hook to get suggestions from ajax. (here you need to hook).</param>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/params/autocomplete.autocomplete_php.vc_autocomplete_form_field(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Function for rendering param in edit form (add element)
Parse settings from vc_map and entered values.
</summary>
<returns>rendered template for params in edit form</returns>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/params/colorpicker.colorpicker_php.vc_colorpicker_form_field(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Param 'colorpicker' field
</summary>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/params/column_offset.column_offset_php.vc_column_offset_form_field(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/params/column_offset.column_offset_php.vc_column_offset_class_merge(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/params/column_offset.column_offset_php.vc_load_column_offset_param(Pchp.Core.Context)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/params/css_editor.css_editor_php.vc_css_editor_form_field(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/params/custom_markup.custom_markup_php.vc_custom_markup_form_field(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Function for rendering param in edit form (add element)
Parse settings from vc_map and entered values.
</summary>
<param name="tag">vc_filter: vc_custom_markup_render_filter - hook to override custom markup for field</param>
<returns>rendered template for params in edit form</returns>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/params.default_params_php.vc_textfield_form_field(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Textfield shortcode attribute type generator.
</summary>
<returns>- html string.</returns>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/params.default_params_php.vc_dropdown_form_field(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Dropdown(select with options) shortcode attribute type generator.
</summary>
<returns>- html string.</returns>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/params.default_params_php.vc_checkbox_form_field(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Checkbox shortcode attribute type generator.
</summary>
<param name="value" type="string"></param>
<returns>- html string.</returns>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/params.default_params_php.vc_checkbox_param_defaults(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/params.default_params_php.vc_posttypes_form_field(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Checkbox shortcode attribute type generator.
</summary>
<returns>- html string.</returns>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/params.default_params_php.vc_taxonomies_form_field(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Taxonomies shortcode attribute type generator.
</summary>
<returns>- html string.</returns>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/params.default_params_php.vc_exploded_textarea_form_field(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Exploded textarea shortcode attribute type generator.
Data saved and coma-separated values are merged with line breaks and returned in a textarea.
</summary>
<returns>- html string.</returns>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/params.default_params_php.vc_exploded_textarea_safe_form_field(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Safe Textarea shortcode attribute type generator.
</summary>
<returns>- html string.</returns>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/params.default_params_php.vc_textarea_raw_html_form_field(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Textarea raw html shortcode attribute type generator.
This attribute type allows safely add custom html to your post/page.
</summary>
<returns>- html string.</returns>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/params.default_params_php.vc_textarea_safe_form_field(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Safe Textarea shortcode attribute type generator.
</summary>
<returns>- html string.</returns>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/params.default_params_php.vc_textarea_form_field(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Textarea shortcode attribute type generator.
</summary>
<returns>- html string.</returns>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/params.default_params_php.vc_attach_images_form_field(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Attach images shortcode attribute type generator.
</summary>
<param name="single" type="bool"></param>
<returns>- html string.</returns>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/params.default_params_php.vc_attach_image_form_field(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Attach image shortcode attribute type generator.
</summary>
<returns>- html string.</returns>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/params.default_params_php.vc_widgetised_sidebars_form_field(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widgetised sidebars shortcode attribute type generator.
</summary>
<returns>- html string.</returns>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/params/el_id.el_id_php.vc_el_id_form_field(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/params/font_container.font_container_php.vc_font_container_form_field(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/params/google_fonts.google_fonts_php.vc_google_fonts_form_field(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Function for rendering param in edit form (add element)
Parse settings from vc_map and entered values.
</summary>
<returns>rendered template for params in edit form</returns>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/params/gutenberg.gutenberg_php.vc_gutenberg_form_field(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Gutenberg field param.
</summary>
<returns>- html string.</returns>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/params/hidden.hidden_php.vc_hidden_form_field(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Hidden field param.
</summary>
<returns>- html string.</returns>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/params/hidden.hidden_php.vc_edit_form_fields_render_field_hidden_before(Pchp.Core.Context)">
<summary>
Remove content before hidden field type input.
</summary>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/params/hidden.hidden_php.vc_edit_form_fields_render_field_hidden_after(Pchp.Core.Context)">
<summary>
Remove content after hidden field type input.
</summary>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/params/href.href_php.vc_href_form_field(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/params/iconpicker.iconpicker_php.vc_iconpicker_form_field(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Function for rendering param in edit form (add element)
Parse settings from vc_map and entered values.
</summary>
<returns>- rendered template for params in edit form</returns>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/params/iconpicker.iconpicker_php.vc_iconpicker_type_fontawesome(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Fontawesome icons from FontAwesome :)
</summary>
<param name="icons">- taken from filter - vc_map param field settings['source']
provided icons (default empty array). If array categorized it will
auto-enable category dropdown</param>
<returns>- of icons for iconpicker, can be categorized, or not.</returns>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/params/iconpicker.iconpicker_php.vc_iconpicker_type_openiconic(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Openicons icons from fontello.com
</summary>
<param name="icons">- taken from filter - vc_map param field settings['source']
provided icons (default empty array). If array categorized it will
auto-enable category dropdown</param>
<returns>- of icons for iconpicker, can be categorized, or not.</returns>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/params/iconpicker.iconpicker_php.vc_iconpicker_type_typicons(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Typicons icons from github.com/stephenhutchings/typicons.font
</summary>
<param name="icons">- taken from filter - vc_map param field settings['source']
provided icons (default empty array). If array categorized it will
auto-enable category dropdown</param>
<returns>- of icons for iconpicker, can be categorized, or not.</returns>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/params/iconpicker.iconpicker_php.vc_iconpicker_type_entypo(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Entypo icons from github.com/danielbruce/entypo
</summary>
<param name="icons">- taken from filter - vc_map param field settings['source']
provided icons (default empty array). If array categorized it will
auto-enable category dropdown</param>
<returns>- of icons for iconpicker, can be categorized, or not.</returns>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/params/iconpicker.iconpicker_php.vc_iconpicker_type_linecons(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Linecons icons from fontello.com
</summary>
<param name="icons">- taken from filter - vc_map param field settings['source']
provided icons (default empty array). If array categorized it will
auto-enable category dropdown</param>
<returns>- of icons for iconpicker, can be categorized, or not.</returns>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/params/iconpicker.iconpicker_php.vc_iconpicker_type_monosocial(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
monosocial icons from drinchev.github.io/monosocialiconsfont
</summary>
<param name="icons">- taken from filter - vc_map param field settings['source']
provided icons (default empty array). If array categorized it will
auto-enable category dropdown</param>
<returns>- of icons for iconpicker, can be categorized, or not.</returns>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/params/iconpicker.iconpicker_php.vc_iconpicker_type_material(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Material icon set from Google
</summary>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/params/loop.loop_php.vc_loop_form_field(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/params/loop.loop_php.vc_loop_get_value(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/params/loop.loop_php.vc_build_loop_query(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Build WP_Query object from query string.
String created by loop controllers
</summary>
<param name="exclude_id" type="bool"></param>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/params/loop.loop_php.vc_get_loop_suggestion(Pchp.Core.Context)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/params/loop.loop_php.vc_get_loop_settings_json(Pchp.Core.Context)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/params/loop.loop_php.vc_loop_include_templates(Pchp.Core.Context)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/params/options.options_php.vc_options_form_field(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/params/options.options_php.vc_options_include_templates(Pchp.Core.Context)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/params/params_preset.params_preset_php.vc_params_preset_form_field(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Params preset shortcode attribute type generator.
Allows to set list of attributes which will be
</summary>
<returns>- html string.</returns>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/params/param_group.param_group_php.vc_param_group_form_field(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Function for rendering param in edit form (add element)
Parse settings from vc_map and entered values.
</summary>
<returns>rendered template for params in edit form</returns>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/params/param_group.param_group_php.vc_param_group_clone(Pchp.Core.Context)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/params/param_group.param_group_php.vc_param_group_clone_by_data(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/params/param_group.param_group_php.vc_param_group_parse_atts(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/params/param_group.param_group_php.vc_param_group_param_defaults(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/params/sorted_list.sorted_list_php.vc_sorted_list_form_field(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/params/sorted_list.sorted_list_php.vc_sorted_list_parts_list(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/params/sorted_list.sorted_list_php.vc_sorted_list_parse_value(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/params/tab_id.tab_id_php.vc_tab_id_form_field(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/params/textarea_html.textarea_html_php.vc_textarea_html_form_field(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/params/vc_grid_element.vc_grid_element_php.vc_vc_grid_element_form_field(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/params/vc_grid_element/vc_grid_id.vc_grid_id_php.vc_vc_grid_id_form_field(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/params/vc_grid_item.attributes_php.vc_gitem_template_attribute_filter_terms_css_classes(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Build css classes from terms of the post.
</summary>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/params/vc_grid_item.attributes_php.vc_gitem_template_attribute_post_image(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Get image for post
</summary>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/params/vc_grid_item.attributes_php.vc_gitem_template_attribute_featured_image(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/params/vc_grid_item.attributes_php.vc_gitem_template_attribute_vc_btn(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Create new btn
</summary>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/params/vc_grid_item.attributes_php.vc_gitem_template_attribute_post_image_url(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Get post image url
</summary>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/params/vc_grid_item.attributes_php.vc_gitem_template_attribute_post_image_url_href(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Get post image url with href for a dom element
</summary>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/params/vc_grid_item.attributes_php.vc_gitem_template_attribute_post_image_url_attr_lightbox(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Add image url as href with css classes for lightbox js plugin.
</summary>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/params/vc_grid_item.attributes_php.vc_gitem_template_attribute_post_image_url_attr_prettyphoto(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/params/vc_grid_item.attributes_php.vc_gitem_template_attribute_post_image_alt(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Get post image alt
</summary>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/params/vc_grid_item.attributes_php.vc_gitem_template_attribute_post_image_background_image_css(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Get post image url
</summary>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/params/vc_grid_item.attributes_php.vc_gitem_template_attribute_post_link_url(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Get post link
</summary>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/params/vc_grid_item.attributes_php.vc_gitem_template_attribute_post_date(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Get post date
</summary>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/params/vc_grid_item.attributes_php.vc_gitem_template_attribute_post_datetime(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Get post date time
</summary>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/params/vc_grid_item.attributes_php.vc_gitem_template_attribute_post_meta_value(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Get custom fields.
</summary>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/params/vc_grid_item.attributes_php.vc_gitem_template_attribute_post_data(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Get post data. Used as wrapper for others post data attributes.
</summary>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/params/vc_grid_item.attributes_php.vc_gitem_template_attribute_post_excerpt(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Get post excerpt. Used as wrapper for others post data attributes.
</summary>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/params/vc_grid_item.attributes_php.vc_gitem_template_attribute_post_title(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Get post excerpt. Used as wrapper for others post data attributes.
</summary>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/params/vc_grid_item.attributes_php.vc_gitem_template_attribute_post_author(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/params/vc_grid_item.attributes_php.vc_gitem_template_attribute_post_author_href(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/params/vc_grid_item.attributes_php.vc_gitem_template_attribute_post_categories(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/params/vc_link.vc_link_php.vc_vc_link_form_field(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/js_composer/include/params/vc_link.vc_link_php.vc_build_link(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework.template-tags_php.manual_categorized_blog(Pchp.Core.Context)">
<summary>
Determine whether blog/site has more than one category.
</summary>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/tgm.tgm-plugin-activation_php.load_tgm_plugin_activation?0(Pchp.Core.Context)">
<summary>
Ensure only one instance of the class is ever invoked.
</summary>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/tgm.tgm-plugin-activation_php.tgmpa?0(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Helper function to register a collection of required plugins.
</summary>
<param name="plugins" type="array">An array of plugin arrays.</param>
<param name="config" type="array">Optional. An array of configuration values.</param>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/framework/tgm.tgm-plugin-activation_php.tgmpa_load_bulk_installer?0(Pchp.Core.Context)">
<summary>
Load bulk installer
</summary>
</member>
<member name="M:&lt;Root&gt;wp-content/manual/manual/manual/template/bbpress.functions_php.ht_last_poster_block(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Last poster / freshness block for forums
</summary>
</member>
<member name="M:Elementor.Core.Admin.Admin_Notices.__construct">
</member>
<member name="M:Elementor.Core.Admin.Admin_Notices.get_name">
<summary>
Get module name.
Retrieve the module name.
</summary>
<returns>Module name.</returns>
</member>
<member name="M:Elementor.Core.Admin.Admin.get_name">
<summary>
Get module name.
Retrieve the module name.
</summary>
<returns>Module name.</returns>
</member>
<member name="M:Elementor.Core.Admin.Admin.maybe_redirect_to_getting_started">
</member>
<member name="M:Elementor.Core.Admin.Admin.enqueue_scripts">
<summary>
Enqueue admin scripts.
Registers all the admin scripts and enqueues them.

Fired by `admin_enqueue_scripts` action.
</summary>
</member>
<member name="M:Elementor.Core.Admin.Admin.enqueue_styles">
<summary>
Enqueue admin styles.
Registers all the admin styles and enqueues them.

Fired by `admin_enqueue_scripts` action.
</summary>
</member>
<member name="M:Elementor.Core.Admin.Admin.print_switch_mode_button(Pchp.Core.PhpValue)">
<summary>
Print switch mode button.
Adds a switch button in post edit screen (which has cpt support). To allow
the user to switch from the native WordPress editor to Elementor builder.

Fired by `edit_form_after_title` action.
</summary>
<param name="post" type="\WP_Post">The current post object.</param>
</member>
<member name="M:Elementor.Core.Admin.Admin.save_post(Pchp.Core.PhpValue)">
<summary>
Save post.
Flag the post mode when the post is saved.

Fired by `save_post` action.
</summary>
<param name="post_id" type="int">Post ID.</param>
</member>
<member name="M:Elementor.Core.Admin.Admin.add_elementor_post_state(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Add Elementor post state.
Adds a new "Elementor" post state to the post table.

Fired by `display_post_states` filter.
</summary>
<param name="post_states" type="array">An array of post display states.</param>
<param name="post" type="\WP_Post">The current post object.</param>
<returns>A filtered array of post display states.</returns>
</member>
<member name="M:Elementor.Core.Admin.Admin.body_status_classes(Pchp.Core.PhpValue)">
<summary>
Body status classes.
Adds CSS classes to the admin body tag.

Fired by `admin_body_class` filter.
</summary>
<param name="classes" type="string">Space-separated list of CSS classes.</param>
<returns>Space-separated list of CSS classes.</returns>
</member>
<member name="M:Elementor.Core.Admin.Admin.plugin_action_links(Pchp.Core.PhpValue)">
<summary>
Plugin action links.
Adds action links to the plugin list table

Fired by `plugin_action_links` filter.
</summary>
<param name="links" type="array">An array of plugin action links.</param>
<returns>An array of plugin action links.</returns>
</member>
<member name="M:Elementor.Core.Admin.Admin.plugin_row_meta(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Plugin row meta.
Adds row meta links to the plugin list table

Fired by `plugin_row_meta` filter.
</summary>
<param name="plugin_meta" type="array">An array of the plugin's metadata, including
the version, author, author URI, and plugin URI.</param>
<param name="plugin_file" type="string">Path to the plugin file, relative to the plugins
directory.</param>
<returns>An array of plugin row meta links.</returns>
</member>
<member name="M:Elementor.Core.Admin.Admin.admin_footer_text(Pchp.Core.PhpValue)">
<summary>
Admin footer text.
Modifies the "Thank you" text displayed in the admin footer.

Fired by `admin_footer_text` filter.
</summary>
<param name="footer_text" type="string">The content that will be printed.</param>
<returns>The content that will be printed.</returns>
</member>
<member name="M:Elementor.Core.Admin.Admin.register_dashboard_widgets">
<summary>
Register dashboard widgets.
Adds a new Elementor widgets to WordPress dashboard.

Fired by `wp_dashboard_setup` action.
</summary>
</member>
<member name="M:Elementor.Core.Admin.Admin.elementor_dashboard_overview_widget">
<summary>
Elementor dashboard widget.
Displays the Elementor dashboard widget.

Fired by `wp_add_dashboard_widget` function.
</summary>
</member>
<member name="M:Elementor.Core.Admin.Admin.get_dashboard_overview_widget_footer_actions">
<summary>
Get elementor dashboard overview widget footer actions.
Retrieves the footer action links displayed in elementor dashboard widget.
</summary>
</member>
<member name="M:Elementor.Core.Admin.Admin.admin_action_new_post">
<summary>
Admin action new post.
When a new post action is fired the title is set to 'Elementor' and the post ID.

Fired by `admin_action_elementor_new_post` action.
</summary>
</member>
<member name="M:Elementor.Core.Admin.Admin.add_new_template_template">
</member>
<member name="M:Elementor.Core.Admin.Admin.enqueue_new_template_scripts">
</member>
<member name="M:Elementor.Core.Admin.Admin.add_beta_tester_template">
</member>
<member name="M:Elementor.Core.Admin.Admin.enqueue_beta_tester_scripts">
</member>
<member name="M:Elementor.Core.Admin.Admin.init_new_template">
</member>
<member name="M:Elementor.Core.Admin.Admin.init_beta_tester(Pchp.Core.PhpValue)">
</member>
<member name="M:Elementor.Core.Admin.Admin.__construct">
<summary>
Admin constructor.
Initializing Elementor in WordPress admin.
</summary>
</member>
<member name="M:Elementor.Core.Admin.Admin.get_init_settings">
</member>
<member name="M:Elementor.Core.Admin.Canary_Deployment.get_name">
<summary>
Get module name.
Retrieve the module name.
</summary>
<returns>Module name.</returns>
</member>
<member name="M:Elementor.Core.Admin.Canary_Deployment.check_version(Pchp.Core.PhpValue)">
<summary>
Check version.
</summary>
<param name="transient" type="object">Plugin updates data.</param>
<returns>Plugin updates data.</returns>
</member>
<member name="M:Elementor.Core.Admin.Canary_Deployment.__construct">
</member>
<member name="M:Elementor.Core.Admin.Feedback.__construct">
</member>
<member name="M:Elementor.Core.Admin.Feedback.get_name">
<summary>
Get module name.
Retrieve the module name.
</summary>
<returns>Module name.</returns>
</member>
<member name="M:Elementor.Core.Admin.Feedback.enqueue_feedback_dialog_scripts">
<summary>
Enqueue feedback dialog scripts.
Registers the feedback dialog scripts and enqueues them.
</summary>
</member>
<member name="M:Elementor.Core.Admin.Feedback.localize_feedback_dialog_settings">
</member>
<member name="M:Elementor.Core.Admin.Feedback.print_deactivate_feedback_dialog">
<summary>
Print deactivate feedback dialog.
Display a dialog box to ask the user why he deactivated Elementor.

Fired by `admin_footer` filter.
</summary>
</member>
<member name="M:Elementor.Core.Admin.Feedback.ajax_elementor_deactivate_feedback">
<summary>
Ajax elementor deactivate feedback.
Send the user feedback when Elementor is deactivated.

Fired by `wp_ajax_elementor_deactivate_feedback` action.
</summary>
</member>
<member name="M:Elementor.Core.Admin.Feedback.get_init_settings">
</member>
<member name="M:Elementor.Core.Admin.Feedback.is_plugins_screen">
</member>
<member name="M:Elementor.Core.Admin.Notices.Base_Notice.should_print">
<summary>
Determine if the notice should be printed or not.
</summary>
</member>
<member name="M:Elementor.Core.Admin.Notices.Base_Notice.get_config">
<summary>
Returns the config of the notice itself.
based on that config the notice will be printed.
</summary>
</member>
<member name="M:Elementor.Core.Admin.Notices.Elementor_Dev_Notice.should_print">
</member>
<member name="M:Elementor.Core.Admin.Notices.Elementor_Dev_Notice.get_config">
</member>
<member name="M:Elementor.Core.Admin.Notices.Elementor_Dev_Notice.get_plugins">
<summary>
Return all the plugins names.
This method is protected so it can be mocked in tests.
</summary>
</member>
<member name="M:Elementor.Core.Admin.Notices.Elementor_Dev_Notice.is_elementor_dev_installed">
<summary>
Checks if elementor dev is installed
</summary>
</member>
<member name="M:Elementor.Core.Admin.Notices.Elementor_Dev_Notice.is_install_screen">
<summary>
Checks if the admin screen is install screen.
</summary>
</member>
<member name="M:Elementor.Core.Admin.Notices.Elementor_Dev_Notice.is_promotion_plugins_installed">
<summary>
Checks if is one of the promotion plugins is installed
</summary>
</member>
<member name="M:Elementor.Core.Admin.Notices.Elementor_Dev_Notice.is_promotion_options_enabled">
<summary>
Checks if is one of the promotion options is enable.
</summary>
</member>
<member name="M:Elementor.Core.Admin.Notices.Elementor_Dev_Notice.has_at_least_one_active_experiment">
<summary>
Checks if as at least one active experiment (The state must be "active" and not default-active).
</summary>
</member>
<member name="M:Elementor.Core.Admin.UI.Components.Button.get_name">
</member>
<member name="M:Elementor.Core.Admin.UI.Components.Button.get_options(Pchp.Core.PhpValue)">
<param name="option" type="string">Optional default is null</param>
</member>
<member name="M:Elementor.Core.Admin.UI.Components.Button.get_default_options(Pchp.Core.PhpValue)">
<param name="option" type="null"></param>
</member>
<member name="M:Elementor.Core.App.App.get_name">
<summary>
Get module name.
Retrieve the module name.
</summary>
<returns>Module name.</returns>
</member>
<member name="M:Elementor.Core.App.App.get_elementor_ui_theme_preference">
<summary>
Get Elementor UI theme preference.
Retrieve the user UI theme preference as defined by editor preferences manager.
</summary>
<returns>Preferred UI theme.</returns>
</member>
<member name="M:Elementor.Core.App.App.enqueue_dark_theme_detection_script">
<summary>
Enqueue dark theme detection script.
Enqueues an inline script that detects user-agent settings for dark mode and adds a complimentary class to the body tag.
</summary>
</member>
<member name="M:Elementor.Core.App.Modules.ImportExport.Directories.Base.export">
</member>
<member name="M:Elementor.Core.App.Modules.ImportExport.Directories.Base.import(Pchp.Core.PhpArray)">
<param name="import_settings" type="array"></param>
</member>
<member name="M:Elementor.Core.App.Modules.ImportExport.Module.get_name">
<summary>
Get name.
</summary>
</member>
<member name="M:Elementor.Core.App.Modules.ImportExport.Wp_Cli.export(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Export a Kit
[--include]
Which type of content to include. Possible values are 'content', 'templates', 'site-settings'.
if this parameter won't be specified, All data types will be included.

## EXAMPLES

1. wp elementor kit export path/to/export-file-name.zip
- This will export all site data to the specified file name.

2. wp elementor kit export path/to/export-file-name.zip --include=kit-settings,content
- This will export only site settings and content.
</summary>
<param name="args" type="array"></param>
<param name="assoc_args" type="array"></param>
</member>
<member name="M:Elementor.Core.App.Modules.ImportExport.Wp_Cli.import(Pchp.Core.PhpArray,Pchp.Core.PhpArray)">
<summary>
Import a Kit
[--include]
Which type of content to include. Possible values are 'content', 'templates', 'site-settings'.
if this parameter won't be specified, All data types will be included.

[--overrideConditions]
Templates ids to override conditions for.

[--sourceType]
Which source type is used in the current session. Available values are 'local', 'remote', 'library'.
The default value is 'local'

## EXAMPLES

1. wp elementor kit import path/to/elementor-kit.zip
- This will import the whole kit file content.

2. wp elementor kit import path/to/elementor-kit.zip --include=site-settings,content
- This will import only site settings and content.

3. wp elementor kit import path/to/elementor-kit.zip --overrideConditions=3478,4520
- This will import all content and will override conditions for the given template ids.
</summary>
<param name="args" type="array"></param>
<param name="assoc_args" type="array"></param>
</member>
<member name="M:Elementor.Core.App.Modules.ImportExport.Wp_Cli.get_url_from_library(Pchp.Core.PhpValue)">
<summary>
Helper to get kit url by the kit id
TODO: Maybe extract it.
</summary>
</member>
<member name="M:Elementor.Core.App.Modules.ImportExport.Wp_Cli.create_temp_file_from_url(Pchp.Core.PhpValue)">
<summary>
Helper to get kit zip file path by the kit url
TODO: Maybe extract it.
</summary>
</member>
<member name="M:Elementor.Core.App.Modules.KitLibrary.Data.Base_Controller.get_repository">
</member>
<member name="M:Elementor.Core.App.Modules.KitLibrary.Data.Kits.Controller.get_items(Pchp.Core.PhpValue)">
<param name="request" type="\WP_REST_Request"></param>
</member>
<member name="M:Elementor.Core.App.Modules.KitLibrary.Data.Kits.Controller.get_item(Pchp.Core.PhpValue)">
<param name="request" type="\WP_REST_Request"></param>
</member>
<member name="M:Elementor.Core.App.Modules.KitLibrary.Data.Kits.Controller.get_name">
</member>
<member name="M:Elementor.Core.App.Modules.KitLibrary.Data.Kits.Controller.register_endpoints">
<summary>
Must implement.
</summary>
</member>
<member name="M:Elementor.Core.App.Modules.KitLibrary.Data.Kits.Controller.register_internal_endpoints">
<summary>
Register internal endpoint.
</summary>
</member>
<member name="M:Elementor.Core.App.Modules.KitLibrary.Data.Kits.Endpoints.Favorites.create_item(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<param name="id" type="string"></param>
<param name="request" type="\WP_REST_Request"></param>
</member>
<member name="M:Elementor.Core.App.Modules.KitLibrary.Data.Kits.Endpoints.Favorites.delete_item(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<param name="id" type="string"></param>
<param name="request" type="\WP_REST_Request"></param>
</member>
<member name="M:Elementor.Core.App.Modules.KitLibrary.Data.Repository.get_all(Pchp.Core.PhpValue)">
<summary>
Get all kits.
</summary>
<param name="force_api_request" type="false"></param>
</member>
<member name="M:Elementor.Core.App.Modules.KitLibrary.Data.Repository.find(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Get specific kit.
</summary>
<param name="options" type="array"></param>
</member>
<member name="M:Elementor.Core.App.Modules.KitLibrary.Data.Repository.get_taxonomies(Pchp.Core.PhpValue)">
<param name="force_api_request" type="false"></param>
</member>
<member name="M:Elementor.Core.App.Modules.KitLibrary.Data.Repository.get_download_link(Pchp.Core.PhpValue)">
</member>
<member name="M:Elementor.Core.App.Modules.KitLibrary.Data.Repository.add_to_favorites(Pchp.Core.PhpValue)">
</member>
<member name="M:Elementor.Core.App.Modules.KitLibrary.Data.Repository.remove_from_favorites(Pchp.Core.PhpValue)">
</member>
<member name="M:Elementor.Core.App.Modules.KitLibrary.Data.Repository.get_kits_data(Pchp.Core.PhpValue)">
<param name="force_api_request" type="bool"></param>
</member>
<member name="M:Elementor.Core.App.Modules.KitLibrary.Data.Repository.get_taxonomies_data(Pchp.Core.PhpValue)">
<param name="force_api_request" type="bool"></param>
</member>
<member name="M:Elementor.Core.App.Modules.KitLibrary.Data.Repository.transform_kit_api_response(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<param name="manifest" type="null"></param>
</member>
<member name="M:Elementor.Core.App.Modules.KitLibrary.Data.Repository.transform_manifest_api_response(Pchp.Core.PhpValue)">
</member>
<member name="M:Elementor.Core.App.Modules.KitLibrary.Data.Repository.__construct(Elementor.Core.App.Modules.KitLibrary.Connect.Kit_Library,Elementor.Modules.Library.User_Favorites)">
<summary>
Repository constructor.
</summary>
<param name="kit_library" type="Kit_Library"></param>
<param name="user_favorites" type="User_Favorites"></param>
</member>
<member name="M:Elementor.Core.App.Modules.KitLibrary.Data.Taxonomies.Controller.register_internal_endpoints">
<summary>
Register internal endpoint.
</summary>
</member>
<member name="M:Elementor.Core.App.Modules.KitLibrary.Data.Taxonomies.Controller.get_items(Pchp.Core.PhpValue)">
<param name="request" type="\WP_REST_Request"></param>
</member>
<member name="M:Elementor.Core.App.Modules.KitLibrary.Module.get_name">
<summary>
Get name.
</summary>
</member>
<member name="M:Elementor.Core.App.Modules.KitLibrary.Module.register_admin_menu">
<summary>
Register the admin menu.
</summary>
</member>
<member name="M:Elementor.Core.App.Modules.KitLibrary.Module.__construct">
<summary>
Module constructor.
</summary>
</member>
<member name="M:Elementor.Core.App.Modules.SiteEditor.Module.get_name">
<summary>
Get name.
</summary>
</member>
<member name="M:Elementor.Core.Base.App.print_config(Pchp.Core.PhpValue)">
<summary>
Print config.
Used to print the app and its components settings as a JavaScript object.
</summary>
<param name="handle" type="string">Optional</param>
</member>
<member name="M:Elementor.Core.Base.App.get_components_config">
<summary>
Get components config.
Retrieves the app components settings.
</summary>
</member>
<member name="M:Elementor.Core.Base.BackgroundProcess.WP_Async_Request.__construct">
<summary>
Initiate new async request
</summary>
</member>
<member name="M:Elementor.Core.Base.BackgroundProcess.WP_Async_Request.data(Pchp.Core.PhpValue)">
<summary>
Set data used during the request
</summary>
<param name="data" type="array">Data.</param>
<returns>$this</returns>
</member>
<member name="M:Elementor.Core.Base.BackgroundProcess.WP_Async_Request.dispatch">
<summary>
Dispatch the async request
</summary>
</member>
<member name="M:Elementor.Core.Base.BackgroundProcess.WP_Async_Request.get_query_args">
<summary>
Get query args
</summary>
</member>
<member name="M:Elementor.Core.Base.BackgroundProcess.WP_Async_Request.get_query_url">
<summary>
Get query URL
</summary>
</member>
<member name="M:Elementor.Core.Base.BackgroundProcess.WP_Async_Request.get_post_args">
<summary>
Get post args
</summary>
</member>
<member name="M:Elementor.Core.Base.BackgroundProcess.WP_Async_Request.maybe_handle">
<summary>
Maybe handle
Check for correct nonce and pass to handler.
</summary>
</member>
<member name="M:Elementor.Core.Base.BackgroundProcess.WP_Async_Request.handle">
<summary>
Handle
Override this method to perform any actions required
during the async request.
</summary>
</member>
<member name="M:Elementor.Core.Base.BackgroundProcess.WP_Background_Process.__construct">
<summary>
Initiate new background process
</summary>
</member>
<member name="M:Elementor.Core.Base.BackgroundProcess.WP_Background_Process.dispatch">
<summary>
Dispatch
</summary>
</member>
<member name="M:Elementor.Core.Base.BackgroundProcess.WP_Background_Process.push_to_queue(Pchp.Core.PhpValue)">
<summary>
Push to queue
</summary>
<param name="data" type="mixed">Data.</param>
<returns>$this</returns>
</member>
<member name="M:Elementor.Core.Base.BackgroundProcess.WP_Background_Process.save">
<summary>
Save queue
</summary>
<returns>$this</returns>
</member>
<member name="M:Elementor.Core.Base.BackgroundProcess.WP_Background_Process.update(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Update queue
</summary>
<param name="key" type="string">Key.</param>
<param name="data" type="array">Data.</param>
<returns>$this</returns>
</member>
<member name="M:Elementor.Core.Base.BackgroundProcess.WP_Background_Process.delete(Pchp.Core.PhpValue)">
<summary>
Delete queue
</summary>
<param name="key" type="string">Key.</param>
<returns>$this</returns>
</member>
<member name="M:Elementor.Core.Base.BackgroundProcess.WP_Background_Process.generate_key(Pchp.Core.PhpValue)">
<summary>
Generate key
Generates a unique key based on microtime. Queue items are
given a unique key so that they can be merged upon save.
</summary>
<param name="length" type="int">Length.</param>
</member>
<member name="M:Elementor.Core.Base.BackgroundProcess.WP_Background_Process.maybe_handle">
<summary>
Maybe process queue
Checks whether data exists within the queue and that
the process is not already running.
</summary>
</member>
<member name="M:Elementor.Core.Base.BackgroundProcess.WP_Background_Process.is_queue_empty">
<summary>
Is queue empty
</summary>
</member>
<member name="M:Elementor.Core.Base.BackgroundProcess.WP_Background_Process.is_process_running">
<summary>
Is process running
Check whether the current process is already running
in a background process.
</summary>
</member>
<member name="M:Elementor.Core.Base.BackgroundProcess.WP_Background_Process.lock_process">
<summary>
Lock process
Lock the process so that multiple instances can't run simultaneously.
Override if applicable, but the duration should be greater than that
defined in the time_exceeded() method.
</summary>
</member>
<member name="M:Elementor.Core.Base.BackgroundProcess.WP_Background_Process.unlock_process">
<summary>
Unlock process
Unlock the process so that other instances can spawn.
</summary>
<returns>$this</returns>
</member>
<member name="M:Elementor.Core.Base.BackgroundProcess.WP_Background_Process.get_batch">
<summary>
Get batch
</summary>
<returns>Return the first batch from the queue</returns>
</member>
<member name="M:Elementor.Core.Base.BackgroundProcess.WP_Background_Process.handle">
<summary>
Handle
Pass each queue item to the task handler, while remaining
within server memory and time limit constraints.
</summary>
</member>
<member name="M:Elementor.Core.Base.BackgroundProcess.WP_Background_Process.memory_exceeded">
<summary>
Memory exceeded
Ensures the batch process never exceeds 90%
of the maximum WordPress memory.
</summary>
</member>
<member name="M:Elementor.Core.Base.BackgroundProcess.WP_Background_Process.get_memory_limit">
<summary>
Get memory limit
</summary>
</member>
<member name="M:Elementor.Core.Base.BackgroundProcess.WP_Background_Process.time_exceeded">
<summary>
Time exceeded.
Ensures the batch never exceeds a sensible time limit.
A timeout limit of 30s is common on shared hosting.
</summary>
</member>
<member name="M:Elementor.Core.Base.BackgroundProcess.WP_Background_Process.complete">
<summary>
Complete.
Override if applicable, but ensure that the below actions are
performed, or, call parent::complete().
</summary>
</member>
<member name="M:Elementor.Core.Base.BackgroundProcess.WP_Background_Process.schedule_cron_healthcheck(Pchp.Core.PhpValue)">
<summary>
Schedule cron healthcheck
</summary>
<param name="schedules" type="mixed">Schedules.</param>
</member>
<member name="M:Elementor.Core.Base.BackgroundProcess.WP_Background_Process.handle_cron_healthcheck">
<summary>
Handle cron healthcheck
Restart the background process if not already running
and data exists in the queue.
</summary>
</member>
<member name="M:Elementor.Core.Base.BackgroundProcess.WP_Background_Process.schedule_event">
<summary>
Schedule event
</summary>
</member>
<member name="M:Elementor.Core.Base.BackgroundProcess.WP_Background_Process.clear_scheduled_event">
<summary>
Clear scheduled event
</summary>
</member>
<member name="M:Elementor.Core.Base.BackgroundProcess.WP_Background_Process.cancel_process">
<summary>
Cancel Process
Stop processing queue items, clear cronjob and delete batch.
</summary>
</member>
<member name="M:Elementor.Core.Base.BackgroundProcess.WP_Background_Process.task(Pchp.Core.PhpValue)">
<summary>
Task
Override this method to perform any actions required on each
queue item. Return the modified item for further processing
in the next pass through. Or, return false to remove the
item from the queue.
</summary>
<param name="item" type="mixed">Queue item to iterate over.</param>
</member>
<member name="M:Elementor.Core.Base.Background_Task.dispatch">
<summary>
Dispatch updater.
Updater will still run via cron job if this fails for any reason.
</summary>
</member>
<member name="M:Elementor.Core.Base.Background_Task.complete">
<summary>
Complete
Override if applicable, but ensure that the below actions are
performed, or, call parent::complete().
</summary>
</member>
<member name="M:Elementor.Core.Base.Background_Task.get_current_item">
</member>
<member name="M:Elementor.Core.Base.Background_Task.get_batch">
<summary>
Get batch.
</summary>
<returns>Return the first batch from the queue.</returns>
</member>
<member name="M:Elementor.Core.Base.Background_Task.handle_cron_healthcheck">
<summary>
Handle cron healthcheck
Restart the background process if not already running
and data exists in the queue.
</summary>
</member>
<member name="M:Elementor.Core.Base.Background_Task.schedule_event">
<summary>
Schedule fallback event.
</summary>
</member>
<member name="M:Elementor.Core.Base.Background_Task.is_running">
<summary>
Is the updater running?
</summary>
</member>
<member name="M:Elementor.Core.Base.Background_Task.batch_limit_exceeded">
<summary>
See if the batch limit has been exceeded.
</summary>
</member>
<member name="M:Elementor.Core.Base.Background_Task.handle">
<summary>
Handle.
Pass each queue item to the task handler, while remaining
within server memory and time limit constraints.
</summary>
</member>
<member name="M:Elementor.Core.Base.Background_Task.is_process_locked">
<summary>
Use the protected `is_process_running` method as a public method.
</summary>
</member>
<member name="M:Elementor.Core.Base.Background_Task.task(Pchp.Core.PhpValue)">
<summary>
Task
Override this method to perform any actions required on each
queue item. Return the modified item for further processing
in the next pass through. Or, return false to remove the
item from the queue.
</summary>
<param name="item" type="array"></param>
</member>
<member name="M:Elementor.Core.Base.Background_Task.schedule_cron_healthcheck(Pchp.Core.PhpValue)">
<summary>
Schedule cron healthcheck.
</summary>
<param name="schedules" type="array">Schedules.</param>
</member>
<member name="M:Elementor.Core.Base.Background_Task.is_memory_exceeded">
<summary>
See if the batch limit has been exceeded.
</summary>
</member>
<member name="M:Elementor.Core.Base.Background_Task.delete_all_batches">
<summary>
Delete all batches.
</summary>
</member>
<member name="M:Elementor.Core.Base.Background_Task.kill_process">
<summary>
Kill process.
Stop processing queue items, clear cronjob and delete all batches.
</summary>
</member>
<member name="M:Elementor.Core.Base.Base_Object.get_settings(Pchp.Core.PhpValue)">
<summary>
Get Settings.
</summary>
<param name="setting" type="string">Optional. The key of the requested setting. Default is null.</param>
<returns>An array of all settings, or a single value if `$setting` was specified.</returns>
</member>
<member name="M:Elementor.Core.Base.Base_Object.set_settings(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Set settings.
</summary>
<param name="key" type="array|string">If key is an array, the settings are overwritten by that array. Otherwise, the
settings of the key will be set to the given `$value` param.</param>
<param name="value" type="mixed">Optional. Default is null.</param>
</member>
<member name="M:Elementor.Core.Base.Base_Object.delete_setting(Pchp.Core.PhpValue)">
<summary>
Delete setting.
Deletes the settings array or a specific key of the settings array if `$key` is specified.
</summary>
<param name="key" type="string">Optional. Default is null.</param>
</member>
<member name="M:Elementor.Core.Base.Base_Object.get_items(Pchp.Core.Context,Pchp.Core.PhpArray,Pchp.Core.PhpValue)">
<summary>
Get items.
Utility method that receives an array with a needle and returns all the
items that match the needle. If needle is not defined the entire haystack
will be returned.
</summary>
<param name="haystack" type="array">An array of items.</param>
<param name="needle" type="string">Optional. Needle. Default is null.</param>
<returns>The whole haystack or the needle from the haystack when requested.</returns>
</member>
<member name="M:Elementor.Core.Base.Base_Object.get_init_settings">
<summary>
Get init settings.
Used to define the default/initial settings of the object. Inheriting classes may implement this method to define
their own default/initial settings.
</summary>
</member>
<member name="M:Elementor.Core.Base.Base_Object.ensure_settings">
<summary>
Ensure settings.
Ensures that the `$settings` member is initialized
</summary>
</member>
<member name="M:Elementor.Core.Base.Base_Object.has_own_method(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Has Own Method
Used for check whether the method passed as a parameter was declared in the current instance or inherited.
If a base_class_name is passed, it checks whether the method was declared in that class. If the method's
declaring class is the class passed as $base_class_name, it returns false. Otherwise (method was NOT declared
in $base_class_name), it returns true.

Example #1 - only $method_name is passed:
The initial declaration of `register_controls()` happens in the `Controls_Stack` class. However, all
widgets which have their own controls declare this function as well, overriding the original
declaration. If `has_own_method()` would be called by a Widget's class which implements `register_controls()`,
with 'register_controls' passed as the first parameter - `has_own_method()` will return true. If the Widget
does not declare `register_controls()`, `has_own_method()` will return false.

Example #2 - both $method_name and $base_class_name are passed
In this example, the widget class inherits from a base class `Widget_Base`, and the base implements
`register_controls()` to add certain controls to all widgets inheriting from it. `has_own_method()` is called by
the widget, with the string 'register_controls' passed as the first parameter, and 'Elementor\Widget_Base' (its full name
including the namespace) passed as the second parameter. If the widget class implements `register_controls()`,
`has_own_method` will return true. If the widget class DOESN'T implement `register_controls()`, it will return
false (because `Widget_Base` is the declaring class for `register_controls()`, and not the class that called
`has_own_method()`).
</summary>
<param name="method_name" type="string"></param>
<param name="base_class_name" type="string"></param>
<returns>True if the method was declared by the current instance, False if it was inherited.</returns>
</member>
<member name="M:Elementor.Core.Base.DB_Upgrades_Manager.start_run">
</member>
<member name="M:Elementor.Core.Base.Document.get_editor_panel_categories(Pchp.Core.Context)">
</member>
<member name="M:Elementor.Core.Base.Document.get_properties(Pchp.Core.Context)">
<summary>
Get properties.
Retrieve the document properties.
</summary>
<returns>Document properties.</returns>
</member>
<member name="M:Elementor.Core.Base.Document.get_editor_panel_config(Pchp.Core.Context,Pchp.Core.Reflection.PhpTypeInfo)">
</member>
<member name="M:Elementor.Core.Base.Document.get_title(Pchp.Core.Context)">
<summary>
Get element title.
Retrieve the element title.
</summary>
<returns>Element title.</returns>
</member>
<member name="M:Elementor.Core.Base.Document.get_property(Pchp.Core.Context,Pchp.Core.Reflection.PhpTypeInfo,Pchp.Core.PhpValue)">
<summary>
Get property.
Retrieve the document property.
</summary>
<param name="key" type="string">The property key.</param>
<returns>The property value.</returns>
</member>
<member name="M:Elementor.Core.Base.Document.get_class_full_name(Pchp.Core.Context,Pchp.Core.Reflection.PhpTypeInfo)">
</member>
<member name="M:Elementor.Core.Base.Document.get_unique_name">
</member>
<member name="M:Elementor.Core.Base.Document.get_post_type_title">
</member>
<member name="M:Elementor.Core.Base.Document.get_main_id">
</member>
<member name="M:Elementor.Core.Base.Document.render_element(Pchp.Core.PhpValue)">
<exception cref="Exception">If the widget was not found.</exception>
</member>
<member name="M:Elementor.Core.Base.Document.get_main_post">
</member>
<member name="M:Elementor.Core.Base.Document.get_wp_preview_url">
</member>
<member name="M:Elementor.Core.Base.Document.get_exit_to_dashboard_url">
</member>
<member name="M:Elementor.Core.Base.Document.get_newer_autosave">
<summary>
Get auto-saved post revision.
Retrieve the auto-saved post revision that is newer than current post.
</summary>
</member>
<member name="M:Elementor.Core.Base.Document.is_autosave">
</member>
<member name="M:Elementor.Core.Base.Document.is_revision">
<summary>
Check if the current document is a 'revision'
</summary>
</member>
<member name="M:Elementor.Core.Base.Document.is_trash">
<summary>
Checks if the current document status is 'trash'.
</summary>
</member>
<member name="M:Elementor.Core.Base.Document.get_autosave(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<param name="user_id" type="int"></param>
<param name="create" type="bool"></param>
</member>
<member name="M:Elementor.Core.Base.Document.filter_admin_row_actions(Pchp.Core.PhpValue)">
<summary>
Add/Remove edit link in dashboard.
Add or remove an edit link to the post/page action links on the post/pages list table.

Fired by `post_row_actions` and `page_row_actions` filters.
</summary>
<param name="actions" type="array">An array of row action links.</param>
<returns>An updated array of row action links.</returns>
</member>
<member name="M:Elementor.Core.Base.Document.is_editable_by_current_user">
</member>
<member name="M:Elementor.Core.Base.Document.get_initial_config">
</member>
<member name="M:Elementor.Core.Base.Document.register_controls">
</member>
<member name="M:Elementor.Core.Base.Document.save(Pchp.Core.PhpValue)">
</member>
<member name="M:Elementor.Core.Base.Document.update_settings(Pchp.Core.PhpArray)">
<param name="new_settings" type="array"></param>
</member>
<member name="M:Elementor.Core.Base.Document.is_built_with_elementor">
<summary>
Is built with Elementor.
Check whether the post was built with Elementor.
</summary>
<returns>Whether the post was built with Elementor.</returns>
</member>
<member name="M:Elementor.Core.Base.Document.set_is_built_with_elementor(Pchp.Core.PhpValue)">
<summary>
Mark the post as "built with elementor" or not.
</summary>
<param name="is_built_with_elementor" type="bool"></param>
<returns>$this</returns>
</member>
<member name="M:Elementor.Core.Base.Document.get_edit_url">
</member>
<member name="M:Elementor.Core.Base.Document.get_preview_url">
</member>
<member name="M:Elementor.Core.Base.Document.get_json_meta(Pchp.Core.PhpValue)">
<param name="key" type="string"></param>
</member>
<member name="M:Elementor.Core.Base.Document.get_elements_raw_data(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<param name="data" type="null"></param>
<param name="with_html_content" type="bool"></param>
</member>
<member name="M:Elementor.Core.Base.Document.get_elements_data(Pchp.Core.PhpValue)">
<param name="status" type="string"></param>
</member>
<member name="M:Elementor.Core.Base.Document.get_db_document_settings">
<summary>
Get document setting from DB.
</summary>
</member>
<member name="M:Elementor.Core.Base.Document.convert_to_elementor">
</member>
<member name="M:Elementor.Core.Base.Document.print_elements_with_wrapper(Pchp.Core.PhpValue)">
</member>
<member name="M:Elementor.Core.Base.Document.get_css_wrapper_selector">
</member>
<member name="M:Elementor.Core.Base.Document.get_panel_page_settings">
</member>
<member name="M:Elementor.Core.Base.Document.get_post">
</member>
<member name="M:Elementor.Core.Base.Document.get_permalink">
</member>
<member name="M:Elementor.Core.Base.Document.get_content(Pchp.Core.PhpValue)">
</member>
<member name="M:Elementor.Core.Base.Document.delete">
</member>
<member name="M:Elementor.Core.Base.Document.save_elements(Pchp.Core.PhpValue)">
<summary>
Save editor elements.
Save data from the editor to the database.
</summary>
<param name="elements" type="array"></param>
</member>
<member name="M:Elementor.Core.Base.Document.get_autosave_id(Pchp.Core.PhpValue)">
<param name="user_id" type="int">Optional. User ID. Default value is `0`.</param>
</member>
<member name="M:Elementor.Core.Base.Document.save_template_type">
</member>
<member name="M:Elementor.Core.Base.Document.get_template_type">
</member>
<member name="M:Elementor.Core.Base.Document.get_main_meta(Pchp.Core.PhpValue)">
<param name="key" type="string">Meta data key.</param>
</member>
<member name="M:Elementor.Core.Base.Document.update_main_meta(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<param name="key" type="string">Meta data key.</param>
<param name="value" type="string">Meta data value.</param>
</member>
<member name="M:Elementor.Core.Base.Document.delete_main_meta(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<param name="key" type="string">Meta data key.</param>
<param name="value" type="string">Optional. Meta data value. Default is an empty string.</param>
</member>
<member name="M:Elementor.Core.Base.Document.get_meta(Pchp.Core.PhpValue)">
<param name="key" type="string">Meta data key.</param>
</member>
<member name="M:Elementor.Core.Base.Document.update_meta(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<param name="key" type="string">Meta data key.</param>
<param name="value" type="mixed">Meta data value.</param>
</member>
<member name="M:Elementor.Core.Base.Document.delete_meta(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<param name="key" type="string">Meta data key.</param>
<param name="value" type="string">Meta data value.</param>
</member>
<member name="M:Elementor.Core.Base.Document.get_last_edited">
</member>
<member name="M:Elementor.Core.Base.Document.is_saving">
</member>
<member name="M:Elementor.Core.Base.Document.set_is_saving(Pchp.Core.PhpValue)">
<returns>$this</returns>
</member>
<member name="M:Elementor.Core.Base.Document.__construct(Pchp.Core.PhpArray)">
<param name="data" type="array"></param>
<exception cref="Exception">If the post does not exist.</exception>
</member>
<member name="M:Elementor.Core.Base.Document.import(Pchp.Core.PhpArray)">
<summary>
Import
Allows to import an external data to a document
</summary>
<param name="data" type="array"></param>
</member>
<member name="M:Elementor.Core.Base.Document.save_settings(Pchp.Core.PhpValue)">
</member>
<member name="M:Elementor.Core.Base.Document.print_elements(Pchp.Core.PhpValue)">
</member>
<member name="M:Elementor.Core.Base.Elements_Iteration_Actions.Base.is_action_needed">
<summary>
Is Action Needed.
Runs only at runtime and used as a flag to determine if all methods should run on page render.
If returns false, all methods will run only on page save.
If returns true, all methods will run on both page render and on save.
</summary>
</member>
<member name="M:Elementor.Core.Base.Elements_Iteration_Actions.Base.unique_element_action(Elementor.Element_Base)">
<summary>
Unique Element Action.
Will be triggered for each unique page element - section / column / widget unique type (heading, icon etc.).
</summary>
</member>
<member name="M:Elementor.Core.Base.Elements_Iteration_Actions.Base.element_action(Elementor.Element_Base)">
<summary>
Element Action.
Will be triggered for each page element - section / column / widget.
</summary>
</member>
<member name="M:Elementor.Core.Base.Elements_Iteration_Actions.Base.after_elements_iteration">
<summary>
After Elements Iteration.
Will be triggered after all page elements iteration has ended.
</summary>
</member>
<member name="M:Elementor.Core.Base.Module.get_name">
<summary>
Get module name.
Retrieve the module name.
</summary>
<returns>Module name.</returns>
</member>
<member name="M:Elementor.Core.Base.Module.instance(Pchp.Core.Context,Pchp.Core.Reflection.PhpTypeInfo)">
<summary>
Instance.
Ensures only one instance of the module class is loaded or can be loaded.
</summary>
<returns>An instance of the class.</returns>
</member>
<member name="M:Elementor.Core.Base.Module.is_active(Pchp.Core.Context)">
</member>
<member name="M:Elementor.Core.Base.Module.class_name(Pchp.Core.Context,Pchp.Core.Reflection.PhpTypeInfo)">
<summary>
Class name.
Retrieve the name of the class.
</summary>
</member>
<member name="M:Elementor.Core.Base.Module.__clone">
<summary>
Clone.
Disable class cloning and throw an error on object clone.

The whole idea of the singleton design pattern is that there is a single
object. Therefore, we don't want the object to be cloned.
</summary>
</member>
<member name="M:Elementor.Core.Base.Module.__wakeup">
<summary>
Wakeup.
Disable unserializing of the class.
</summary>
</member>
<member name="M:Elementor.Core.Base.Module.get_reflection">
</member>
<member name="M:Elementor.Core.Base.Module.add_component(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Add module component.
Add new component to the current module.
</summary>
<param name="id" type="string">Component ID.</param>
<param name="instance" type="mixed">An instance of the component.</param>
</member>
<member name="M:Elementor.Core.Base.Module.get_components">
</member>
<member name="M:Elementor.Core.Base.Module.get_component(Pchp.Core.PhpValue)">
<summary>
Get module component.
Retrieve the module component.
</summary>
<param name="id" type="string">Component ID.</param>
<returns>An instance of the component, or `false` if the component
doesn't exist.</returns>
</member>
<member name="M:Elementor.Core.Base.Module.get_assets_url(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Get assets url.
</summary>
<param name="file_name" type="string"></param>
<param name="file_extension" type="string"></param>
<param name="relative_url" type="string">Optional. Default is null.</param>
<param name="add_min_suffix" type="string">Optional. Default is 'default'.</param>
</member>
<member name="M:Elementor.Core.Base.Module.get_js_assets_url(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Get js assets url
</summary>
<param name="file_name" type="string"></param>
<param name="relative_url" type="string">Optional. Default is null.</param>
<param name="add_min_suffix" type="string">Optional. Default is 'default'.</param>
</member>
<member name="M:Elementor.Core.Base.Module.get_css_assets_url(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Get css assets url
</summary>
<param name="file_name" type="string"></param>
<param name="relative_url" type="string">Optional. Default is null.</param>
<param name="add_min_suffix" type="string">Optional. Default is 'default'.</param>
<param name="add_direction_suffix" type="bool">Optional. Default is `false`</param>
</member>
<member name="M:Elementor.Core.Base.Module.get_assets_base_url">
<summary>
Get assets base url
</summary>
</member>
<member name="M:Elementor.Core.Base.Module.get_assets_relative_url">
<summary>
Get assets relative url
</summary>
</member>
<member name="M:Elementor.Core.Base.Module.get_widgets">
<summary>
Get the module's associated widgets.
</summary>
</member>
<member name="M:Elementor.Core.Base.Module.init_widgets">
<summary>
Initialize the module related widgets.
</summary>
</member>
<member name="M:Elementor.Core.Breakpoints.Breakpoint.get_name">
<summary>
Get Name
</summary>
</member>
<member name="M:Elementor.Core.Breakpoints.Breakpoint.is_enabled">
<summary>
Is Enabled
Check if the breakpoint is enabled or not. The breakpoint instance receives this data from
the Breakpoints Manager.
</summary>
<returns>$is_enabled class variable</returns>
</member>
<member name="M:Elementor.Core.Breakpoints.Breakpoint.get_label">
<summary>
Get Label
Retrieve the breakpoint label.
</summary>
<returns>$label class variable</returns>
</member>
<member name="M:Elementor.Core.Breakpoints.Breakpoint.get_value">
<summary>
Get Value
Retrieve the saved breakpoint value.
</summary>
<returns>$value class variable</returns>
</member>
<member name="M:Elementor.Core.Breakpoints.Breakpoint.is_custom">
<summary>
Is Custom
Check if the breakpoint's value is a custom or default value.
</summary>
<returns>$is_custom class variable</returns>
</member>
<member name="M:Elementor.Core.Breakpoints.Breakpoint.get_default_value">
<summary>
Get Default Value
Returns the Breakpoint's default value.
</summary>
<returns>$default_value class variable</returns>
</member>
<member name="M:Elementor.Core.Breakpoints.Breakpoint.get_direction">
<summary>
Get Direction
Returns the Breakpoint's direction ('min'/'max').
</summary>
<returns>$direction class variable</returns>
</member>
<member name="M:Elementor.Core.Breakpoints.Breakpoint.init_value">
<summary>
Set Value
Set the `$value` class variable and the `$is_custom` class variable.
</summary>
<returns>$value class variable</returns>
</member>
<member name="M:Elementor.Core.Breakpoints.Manager.get_breakpoints(Pchp.Core.PhpValue)">
<summary>
Get Breakpoints
Retrieve the array containing instances of all breakpoints existing in the system, or a single breakpoint if a
name is passed.
</summary>
</member>
<member name="M:Elementor.Core.Breakpoints.Manager.get_active_breakpoints(Pchp.Core.PhpValue)">
<summary>
Get Active Breakpoints
Retrieve the array of --enabled-- breakpoints, or a single breakpoint if a name is passed.
</summary>
<param name="breakpoint_name" type="string|null"></param>
</member>
<member name="M:Elementor.Core.Breakpoints.Manager.get_active_devices_list(Pchp.Core.PhpValue)">
<summary>
Get Active Devices List
Retrieve an array containing the keys of all active devices, including 'desktop'.
</summary>
<param name="args" type="array"></param>
</member>
<member name="M:Elementor.Core.Breakpoints.Manager.has_custom_breakpoints">
<summary>
Has Custom Breakpoints
Checks whether there are currently custom breakpoints saved in the database.
Returns true if there are breakpoint values saved in the active kit.
If the user has activated any additional custom breakpoints (mobile extra, tablet extra, laptop, widescreen) -
that is considered as having custom breakpoints.
</summary>
</member>
<member name="M:Elementor.Core.Breakpoints.Manager.get_device_min_breakpoint(Pchp.Core.PhpValue)">
<summary>
Get Device Min Breakpoint
For a given device, return the minimum possible breakpoint. Except for the cases of mobile and widescreen
devices, A device's min breakpoint is determined by the previous device's max breakpoint + 1px.
</summary>
<param name="device_name" type="string"></param>
<returns>the min breakpoint of the passed device</returns>
</member>
<member name="M:Elementor.Core.Breakpoints.Manager.get_desktop_min_point">
<summary>
Get Desktop Min Breakpoint
Returns the minimum possible breakpoint for the default (desktop) device.
</summary>
<returns>the min breakpoint of the passed device</returns>
</member>
<member name="M:Elementor.Core.Breakpoints.Manager.get_responsive_icons_classes_map(Pchp.Core.PhpValue)">
<summary>
Get Responsive Icons Classes Map
If a $device parameter is passed, this method retrieves the device's icon class list (the ones attached to the `&lt;i&gt;`
element). If no parameter is passed, it returns an array of devices containing each device's icon class list.

This method was created because 'mobile_extra' and 'tablet_extra' breakpoint icons need to be tilted by 90
degrees, and this tilt is achieved in CSS via the class `eicon-tilted`.
</summary>
</member>
<member name="M:Elementor.Core.Breakpoints.Manager.get_default_config(Pchp.Core.Context)">
<summary>
Get Default Config
Retrieve the default breakpoints config array. The 'selector' property is used for CSS generation (the
Stylesheet::add_device() method).
</summary>
</member>
<member name="M:Elementor.Core.Breakpoints.Manager.get_breakpoints_config">
<summary>
Get Breakpoints Config
Iterates over an array of all of the system's breakpoints (both active and inactive), queries each breakpoint's
class instance, and generates an array containing data on each breakpoint: its label, current value, direction
('min'/'max') and whether it is enabled or not.
</summary>
</member>
<member name="M:Elementor.Core.Breakpoints.Manager.get_responsive_control_duplication_mode">
<summary>
Get Responsive Control Duplication Mode
Retrieve the value of the $responsive_control_duplication_mode private class variable.
See the variable's PHPDoc for details.
</summary>
</member>
<member name="M:Elementor.Core.Breakpoints.Manager.set_responsive_control_duplication_mode(Pchp.Core.PhpValue)">
<summary>
Set Responsive Control Duplication Mode
Sets  the value of the $responsive_control_duplication_mode private class variable.
See the variable's PHPDoc for details.
</summary>
<param name="mode" type="string"></param>
</member>
<member name="M:Elementor.Core.Breakpoints.Manager.get_stylesheet_templates_path(Pchp.Core.Context)">
<summary>
Get Stylesheet Templates Path
</summary>
</member>
<member name="M:Elementor.Core.Breakpoints.Manager.compile_stylesheet_templates(Pchp.Core.Context)">
<summary>
Compile Stylesheet Templates
</summary>
</member>
<member name="M:Elementor.Core.Breakpoints.Manager.init_breakpoints">
<summary>
Init Breakpoints
Creates the breakpoints array, containing instances of each breakpoint. Returns an array of ALL breakpoints,
both enabled and disabled.
</summary>
</member>
<member name="M:Elementor.Core.Breakpoints.Manager.init_active_breakpoints">
<summary>
Init Active Breakpoints
Create/Refresh the array of --enabled-- breakpoints.
</summary>
</member>
<member name="M:Elementor.Core.Breakpoints.Manager.get_stylesheet_templates(Pchp.Core.Context)">
<summary>
Get Stylesheet Templates
</summary>
</member>
<member name="M:Elementor.Core.Common.App.__construct">
<summary>
App constructor.
</summary>
</member>
<member name="M:Elementor.Core.Common.App.init_components">
<summary>
Init components
Initializing common components.
</summary>
</member>
<member name="M:Elementor.Core.Common.App.get_name">
<summary>
Get name.
Retrieve the app name.
</summary>
<returns>Common app name.</returns>
</member>
<member name="M:Elementor.Core.Common.App.register_scripts">
<summary>
Register scripts.
Register common scripts.
</summary>
</member>
<member name="M:Elementor.Core.Common.App.register_styles">
<summary>
Register styles.
Register common styles.
</summary>
</member>
<member name="M:Elementor.Core.Common.App.add_template(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Add template.
</summary>
<param name="template" type="string">Can be either a link to template file or template
HTML content.</param>
<param name="type" type="string">Optional. Whether to handle the template as path
or text. Default is `path`.</param>
</member>
<member name="M:Elementor.Core.Common.App.print_templates">
<summary>
Print Templates
Prints all registered templates.
</summary>
</member>
<member name="M:Elementor.Core.Common.App.get_init_settings">
<summary>
Get init settings.
Define the default/initial settings of the common app.
</summary>
</member>
<member name="M:Elementor.Core.Common.App.add_default_templates">
<summary>
Add default templates.
Register common app default templates.
</summary>
</member>
<member name="M:Elementor.Core.Common.Modules.Ajax.Module.__construct">
<summary>
Ajax manager constructor.
Initializing Elementor ajax manager.
</summary>
</member>
<member name="M:Elementor.Core.Common.Modules.Ajax.Module.get_name">
<summary>
Get module name.
Retrieve the module name.
</summary>
<returns>Module name.</returns>
</member>
<member name="M:Elementor.Core.Common.Modules.Ajax.Module.register_ajax_action(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Register ajax action.
Add new actions for a specific ajax request and the callback function to
be handle the response.
</summary>
<param name="tag" type="string">Ajax request name/tag.</param>
<param name="callback" type="callable">The callback function.</param>
</member>
<member name="M:Elementor.Core.Common.Modules.Ajax.Module.handle_ajax_request">
<summary>
Handle ajax request.
Verify ajax nonce, and run all the registered actions for this request.

Fired by `wp_ajax_elementor_ajax` action.
</summary>
</member>
<member name="M:Elementor.Core.Common.Modules.Ajax.Module.get_current_action_data">
<summary>
Get current action data.
Retrieve the data for the current ajax request.
</summary>
<returns>Ajax request data if action exist, False otherwise.</returns>
</member>
<member name="M:Elementor.Core.Common.Modules.Ajax.Module.create_nonce">
<summary>
Create nonce.
Creates a cryptographic token to
give the user an access to Elementor ajax actions.
</summary>
<returns>The nonce token.</returns>
</member>
<member name="M:Elementor.Core.Common.Modules.Ajax.Module.verify_request_nonce">
<summary>
Verify request nonce.
Whether the request nonce verified or not.
</summary>
<returns>True if request nonce verified, False otherwise.</returns>
</member>
<member name="M:Elementor.Core.Common.Modules.Ajax.Module.send_success">
<summary>
Ajax success response.
Send a JSON response data back to the ajax request, indicating success.
</summary>
</member>
<member name="M:Elementor.Core.Common.Modules.Ajax.Module.send_error(Pchp.Core.PhpValue)">
<summary>
Ajax failure response.
Send a JSON response data back to the ajax request, indicating failure.
</summary>
<param name="code" type="null"></param>
</member>
<member name="M:Elementor.Core.Common.Modules.Ajax.Module.add_response_data(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Add response data.
Add new response data to the array of all the ajax requests.
</summary>
<param name="success" type="bool">True if the requests returned successfully, False
otherwise.</param>
<param name="data" type="mixed">Optional. Response data. Default is null.</param>
<param name="code" type="int">Optional. Response code. Default is 200.</param>
<returns>An instance of ajax manager.</returns>
</member>
<member name="M:Elementor.Core.Common.Modules.Connect.Admin.register_admin_menu">
</member>
<member name="M:Elementor.Core.Common.Modules.Connect.Admin.hide_menu_item">
</member>
<member name="M:Elementor.Core.Common.Modules.Connect.Admin.on_load_page">
</member>
<member name="M:Elementor.Core.Common.Modules.Connect.Admin.render_page">
</member>
<member name="M:Elementor.Core.Common.Modules.Connect.Admin.__construct">
</member>
<member name="M:Elementor.Core.Common.Modules.Connect.Apps.Base_App.get_slug">
</member>
<member name="M:Elementor.Core.Common.Modules.Connect.Apps.Base_App.get_title">
</member>
<member name="M:Elementor.Core.Common.Modules.Connect.Apps.Base_App.update_settings">
</member>
<member name="M:Elementor.Core.Common.Modules.Connect.Apps.Base_App.get_class_name(Pchp.Core.Context,Pchp.Core.Reflection.PhpTypeInfo)">
</member>
<member name="M:Elementor.Core.Common.Modules.Connect.Apps.Base_App.render_admin_widget">
</member>
<member name="M:Elementor.Core.Common.Modules.Connect.Apps.Base_App.get_option_name">
</member>
<member name="M:Elementor.Core.Common.Modules.Connect.Apps.Base_App.admin_notice">
</member>
<member name="M:Elementor.Core.Common.Modules.Connect.Apps.Base_App.action_authorize">
</member>
<member name="M:Elementor.Core.Common.Modules.Connect.Apps.Base_App.action_get_token">
</member>
<member name="M:Elementor.Core.Common.Modules.Connect.Apps.Base_App.action_disconnect">
</member>
<member name="M:Elementor.Core.Common.Modules.Connect.Apps.Base_App.action_reconnect">
</member>
<member name="M:Elementor.Core.Common.Modules.Connect.Apps.Base_App.get_admin_url(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:Elementor.Core.Common.Modules.Connect.Apps.Base_App.is_connected">
</member>
<member name="M:Elementor.Core.Common.Modules.Connect.Apps.Base_App.init">
</member>
<member name="M:Elementor.Core.Common.Modules.Connect.Apps.Base_App.init_data">
</member>
<member name="M:Elementor.Core.Common.Modules.Connect.Apps.Base_App.after_connect">
</member>
<member name="M:Elementor.Core.Common.Modules.Connect.Apps.Base_App.get(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:Elementor.Core.Common.Modules.Connect.Apps.Base_App.set(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:Elementor.Core.Common.Modules.Connect.Apps.Base_App.delete(Pchp.Core.PhpValue)">
</member>
<member name="M:Elementor.Core.Common.Modules.Connect.Apps.Base_App.add(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:Elementor.Core.Common.Modules.Connect.Apps.Base_App.add_notice(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:Elementor.Core.Common.Modules.Connect.Apps.Base_App.request(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<param name="request_body" type="array"></param>
<param name="as_array" type="false"></param>
</member>
<member name="M:Elementor.Core.Common.Modules.Connect.Apps.Base_App.get_connect_info">
<summary>
Get all the connect information
</summary>
</member>
<member name="M:Elementor.Core.Common.Modules.Connect.Apps.Base_App.generate_authentication_headers(Pchp.Core.PhpValue)">
</member>
<member name="M:Elementor.Core.Common.Modules.Connect.Apps.Base_App.http_request(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Send an http request
</summary>
<param name="args" type="array"></param>
<param name="options" type="array"></param>
</member>
<member name="M:Elementor.Core.Common.Modules.Connect.Apps.Base_App.generate_signature(Pchp.Core.PhpValue)">
<summary>
Create a signature for the http request
</summary>
<param name="payload" type="array"></param>
</member>
<member name="M:Elementor.Core.Common.Modules.Connect.Apps.Base_App.get_api_url">
</member>
<member name="M:Elementor.Core.Common.Modules.Connect.Apps.Base_App.get_remote_site_url">
</member>
<member name="M:Elementor.Core.Common.Modules.Connect.Apps.Base_App.get_remote_authorize_url">
</member>
<member name="M:Elementor.Core.Common.Modules.Connect.Apps.Base_App.redirect_to_admin_page(Pchp.Core.PhpValue)">
</member>
<member name="M:Elementor.Core.Common.Modules.Connect.Apps.Base_App.set_client_id">
</member>
<member name="M:Elementor.Core.Common.Modules.Connect.Apps.Base_App.set_request_state">
</member>
<member name="M:Elementor.Core.Common.Modules.Connect.Apps.Base_App.print_popup_close_script(Pchp.Core.PhpValue)">
</member>
<member name="M:Elementor.Core.Common.Modules.Connect.Apps.Base_App.disconnect">
</member>
<member name="M:Elementor.Core.Common.Modules.Connect.Apps.Base_App.get_site_key">
</member>
<member name="M:Elementor.Core.Common.Modules.Connect.Apps.Base_App.__construct">
</member>
<member name="M:Elementor.Core.Common.Modules.Connect.Apps.Base_User_App.update_settings">
</member>
<member name="M:Elementor.Core.Common.Modules.Connect.Apps.Base_User_App.init_data">
</member>
<member name="M:Elementor.Core.Common.Modules.Connect.Apps.Common_App.get_option_name">
</member>
<member name="M:Elementor.Core.Common.Modules.Connect.Apps.Common_App.init_data">
</member>
<member name="M:Elementor.Core.Common.Modules.Connect.Apps.Connect.get_slug">
</member>
<member name="M:Elementor.Core.Common.Modules.Connect.Apps.Connect.render_admin_widget">
</member>
<member name="M:Elementor.Core.Common.Modules.Connect.Apps.Library.get_slug">
</member>
<member name="M:Elementor.Core.Common.Modules.Connect.Apps.Library.register_ajax_actions(Pchp.Core.PhpValue)">
<param name="ajax_manager" type="\Elementor\Core\Common\Modules\Ajax\Module"></param>
</member>
<member name="M:Elementor.Core.Common.Modules.Connect.Module.get_name">
</member>
<member name="M:Elementor.Core.Common.Modules.Connect.Module.__construct">
</member>
<member name="M:Elementor.Core.Common.Modules.Connect.Module.init">
<summary>
Register default apps.
Registers the default apps.
</summary>
</member>
<member name="M:Elementor.Core.Common.Modules.Connect.Module.localize_settings">
</member>
<member name="M:Elementor.Core.Common.Modules.Connect.Module.register_app(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Register app.
Registers an app.
</summary>
<param name="slug" type="string">App slug.</param>
<param name="class" type="string">App full class name.</param>
<returns>The updated apps manager instance.</returns>
</member>
<member name="M:Elementor.Core.Common.Modules.Connect.Module.get_app(Pchp.Core.PhpValue)">
<summary>
Get app instance.
Retrieve the app instance.
</summary>
</member>
<member name="M:Elementor.Core.Common.Modules.Connect.Module.get_apps">
</member>
<member name="M:Elementor.Core.Common.Modules.Connect.Module.register_category(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:Elementor.Core.Common.Modules.Connect.Module.get_categories">
</member>
<member name="M:Elementor.Core.Common.Modules.Connect.Module.get_subscription_plans(Pchp.Core.PhpValue)">
</member>
<member name="M:Elementor.Core.Common.Modules.Finder.Base_Category.get_title">
<summary>
Get title.
</summary>
</member>
<member name="M:Elementor.Core.Common.Modules.Finder.Base_Category.get_category_items(Pchp.Core.PhpArray)">
<summary>
Get category items.
</summary>
<param name="options" type="array"></param>
</member>
<member name="M:Elementor.Core.Common.Modules.Finder.Base_Category.is_dynamic">
<summary>
Is dynamic.
Determine if the category is dynamic.
</summary>
</member>
<member name="M:Elementor.Core.Common.Modules.Finder.Base_Category.get_init_settings">
<summary>
Get init settings.
</summary>
</member>
<member name="M:Elementor.Core.Common.Modules.Finder.Categories_Manager.add_category(Pchp.Core.PhpValue,Elementor.Core.Common.Modules.Finder.Base_Category)">
<summary>
Add category.
</summary>
<param name="category_name" type="string"></param>
<param name="category" type="Base_Category"></param>
</member>
<member name="M:Elementor.Core.Common.Modules.Finder.Categories_Manager.get_categories(Pchp.Core.PhpValue)">
<summary>
Get categories.
</summary>
<param name="category" type="string"></param>
</member>
<member name="M:Elementor.Core.Common.Modules.Finder.Categories_Manager.init_categories">
<summary>
Init categories.
Used to initialize finder default categories.
</summary>
</member>
<member name="M:Elementor.Core.Common.Modules.Finder.Categories.Create.get_title">
<summary>
Get title.
</summary>
</member>
<member name="M:Elementor.Core.Common.Modules.Finder.Categories.Create.get_category_items(Pchp.Core.PhpArray)">
<summary>
Get category items.
</summary>
<param name="options" type="array"></param>
</member>
<member name="M:Elementor.Core.Common.Modules.Finder.Categories.Edit.get_title">
<summary>
Get title.
</summary>
</member>
<member name="M:Elementor.Core.Common.Modules.Finder.Categories.Edit.is_dynamic">
<summary>
Is dynamic.
Determine if the category is dynamic.
</summary>
</member>
<member name="M:Elementor.Core.Common.Modules.Finder.Categories.Edit.get_category_items(Pchp.Core.PhpArray)">
<summary>
Get category items.
</summary>
<param name="options" type="array"></param>
</member>
<member name="M:Elementor.Core.Common.Modules.Finder.Categories.General.get_title">
<summary>
Get title.
</summary>
</member>
<member name="M:Elementor.Core.Common.Modules.Finder.Categories.General.get_category_items(Pchp.Core.PhpArray)">
<summary>
Get category items.
</summary>
<param name="options" type="array"></param>
</member>
<member name="M:Elementor.Core.Common.Modules.Finder.Categories.Settings.get_title">
<summary>
Get title.
</summary>
</member>
<member name="M:Elementor.Core.Common.Modules.Finder.Categories.Settings.get_category_items(Pchp.Core.PhpArray)">
<summary>
Get category items.
</summary>
<param name="options" type="array"></param>
</member>
<member name="M:Elementor.Core.Common.Modules.Finder.Categories.Site.get_title">
<summary>
Get title.
</summary>
</member>
<member name="M:Elementor.Core.Common.Modules.Finder.Categories.Site.get_category_items(Pchp.Core.PhpArray)">
<summary>
Get category items.
</summary>
<param name="options" type="array"></param>
</member>
<member name="M:Elementor.Core.Common.Modules.Finder.Categories.Tools.get_title">
<summary>
Get title.
</summary>
</member>
<member name="M:Elementor.Core.Common.Modules.Finder.Categories.Tools.get_category_items(Pchp.Core.PhpArray)">
<summary>
Get category items.
</summary>
<param name="options" type="array"></param>
</member>
<member name="M:Elementor.Core.Common.Modules.Finder.Module.__construct">
<summary>
Module constructor.
</summary>
</member>
<member name="M:Elementor.Core.Common.Modules.Finder.Module.get_name">
<summary>
Get name.
</summary>
</member>
<member name="M:Elementor.Core.Common.Modules.Finder.Module.add_template">
<summary>
Add template.
</summary>
</member>
<member name="M:Elementor.Core.Common.Modules.Finder.Module.register_ajax_actions(Elementor.Core.Common.Modules.Ajax.Module)">
<summary>
Register ajax actions.
</summary>
<param name="ajax" type="Ajax"></param>
</member>
<member name="M:Elementor.Core.Common.Modules.Finder.Module.ajax_get_category_items(Pchp.Core.PhpArray)">
<summary>
Ajax get category items.
</summary>
<param name="data" type="array"></param>
</member>
<member name="M:Elementor.Core.Common.Modules.Finder.Module.get_init_settings">
<summary>
Get init settings.
</summary>
</member>
<member name="M:Elementor.Core.Debug.Classes.Inspection_Base.run">
</member>
<member name="M:Elementor.Core.Debug.Classes.Inspection_Base.get_name">
</member>
<member name="M:Elementor.Core.Debug.Classes.Inspection_Base.get_message">
</member>
<member name="M:Elementor.Core.Debug.Classes.Inspection_Base.get_header_message">
</member>
<member name="M:Elementor.Core.Debug.Classes.Inspection_Base.get_help_doc_url">
</member>
<member name="M:Elementor.Core.Debug.Inspector.__construct">
</member>
<member name="M:Elementor.Core.Debug.Inspector.is_enabled">
</member>
<member name="M:Elementor.Core.Debug.Inspector.register_admin_tools_fields(Elementor.Tools)">
</member>
<member name="M:Elementor.Core.Debug.Inspector.parse_template_path(Pchp.Core.PhpValue)">
</member>
<member name="M:Elementor.Core.Debug.Inspector.add_log(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:Elementor.Core.Debug.Inspector.add_menu_in_admin_bar(WP_Admin_Bar)">
</member>
<member name="M:Elementor.Core.Debug.Loading_Inspection_Manager.register_inspection(Pchp.Core.PhpValue)">
<param name="inspection" type="Inspection_Base"></param>
</member>
<member name="M:Elementor.Core.DocumentTypes.PageBase.get_properties(Pchp.Core.Context)">
</member>
<member name="M:Elementor.Core.DocumentTypes.PageBase.get_editor_panel_categories(Pchp.Core.Context)">
</member>
<member name="M:Elementor.Core.DocumentTypes.PageBase.get_css_wrapper_selector">
</member>
<member name="M:Elementor.Core.DocumentTypes.PageBase.register_controls">
</member>
<member name="M:Elementor.Core.DocumentTypes.PageBase.register_hide_title_control(Pchp.Core.Context,Pchp.Core.PhpValue)">
<param name="document" type="Document"></param>
</member>
<member name="M:Elementor.Core.DocumentTypes.PageBase.register_style_controls(Pchp.Core.Context,Pchp.Core.PhpValue)">
<param name="document" type="Document"></param>
</member>
<member name="M:Elementor.Core.DocumentTypes.PageBase.register_post_fields_control(Pchp.Core.Context,Pchp.Core.PhpValue)">
<param name="document" type="Document"></param>
</member>
<member name="M:Elementor.Core.DocumentTypes.PageBase.__construct(Pchp.Core.PhpArray)">
<param name="data" type="array"></param>
</member>
<member name="M:Elementor.Core.DocumentTypes.Page.get_properties(Pchp.Core.Context)">
<summary>
Get Properties
Return Document Configuration Properties.
</summary>
<returns>$properties</returns>
</member>
<member name="M:Elementor.Core.DocumentTypes.Page.get_title(Pchp.Core.Context)">
<summary>
Get Title
</summary>
</member>
<member name="M:Elementor.Core.DocumentTypes.Post.get_title(Pchp.Core.Context)">
</member>
<member name="M:Elementor.Core.Documents_Manager.__construct">
<summary>
Documents manager constructor.
Initializing the Elementor documents manager.
</summary>
</member>
<member name="M:Elementor.Core.Documents_Manager.register_ajax_actions(Pchp.Core.PhpValue)">
<summary>
Register ajax actions.
Process ajax action handles when saving data and discarding changes.

Fired by `elementor/ajax/register_actions` action.
</summary>
<param name="ajax_manager" type="Ajax">An instance of the ajax manager.</param>
</member>
<member name="M:Elementor.Core.Documents_Manager.register_default_types">
<summary>
Register default types.
Registers the default document types.
</summary>
</member>
<member name="M:Elementor.Core.Documents_Manager.register_document_type(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Register document type.
Registers a single document.
</summary>
<param name="type" type="string">Document type name.</param>
<param name="class" type="string">The name of the class that registers the document type.
Full name with the namespace.</param>
<returns>The updated document manager instance.</returns>
</member>
<member name="M:Elementor.Core.Documents_Manager.get(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Get document.
Retrieve the document data based on a post ID.
</summary>
<param name="post_id" type="int">Post ID.</param>
<param name="from_cache" type="bool">Optional. Whether to retrieve cached data. Default is true.</param>
<returns>Document data or false if post ID was not entered.</returns>
</member>
<member name="M:Elementor.Core.Documents_Manager.get_doc_or_auto_save(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Get document or autosave.
Retrieve either the document or the autosave.
</summary>
<param name="id" type="int">Optional. Post ID. Default is `0`.</param>
<param name="user_id" type="int">Optional. User ID. Default is `0`.</param>
<returns>The document if it exist, False otherwise.</returns>
</member>
<member name="M:Elementor.Core.Documents_Manager.get_doc_for_frontend(Pchp.Core.PhpValue)">
<summary>
Get document for frontend.
Retrieve the document for frontend use.
</summary>
<param name="post_id" type="int">Optional. Post ID. Default is `0`.</param>
<returns>The document if it exist, False otherwise.</returns>
</member>
<member name="M:Elementor.Core.Documents_Manager.get_document_type(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Get document type.
Retrieve the type of any given document.
</summary>
<param name="type" type="string"></param>
<param name="fallback" type="string"></param>
<returns>The type of the document.</returns>
</member>
<member name="M:Elementor.Core.Documents_Manager.get_document_types(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Get document types.
Retrieve the all the registered document types.
</summary>
<param name="args" type="array">Optional. An array of key =&gt; value arguments to match against
the properties. Default is empty array.</param>
<param name="operator" type="string">Optional. The logical operation to perform. 'or' means only one
element from the array needs to match; 'and' means all elements
must match; 'not' means no elements may match. Default 'and'.</param>
<returns>All the registered document types.</returns>
</member>
<member name="M:Elementor.Core.Documents_Manager.get_types_properties">
<summary>
Get document types with their properties.
</summary>
<returns>A list of properties arrays indexed by the type.</returns>
</member>
<member name="M:Elementor.Core.Documents_Manager.create(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Create a document.
Create a new document using any given parameters.
</summary>
<param name="type" type="string">Document type.</param>
<param name="post_data" type="array">An array containing the post data.</param>
<param name="meta_data" type="array">An array containing the post meta data.</param>
<returns>The type of the document.</returns>
</member>
<member name="M:Elementor.Core.Documents_Manager.remove_user_edit_cap(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Remove user edit capabilities if document is not editable.
Filters the user capabilities to disable editing in admin.
</summary>
<param name="allcaps" type="array">An array of all the user's capabilities.</param>
<param name="caps" type="array">Actual capabilities for meta capability.</param>
<param name="args" type="array">Optional parameters passed to has_cap(), typically object ID.</param>
</member>
<member name="M:Elementor.Core.Documents_Manager.filter_post_row_actions(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Filter Post Row Actions.
Let the Document to filter the array of row action links on the Posts list table.
</summary>
<param name="actions" type="array"></param>
<param name="post" type="\WP_Post"></param>
</member>
<member name="M:Elementor.Core.Documents_Manager.ajax_save(Pchp.Core.PhpValue)">
<summary>
Save document data using ajax.
Save the document on the builder using ajax, when saving the changes, and refresh the editor.
</summary>
<param name="request" type="Post">ID.</param>
<exception cref="Exception">If current user don't have permissions to edit the post or the post is not using Elementor.</exception>
<returns>The document data after saving.</returns>
</member>
<member name="M:Elementor.Core.Documents_Manager.ajax_discard_changes(Pchp.Core.PhpValue)">
<summary>
Ajax discard changes.
Load the document data from an autosave, deleting unsaved changes.
</summary>
<returns>True if changes discarded, False otherwise.</returns>
</member>
<member name="M:Elementor.Core.Documents_Manager.switch_to_document(Pchp.Core.PhpValue)">
<summary>
Switch to document.
Change the document to any new given document type.
</summary>
<param name="document" type="Document">The document to switch to.</param>
</member>
<member name="M:Elementor.Core.Documents_Manager.restore_document">
<summary>
Restore document.
Rollback to the original document.
</summary>
</member>
<member name="M:Elementor.Core.Documents_Manager.get_current">
<summary>
Get current document.
Retrieve the current document.
</summary>
<returns>The current document.</returns>
</member>
<member name="M:Elementor.Core.Documents_Manager.get_create_new_post_url(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Get create new post URL.
Retrieve a custom URL for creating a new post/page using Elementor.
</summary>
<param name="post_type" type="string">Optional. Post type slug. Default is 'page'.</param>
<param name="template_type" type="string|null">Optional. Query arg 'template_type'. Default is null.</param>
<returns>A URL for creating new post using Elementor.</returns>
</member>
<member name="M:Elementor.Core.DynamicTags.Base_Tag.get_type(Pchp.Core.Context)">
</member>
<member name="M:Elementor.Core.DynamicTags.Base_Tag.get_categories">
</member>
<member name="M:Elementor.Core.DynamicTags.Base_Tag.get_group">
</member>
<member name="M:Elementor.Core.DynamicTags.Base_Tag.get_title">
</member>
<member name="M:Elementor.Core.DynamicTags.Base_Tag.get_content(Pchp.Core.PhpArray)">
<param name="options" type="array"></param>
</member>
<member name="M:Elementor.Core.DynamicTags.Base_Tag.get_content_type">
</member>
<member name="M:Elementor.Core.DynamicTags.Base_Tag.get_panel_template_setting_key">
</member>
<member name="M:Elementor.Core.DynamicTags.Base_Tag.is_settings_required">
</member>
<member name="M:Elementor.Core.DynamicTags.Base_Tag.get_editor_config">
</member>
<member name="M:Elementor.Core.DynamicTags.Base_Tag.print_panel_template">
</member>
<member name="M:Elementor.Core.DynamicTags.Base_Tag.get_unique_name">
</member>
<member name="M:Elementor.Core.DynamicTags.Base_Tag.register_advanced_section">
</member>
<member name="M:Elementor.Core.DynamicTags.Base_Tag.init_controls">
</member>
<member name="M:Elementor.Core.DynamicTags.Data_Tag.get_value(Pchp.Core.PhpArray)">
<param name="options" type="array"></param>
</member>
<member name="M:Elementor.Core.DynamicTags.Data_Tag.get_content_type">
</member>
<member name="M:Elementor.Core.DynamicTags.Data_Tag.get_content(Pchp.Core.PhpArray)">
<param name="options" type="array"></param>
</member>
<member name="M:Elementor.Core.DynamicTags.Dynamic_CSS.__construct(Pchp.Core.PhpValue,Elementor.Core.Files.CSS.Post)">
<summary>
Dynamic_CSS constructor.
</summary>
<param name="post_id" type="int">Post ID</param>
<param name="post_css_file" type="Post_CSS"></param>
</member>
<member name="M:Elementor.Core.DynamicTags.Dynamic_CSS.get_name">
</member>
<member name="M:Elementor.Core.DynamicTags.Dynamic_CSS.get_responsive_control_duplication_mode">
<summary>
Get Responsive Control Duplication Mode
</summary>
</member>
<member name="M:Elementor.Core.DynamicTags.Dynamic_CSS.use_external_file">
</member>
<member name="M:Elementor.Core.DynamicTags.Dynamic_CSS.get_file_handle_id">
</member>
<member name="M:Elementor.Core.DynamicTags.Dynamic_CSS.add_controls_stack_style_rules(Elementor.Controls_Stack,Pchp.Core.PhpArray,Pchp.Core.PhpArray,Pchp.Core.PhpArray,Pchp.Core.PhpArray,Pchp.Core.PhpValue)">
</member>
<member name="M:Elementor.Core.DynamicTags.Manager.__construct">
<summary>
Dynamic tags manager constructor.
Initializing Elementor dynamic tags manager.
</summary>
</member>
<member name="M:Elementor.Core.DynamicTags.Manager.localize_settings">
</member>
<member name="M:Elementor.Core.DynamicTags.Manager.parse_tags_text(Pchp.Core.PhpValue,Pchp.Core.PhpArray,Pchp.Core.PhpValue)">
<summary>
Parse dynamic tags text.
Receives the dynamic tag text, and returns a single value or multiple values
from the tag callback function.
</summary>
<param name="text" type="string">Dynamic tag text.</param>
<param name="settings" type="array">The dynamic tag settings.</param>
<param name="parse_callback" type="callable">The functions that renders the dynamic tag.</param>
<returns>A single string or an array of strings with
the return values from each tag callback
function.</returns>
</member>
<member name="M:Elementor.Core.DynamicTags.Manager.parse_tag_text(Pchp.Core.PhpValue,Pchp.Core.PhpArray,Pchp.Core.PhpValue)">
<summary>
Parse dynamic tag text.
Receives the dynamic tag text, and returns the value from the callback
function.
</summary>
<param name="tag_text" type="string">Dynamic tag text.</param>
<param name="settings" type="array">The dynamic tag settings.</param>
<param name="parse_callback" type="callable">The functions that renders the dynamic tag.</param>
<returns>If the tag was not found an empty string or an
empty array will be returned, otherwise the
return value from the tag callback function.</returns>
</member>
<member name="M:Elementor.Core.DynamicTags.Manager.tag_text_to_tag_data(Pchp.Core.PhpValue)">
<param name="tag_text" type="string"></param>
</member>
<member name="M:Elementor.Core.DynamicTags.Manager.tag_to_text(Elementor.Core.DynamicTags.Base_Tag)">
<summary>
Dynamic tag to text.
Retrieve the shortcode that represents the dynamic tag.
</summary>
<param name="tag" type="Base_Tag">An instance of the dynamic tag.</param>
<returns>The shortcode that represents the dynamic tag.</returns>
</member>
<member name="M:Elementor.Core.DynamicTags.Manager.tag_data_to_tag_text(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpArray)">
<param name="tag_id" type="string"></param>
<param name="tag_name" type="string"></param>
<param name="settings" type="array"></param>
</member>
<member name="M:Elementor.Core.DynamicTags.Manager.create_tag(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpArray)">
<param name="tag_id" type="string"></param>
<param name="tag_name" type="string"></param>
<param name="settings" type="array"></param>
</member>
<member name="M:Elementor.Core.DynamicTags.Manager.get_tag_data_content(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpArray)">
<param name="settings" type="array"></param>
</member>
<member name="M:Elementor.Core.DynamicTags.Manager.get_tag_info(Pchp.Core.PhpValue)">
</member>
<member name="M:Elementor.Core.DynamicTags.Manager.get_tags">
</member>
<member name="M:Elementor.Core.DynamicTags.Manager.register_tag(Pchp.Core.PhpValue)">
<param name="class" type="string"></param>
</member>
<member name="M:Elementor.Core.DynamicTags.Manager.unregister_tag(Pchp.Core.PhpValue)">
<param name="tag_name" type="string"></param>
</member>
<member name="M:Elementor.Core.DynamicTags.Manager.register_group(Pchp.Core.PhpValue,Pchp.Core.PhpArray)">
<param name="group_settings" type="array"></param>
</member>
<member name="M:Elementor.Core.DynamicTags.Manager.print_templates">
</member>
<member name="M:Elementor.Core.DynamicTags.Manager.get_tags_config">
</member>
<member name="M:Elementor.Core.DynamicTags.Manager.get_config">
</member>
<member name="M:Elementor.Core.DynamicTags.Manager.ajax_render_tags(Pchp.Core.PhpValue)">
<exception cref="Exception">If post ID is missing.</exception>
<exception cref="Exception">If current user don't have permissions to edit the post.</exception>
</member>
<member name="M:Elementor.Core.DynamicTags.Manager.set_parsing_mode(Pchp.Core.PhpValue)">
</member>
<member name="M:Elementor.Core.DynamicTags.Manager.get_parsing_mode">
</member>
<member name="M:Elementor.Core.DynamicTags.Manager.after_enqueue_post_css(Pchp.Core.PhpValue)">
<param name="css_file" type="Post"></param>
</member>
<member name="M:Elementor.Core.DynamicTags.Manager.register_ajax_actions(Elementor.Core.Common.Modules.Ajax.Module)">
</member>
<member name="M:Elementor.Core.DynamicTags.Manager.add_actions">
</member>
<member name="M:Elementor.Core.DynamicTags.Tag.get_content(Pchp.Core.PhpArray)">
<param name="options" type="array"></param>
</member>
<member name="M:Elementor.Core.DynamicTags.Tag.get_content_type">
</member>
<member name="M:Elementor.Core.DynamicTags.Tag.get_editor_config">
</member>
<member name="M:Elementor.Core.DynamicTags.Tag.register_advanced_section">
</member>
<member name="M:Elementor.Core.Editor.Data.Globals.Endpoints.Base.convert_db_format(Pchp.Core.PhpValue)">
<param name="item" type="array">frontend format.</param>
<returns>backend format.</returns>
</member>
<member name="M:Elementor.Core.Editor.Editor.init(Pchp.Core.PhpValue)">
<summary>
Init.
Initialize Elementor editor. Registers all needed actions to run Elementor,
removes conflicting actions etc.

Fired by `admin_action_elementor` action.
</summary>
<param name="die" type="bool">Optional. Whether to die at the end. Default is `true`.</param>
</member>
<member name="M:Elementor.Core.Editor.Editor.get_post_id">
<summary>
Retrieve post ID.
Get the ID of the current post.
</summary>
<returns>Post ID.</returns>
</member>
<member name="M:Elementor.Core.Editor.Editor.redirect_to_new_url">
<summary>
Redirect to new URL.
Used as a fallback function for the old URL structure of Elementor page
edit URL.

Fired by `template_redirect` action.
</summary>
</member>
<member name="M:Elementor.Core.Editor.Editor.is_edit_mode(Pchp.Core.PhpValue)">
<summary>
Whether the edit mode is active.
Used to determine whether we are in the edit mode.
</summary>
<param name="post_id" type="int">Optional. Post ID. Default is `null`, the current
post ID.</param>
<returns>Whether the edit mode is active.</returns>
</member>
<member name="M:Elementor.Core.Editor.Editor.lock_post(Pchp.Core.PhpValue)">
<summary>
Lock post.
Mark the post as currently being edited by the current user.
</summary>
<param name="post_id" type="int">The ID of the post being edited.</param>
</member>
<member name="M:Elementor.Core.Editor.Editor.get_locked_user(Pchp.Core.PhpValue)">
<summary>
Get locked user.
Check what user is currently editing the post.
</summary>
<param name="post_id" type="int">The ID of the post being edited.</param>
<returns>User information or false if the post is not locked.</returns>
</member>
<member name="M:Elementor.Core.Editor.Editor.print_editor_template">
<summary>
Print Editor Template.
Include the wrapper template of the editor.
</summary>
</member>
<member name="M:Elementor.Core.Editor.Editor.enqueue_scripts">
<summary>
Enqueue scripts.
Registers all the editor scripts and enqueues them.
</summary>
</member>
<member name="M:Elementor.Core.Editor.Editor.enqueue_styles">
<summary>
Enqueue styles.
Registers all the editor styles and enqueues them.
</summary>
</member>
<member name="M:Elementor.Core.Editor.Editor.get_wp_editor_config">
<summary>
Get WordPress editor config.
Config the default WordPress editor with custom settings for Elementor use.
</summary>
</member>
<member name="M:Elementor.Core.Editor.Editor.editor_head_trigger">
<summary>
Editor head trigger.
Fires the 'elementor/editor/wp_head' action in the head tag in Elementor
editor.
</summary>
</member>
<member name="M:Elementor.Core.Editor.Editor.wp_footer">
<summary>
WP footer.
Prints Elementor editor with all the editor templates, and render controls,
widgets and content elements.

Fired by `wp_footer` action.
</summary>
</member>
<member name="M:Elementor.Core.Editor.Editor.set_edit_mode(Pchp.Core.PhpValue)">
<summary>
Set edit mode.
Used to update the edit mode.
</summary>
<param name="edit_mode" type="bool">Whether the edit mode is active.</param>
</member>
<member name="M:Elementor.Core.Editor.Editor.__construct">
<summary>
Editor constructor.
Initializing Elementor editor and redirect from old URL structure of
Elementor editor.
</summary>
</member>
<member name="M:Elementor.Core.Editor.Editor.filter_wp_link_query_args(Pchp.Core.PhpValue)">
</member>
<member name="M:Elementor.Core.Editor.Editor.filter_wp_link_query(Pchp.Core.PhpValue)">
</member>
<member name="M:Elementor.Core.Editor.Editor.init_editor_templates">
<summary>
Init editor templates.
Initialize default elementor templates used in the editor panel.
</summary>
</member>
<member name="M:Elementor.Core.Experiments.Manager.add_feature(Pchp.Core.PhpArray)">
<summary>
Add Feature
</summary>
<param name="options" type="array">{
@type string $name
@type string $title
@type string $description
@type string $release_status
@type string $default
@type callable $on_state_change
}</param>
</member>
<member name="M:Elementor.Core.Experiments.Manager.remove_feature(Pchp.Core.PhpValue)">
<summary>
Remove Feature
</summary>
<param name="feature_name" type="string"></param>
</member>
<member name="M:Elementor.Core.Experiments.Manager.get_features(Pchp.Core.PhpValue)">
<summary>
Get Features
</summary>
<param name="feature_name" type="string">Optional. Default is null</param>
</member>
<member name="M:Elementor.Core.Experiments.Manager.get_active_features">
<summary>
Get Active Features
</summary>
</member>
<member name="M:Elementor.Core.Experiments.Manager.is_feature_active(Pchp.Core.PhpValue)">
<summary>
Is Feature Active
</summary>
<param name="feature_name" type="string"></param>
</member>
<member name="M:Elementor.Core.Experiments.Manager.set_feature_default_state(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Set Feature Default State
</summary>
<param name="feature_name" type="string"></param>
<param name="default_state" type="int"></param>
</member>
<member name="M:Elementor.Core.Experiments.Manager.get_feature_option_key(Pchp.Core.PhpValue)">
<summary>
Get Feature Option Key
</summary>
<param name="feature_name" type="string"></param>
</member>
<member name="M:Elementor.Core.Experiments.Manager.init_states">
<summary>
Init States
</summary>
</member>
<member name="M:Elementor.Core.Experiments.Manager.init_release_statuses">
<summary>
Init Statuses
</summary>
</member>
<member name="M:Elementor.Core.Experiments.Manager.init_features">
<summary>
Init Features
</summary>
</member>
<member name="M:Elementor.Core.Experiments.Manager.register_settings_fields(Elementor.Settings)">
<summary>
Register Settings Fields
</summary>
<param name="settings" type="Settings"></param>
</member>
<member name="M:Elementor.Core.Experiments.Manager.render_settings_intro">
<summary>
Render Settings Intro
</summary>
</member>
<member name="M:Elementor.Core.Experiments.Manager.render_feature_settings_field(Pchp.Core.PhpArray)">
<summary>
Render Feature Settings Field
</summary>
<param name="feature" type="array"></param>
</member>
<member name="M:Elementor.Core.Experiments.Manager.get_feature_settings_label_html(Pchp.Core.PhpArray)">
<summary>
Get Feature Settings Label HTML
</summary>
<param name="feature" type="array"></param>
</member>
<member name="M:Elementor.Core.Experiments.Manager.get_saved_feature_state(Pchp.Core.PhpValue)">
<summary>
Get Feature Settings Label HTML
</summary>
<param name="feature_name" type="string"></param>
</member>
<member name="M:Elementor.Core.Experiments.Manager.get_feature_actual_state(Pchp.Core.PhpArray)">
<summary>
Get Feature Actual State
</summary>
<param name="feature" type="array"></param>
</member>
<member name="M:Elementor.Core.Experiments.Manager.on_feature_state_change(Pchp.Core.PhpArray,Pchp.Core.PhpValue)">
<summary>
On Feature State Change
</summary>
<param name="old_feature_data" type="array"></param>
<param name="new_state" type="string"></param>
</member>
<member name="M:Elementor.Core.Files.Assets.Files_Upload_Handler.is_elementor_media_upload">
<summary>
is_elementor_media_upload
</summary>
</member>
<member name="M:Elementor.Core.Files.Assets.Files_Upload_Handler.is_enabled(Pchp.Core.Context)">
</member>
<member name="M:Elementor.Core.Files.Assets.Files_Upload_Handler.handle_upload_prefilter(Pchp.Core.PhpValue)">
<summary>
handle_upload_prefilter
</summary>
</member>
<member name="M:Elementor.Core.Files.Assets.Files_Upload_Handler.file_sanitizer_can_run(Pchp.Core.Context)">
<summary>
file_sanitizer_can_run
</summary>
</member>
<member name="M:Elementor.Core.Files.Assets.Files_Upload_Handler.check_filetype_and_ext(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Check filetype and ext
A workaround for upload validation which relies on a PHP extension (fileinfo)
with inconsistent reporting behaviour.
ref: https://core.trac.wordpress.org/ticket/39550
ref: https://core.trac.wordpress.org/ticket/40175
</summary>
</member>
<member name="M:Elementor.Core.Files.Assets.Manager.__construct">
<summary>
Assets manager constructor.
Initializing the Elementor assets manager.
</summary>
</member>
<member name="M:Elementor.Core.Files.Assets.Manager.add_asset(Pchp.Core.PhpValue)">
<summary>
Add Asset
</summary>
</member>
<member name="M:Elementor.Core.Files.Assets.Manager.register_asset_types">
<summary>
Register Asset Types
Registers Elementor Asset Types
</summary>
</member>
<member name="M:Elementor.Core.Files.Assets.Svg.Svg_Handler.get_meta">
<summary>
get_meta
</summary>
</member>
<member name="M:Elementor.Core.Files.Assets.Svg.Svg_Handler.update_meta(Pchp.Core.PhpValue)">
<summary>
update_meta
</summary>
</member>
<member name="M:Elementor.Core.Files.Assets.Svg.Svg_Handler.delete_meta">
<summary>
delete_meta
</summary>
</member>
<member name="M:Elementor.Core.Files.Assets.Svg.Svg_Handler.delete_meta_cache">
<summary>
delete_meta_cache
</summary>
</member>
<member name="M:Elementor.Core.Files.Assets.Svg.Svg_Handler.read_from_file">
<summary>
read_from_file
</summary>
</member>
<member name="M:Elementor.Core.Files.Assets.Svg.Svg_Handler.get_inline_svg(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
get_inline_svg
</summary>
</member>
<member name="M:Elementor.Core.Files.Assets.Svg.Svg_Handler.decode_svg(Pchp.Core.PhpValue)">
<summary>
decode_svg
</summary>
</member>
<member name="M:Elementor.Core.Files.Assets.Svg.Svg_Handler.encode_svg(Pchp.Core.PhpValue)">
<summary>
encode_svg
</summary>
</member>
<member name="M:Elementor.Core.Files.Assets.Svg.Svg_Handler.sanitize_svg(Pchp.Core.PhpValue)">
<summary>
sanitize_svg
</summary>
</member>
<member name="M:Elementor.Core.Files.Assets.Svg.Svg_Handler.is_encoded(Pchp.Core.PhpValue)">
<summary>
Check if the contents are gzipped
</summary>
</member>
<member name="M:Elementor.Core.Files.Assets.Svg.Svg_Handler.is_allowed_tag(Pchp.Core.PhpValue)">
<summary>
is_allowed_tag
</summary>
</member>
<member name="M:Elementor.Core.Files.Assets.Svg.Svg_Handler.is_a_attribute(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
is_a_attribute
</summary>
</member>
<member name="M:Elementor.Core.Files.Assets.Svg.Svg_Handler.is_remote_value(Pchp.Core.PhpValue)">
<summary>
is_remote_value
</summary>
</member>
<member name="M:Elementor.Core.Files.Assets.Svg.Svg_Handler.has_js_value(Pchp.Core.PhpValue)">
<summary>
has_js_value
</summary>
</member>
<member name="M:Elementor.Core.Files.Assets.Svg.Svg_Handler.get_allowed_attributes">
<summary>
get_allowed_attributes
</summary>
</member>
<member name="M:Elementor.Core.Files.Assets.Svg.Svg_Handler.get_allowed_elements">
<summary>
get_allowed_elements
</summary>
</member>
<member name="M:Elementor.Core.Files.Assets.Svg.Svg_Handler.validate_allowed_attributes(Pchp.Core.PhpValue)">
<summary>
validate_allowed_attributes
</summary>
<param name="element" type="\DOMElement"></param>
</member>
<member name="M:Elementor.Core.Files.Assets.Svg.Svg_Handler.strip_xlinks(Pchp.Core.PhpValue)">
<summary>
strip_xlinks
</summary>
<param name="element" type="\DOMElement"></param>
</member>
<member name="M:Elementor.Core.Files.Assets.Svg.Svg_Handler.validate_use_tag(Pchp.Core.PhpValue)">
<summary>
validate_use_tag
</summary>
</member>
<member name="M:Elementor.Core.Files.Assets.Svg.Svg_Handler.strip_doctype">
<summary>
strip_docktype
</summary>
</member>
<member name="M:Elementor.Core.Files.Assets.Svg.Svg_Handler.sanitize_elements">
<summary>
sanitize_elements
</summary>
</member>
<member name="M:Elementor.Core.Files.Assets.Svg.Svg_Handler.sanitizer(Pchp.Core.PhpValue)">
<summary>
sanitizer
</summary>
</member>
<member name="M:Elementor.Core.Files.Assets.Svg.Svg_Handler.strip_php_tags(Pchp.Core.PhpValue)">
<summary>
strip_php_tags
</summary>
</member>
<member name="M:Elementor.Core.Files.Assets.Svg.Svg_Handler.strip_comments(Pchp.Core.PhpValue)">
<summary>
strip_comments
</summary>
</member>
<member name="M:Elementor.Core.Files.Assets.Svg.Svg_Handler.wp_prepare_attachment_for_js(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
wp_prepare_attachment_for_js
</summary>
</member>
<member name="M:Elementor.Core.Files.Assets.Svg.Svg_Handler.set_attachment_id(Pchp.Core.PhpValue)">
<summary>
set_attachment_id
</summary>
</member>
<member name="M:Elementor.Core.Files.Assets.Svg.Svg_Handler.get_attachment_id">
<summary>
get_attachment_id
</summary>
</member>
<member name="M:Elementor.Core.Files.Assets.Svg.Svg_Handler.set_svg_meta_data(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
set_svg_meta_data
</summary>
</member>
<member name="M:Elementor.Core.Files.Assets.Svg.Svg_Handler.handle_upload_prefilter(Pchp.Core.PhpValue)">
<summary>
handle_upload_prefilter
</summary>
</member>
<member name="M:Elementor.Core.Files.Assets.Svg.Svg_Handler.svg_sanitizer_can_run">
</member>
<member name="M:Elementor.Core.Files.Assets.Svg.Svg_Handler.upload_mimes">
</member>
<member name="M:Elementor.Core.Files.Assets.Svg.Svg_Handler.wp_handle_upload_prefilter">
</member>
<member name="M:Elementor.Core.Files.Assets.Svg.Svg_Handler.is_svg_uploads_enabled">
</member>
<member name="M:Elementor.Core.Files.Assets.Svg.Svg_Handler.__construct">
<summary>
Svg_Handler constructor.
</summary>
</member>
<member name="M:Elementor.Core.Files.Base.get_base_uploads_dir(Pchp.Core.Context)">
</member>
<member name="M:Elementor.Core.Files.Base.get_base_uploads_url(Pchp.Core.Context)">
</member>
<member name="M:Elementor.Core.Files.Base.create(Pchp.Core.Context,Pchp.Core.Reflection.PhpTypeInfo,Pchp.Core.PhpValue[])">
<summary>
Use a create function for PhpDoc (@return static).
</summary>
</member>
<member name="M:Elementor.Core.Files.Base.__construct(Pchp.Core.PhpValue)">
</member>
<member name="M:Elementor.Core.Files.Base.set_files_dir(Pchp.Core.PhpValue)">
</member>
<member name="M:Elementor.Core.Files.Base.set_file_name(Pchp.Core.PhpValue)">
</member>
<member name="M:Elementor.Core.Files.Base.get_file_name">
</member>
<member name="M:Elementor.Core.Files.Base.get_url">
</member>
<member name="M:Elementor.Core.Files.Base.get_content">
</member>
<member name="M:Elementor.Core.Files.Base.update">
</member>
<member name="M:Elementor.Core.Files.Base.update_file">
</member>
<member name="M:Elementor.Core.Files.Base.write">
</member>
<member name="M:Elementor.Core.Files.Base.delete">
</member>
<member name="M:Elementor.Core.Files.Base.get_meta(Pchp.Core.PhpValue)">
<summary>
Get meta data.
Retrieve the CSS file meta data. Returns an array of all the data, or if
custom property is given it will return the property value, or `null` if
the property does not exist.
</summary>
<param name="property" type="string">Optional. Custom meta data property. Default is
null.</param>
<returns>An array of all the data, or if custom property is
given it will return the property value, or `null` if
the property does not exist.</returns>
</member>
<member name="M:Elementor.Core.Files.Base.parse_content">
</member>
<member name="M:Elementor.Core.Files.Base.load_meta">
<summary>
Load meta.
Retrieve the file meta data.
</summary>
</member>
<member name="M:Elementor.Core.Files.Base.update_meta(Pchp.Core.PhpValue)">
<summary>
Update meta.
Update the file meta data.
</summary>
<param name="meta" type="array">New meta data.</param>
</member>
<member name="M:Elementor.Core.Files.Base.delete_meta">
<summary>
Delete meta.
Delete the file meta data.
</summary>
</member>
<member name="M:Elementor.Core.Files.Base.get_default_meta">
</member>
<member name="M:Elementor.Core.Files.Base.get_wp_uploads_dir(Pchp.Core.Context)">
</member>
<member name="M:Elementor.Core.Files.Base.set_path">
</member>
<member name="M:Elementor.Core.Files.CSS.Base.get_name">
<summary>
Get CSS file name.
Retrieve the CSS file name.
</summary>
</member>
<member name="M:Elementor.Core.Files.CSS.Base.use_external_file">
<summary>
Use external file.
Whether to use external CSS file of not. When there are new schemes or settings
updates.
</summary>
<returns>True if the CSS requires an update, False otherwise.</returns>
</member>
<member name="M:Elementor.Core.Files.CSS.Base.update">
<summary>
Update the CSS file.
Delete old CSS, parse the CSS, save the new file and update the database.

This method also sets the CSS status to be used later on in the render posses.
</summary>
</member>
<member name="M:Elementor.Core.Files.CSS.Base.write">
</member>
<member name="M:Elementor.Core.Files.CSS.Base.delete">
</member>
<member name="M:Elementor.Core.Files.CSS.Base.get_responsive_control_duplication_mode">
<summary>
Get Responsive Control Duplication Mode
</summary>
</member>
<member name="M:Elementor.Core.Files.CSS.Base.enqueue">
<summary>
Enqueue CSS.
Either enqueue the CSS file in Elementor or add inline style.

This method is also responsible for loading the fonts.
</summary>
</member>
<member name="M:Elementor.Core.Files.CSS.Base.print_css">
<summary>
Print CSS.
Output the final CSS inside the `&lt;style&gt;` tags and all the frontend fonts in
use.
</summary>
</member>
<member name="M:Elementor.Core.Files.CSS.Base.add_control_rules(Pchp.Core.PhpArray,Pchp.Core.PhpArray,Pchp.Core.PhpValue,Pchp.Core.PhpArray,Pchp.Core.PhpArray,Pchp.Core.PhpArray)">
<summary>
Add control rules.
Parse the CSS for all the elements inside any given control.

This method recursively renders the CSS for all the selectors in the control.
</summary>
<param name="control" type="array">The controls.</param>
<param name="controls_stack" type="array">The controls stack.</param>
<param name="value_callback" type="callable">Callback function for the value.</param>
<param name="placeholders" type="array">Placeholders.</param>
<param name="replacements" type="array">Replacements.</param>
<param name="values" type="array">Global Values.</param>
</member>
<member name="M:Elementor.Core.Files.CSS.Base.parse_property_placeholder(Pchp.Core.PhpArray,Pchp.Core.PhpValue,Pchp.Core.PhpArray,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<param name="control" type="array"></param>
<param name="value" type="mixed"></param>
<param name="controls_stack" type="array"></param>
<param name="value_callback" type="callable"></param>
<param name="placeholder" type="string"></param>
<param name="parser_control_name" type="string"></param>
</member>
<member name="M:Elementor.Core.Files.CSS.Base.get_fonts">
<summary>
Get the fonts.
Retrieve the list of fonts.
</summary>
<returns>Fonts.</returns>
</member>
<member name="M:Elementor.Core.Files.CSS.Base.get_stylesheet">
<summary>
Get stylesheet.
Retrieve the CSS file stylesheet instance.
</summary>
<returns>The stylesheet object.</returns>
</member>
<member name="M:Elementor.Core.Files.CSS.Base.add_controls_stack_style_rules(Elementor.Controls_Stack,Pchp.Core.PhpArray,Pchp.Core.PhpArray,Pchp.Core.PhpArray,Pchp.Core.PhpArray,Pchp.Core.PhpValue)">
<summary>
Add controls stack style rules.
Parse the CSS for all the elements inside any given controls stack.

This method recursively renders the CSS for all the child elements in the stack.
</summary>
<param name="controls_stack" type="Controls_Stack">The controls stack.</param>
<param name="controls" type="array">Controls array.</param>
<param name="values" type="array">Values array.</param>
<param name="placeholders" type="array">Placeholders.</param>
<param name="replacements" type="array">Replacements.</param>
<param name="all_controls" type="array">All controls.</param>
</member>
<member name="M:Elementor.Core.Files.CSS.Base.get_file_handle_id">
<summary>
Get file handle ID.
Retrieve the file handle ID.
</summary>
<returns>CSS file handle ID.</returns>
</member>
<member name="M:Elementor.Core.Files.CSS.Base.render_css">
<summary>
Render CSS.
Parse the CSS.
</summary>
</member>
<member name="M:Elementor.Core.Files.CSS.Base.get_enqueue_dependencies">
<summary>
Get enqueue dependencies.
Retrieve the name of the stylesheet used by `wp_enqueue_style()`.
</summary>
<returns>Name of the stylesheet.</returns>
</member>
<member name="M:Elementor.Core.Files.CSS.Base.get_inline_dependency">
<summary>
Get inline dependency.
Retrieve the name of the stylesheet used by `wp_add_inline_style()`.
</summary>
<returns>Name of the stylesheet.</returns>
</member>
<member name="M:Elementor.Core.Files.CSS.Base.is_update_required">
<summary>
Is update required.
Whether the CSS requires an update. When there are new schemes or settings
updates.
</summary>
<returns>True if the CSS requires an update, False otherwise.</returns>
</member>
<member name="M:Elementor.Core.Files.CSS.Base.parse_content">
<summary>
Parse CSS.
Parsing the CSS file.
</summary>
</member>
<member name="M:Elementor.Core.Files.CSS.Base.add_control_style_rules(Pchp.Core.PhpArray,Pchp.Core.PhpArray,Pchp.Core.PhpArray,Pchp.Core.PhpArray,Pchp.Core.PhpArray)">
<summary>
Add control style rules.
Register new style rules for the control.
</summary>
<param name="control" type="array">The control.</param>
<param name="values" type="array">Values array.</param>
<param name="controls" type="array">The controls stack.</param>
<param name="placeholders" type="array">Placeholders.</param>
<param name="replacements" type="array">Replacements.</param>
</member>
<member name="M:Elementor.Core.Files.CSS.Base.get_style_control_value(Pchp.Core.PhpArray,Pchp.Core.PhpArray)">
<summary>
Get style control value.
Retrieve the value of the style control for any give control and values.

It will retrieve the control name and return the style value.
</summary>
<param name="control" type="array">The control.</param>
<param name="values" type="array">Values array.</param>
<returns>Style control value.</returns>
</member>
<member name="M:Elementor.Core.Files.CSS.Base.init_stylesheet">
<summary>
Init stylesheet.
Initialize CSS file stylesheet by creating a new `Stylesheet` object and register new
breakpoints for the stylesheet.
</summary>
</member>
<member name="M:Elementor.Core.Files.CSS.Base.add_repeater_control_style_rules(Elementor.Controls_Stack,Pchp.Core.PhpArray,Pchp.Core.PhpArray,Pchp.Core.PhpArray,Pchp.Core.PhpArray)">
<summary>
Add repeater control style rules.
Register new style rules for the repeater control.
</summary>
<param name="controls_stack" type="Controls_Stack">The control stack.</param>
<param name="repeater_control" type="array">The repeater control.</param>
<param name="repeater_values" type="array">Repeater values array.</param>
<param name="placeholders" type="array">Placeholders.</param>
<param name="replacements" type="array">Replacements.</param>
</member>
<member name="M:Elementor.Core.Files.CSS.Base.add_dynamic_control_style_rules(Pchp.Core.PhpArray,Pchp.Core.PhpValue)">
<summary>
Add dynamic control style rules.
Register new style rules for the dynamic control.
</summary>
<param name="control" type="array">The control.</param>
<param name="value" type="string">The value.</param>
</member>
<member name="M:Elementor.Core.Files.CSS.Global_CSS.get_name">
<summary>
Get CSS file name.
Retrieve the CSS file name.
</summary>
<returns>CSS file name.</returns>
</member>
<member name="M:Elementor.Core.Files.CSS.Global_CSS.get_file_handle_id">
<summary>
Get file handle ID.
Retrieve the handle ID for the global post CSS file.
</summary>
<returns>CSS file handle ID.</returns>
</member>
<member name="M:Elementor.Core.Files.CSS.Global_CSS.render_css">
<summary>
Render CSS.
Parse the CSS for all the widgets and all the scheme controls.
</summary>
</member>
<member name="M:Elementor.Core.Files.CSS.Global_CSS.get_inline_dependency">
<summary>
Get inline dependency.
Retrieve the name of the stylesheet used by `wp_add_inline_style()`.
</summary>
<returns>Name of the stylesheet.</returns>
</member>
<member name="M:Elementor.Core.Files.CSS.Global_CSS.is_update_required">
<summary>
Is update required.
Whether the CSS requires an update. When there are new schemes or settings
updates.
</summary>
<returns>True if the CSS requires an update, False otherwise.</returns>
</member>
<member name="M:Elementor.Core.Files.CSS.Global_CSS.render_schemes_and_globals_css">
<summary>
Render schemes CSS.
Parse the CSS for all the widgets and all the scheme controls.
</summary>
</member>
<member name="M:Elementor.Core.Files.CSS.Post_Preview.__construct(Pchp.Core.PhpValue)">
<summary>
Post preview CSS file constructor.
Initializing the CSS file of the post preview. Set the post ID and the
parent ID and initiate the stylesheet.
</summary>
<param name="post_id" type="int">Post ID.</param>
</member>
<member name="M:Elementor.Core.Files.CSS.Post_Preview.get_preview_id">
</member>
<member name="M:Elementor.Core.Files.CSS.Post_Preview.get_file_handle_id">
<summary>
Get file handle ID.
Retrieve the handle ID for the previewed post CSS file.
</summary>
<returns>CSS file handle ID.</returns>
</member>
<member name="M:Elementor.Core.Files.CSS.Post.__construct(Pchp.Core.PhpValue)">
<summary>
Post CSS file constructor.
Initializing the CSS file of the post. Set the post ID and initiate the stylesheet.
</summary>
<param name="post_id" type="int">Post ID.</param>
</member>
<member name="M:Elementor.Core.Files.CSS.Post.get_name">
<summary>
Get CSS file name.
Retrieve the CSS file name.
</summary>
<returns>CSS file name.</returns>
</member>
<member name="M:Elementor.Core.Files.CSS.Post.get_post_id">
<summary>
Get post ID.
Retrieve the ID of current post.
</summary>
<returns>Post ID.</returns>
</member>
<member name="M:Elementor.Core.Files.CSS.Post.get_element_unique_selector(Elementor.Element_Base)">
<summary>
Get unique element selector.
Retrieve the unique selector for any given element.
</summary>
<param name="element" type="Element_Base">The element.</param>
<returns>Unique element selector.</returns>
</member>
<member name="M:Elementor.Core.Files.CSS.Post.load_meta">
<summary>
Load meta data.
Retrieve the post CSS file meta data.
</summary>
<returns>Post CSS file meta data.</returns>
</member>
<member name="M:Elementor.Core.Files.CSS.Post.update_meta(Pchp.Core.PhpValue)">
<summary>
Update meta data.
Update the global CSS file meta data.
</summary>
<param name="meta" type="array">New meta data.</param>
</member>
<member name="M:Elementor.Core.Files.CSS.Post.delete_meta">
<summary>
Delete meta.
Delete the file meta data.
</summary>
</member>
<member name="M:Elementor.Core.Files.CSS.Post.get_data">
<summary>
Get post data.
Retrieve raw post data from the database.
</summary>
<returns>Post data.</returns>
</member>
<member name="M:Elementor.Core.Files.CSS.Post.render_css">
<summary>
Render CSS.
Parse the CSS for all the elements.
</summary>
</member>
<member name="M:Elementor.Core.Files.CSS.Post.enqueue">
<summary>
Enqueue CSS.
Enqueue the post CSS file in Elementor.

This method ensures that the post was actually built with elementor before
enqueueing the post CSS file.
</summary>
</member>
<member name="M:Elementor.Core.Files.CSS.Post.add_controls_stack_style_rules(Elementor.Controls_Stack,Pchp.Core.PhpArray,Pchp.Core.PhpArray,Pchp.Core.PhpArray,Pchp.Core.PhpArray,Pchp.Core.PhpValue)">
<summary>
Add controls-stack style rules.
Parse the CSS for all the elements inside any given controls stack.

This method recursively renders the CSS for all the child elements in the stack.
</summary>
<param name="controls_stack" type="Controls_Stack">The controls stack.</param>
<param name="controls" type="array">Controls array.</param>
<param name="values" type="array">Values array.</param>
<param name="placeholders" type="array">Placeholders.</param>
<param name="replacements" type="array">Replacements.</param>
<param name="all_controls" type="array">All controls.</param>
</member>
<member name="M:Elementor.Core.Files.CSS.Post.get_enqueue_dependencies">
<summary>
Get enqueue dependencies.
Retrieve the name of the stylesheet used by `wp_enqueue_style()`.
</summary>
<returns>Name of the stylesheet.</returns>
</member>
<member name="M:Elementor.Core.Files.CSS.Post.get_inline_dependency">
<summary>
Get inline dependency.
Retrieve the name of the stylesheet used by `wp_add_inline_style()`.
</summary>
<returns>Name of the stylesheet.</returns>
</member>
<member name="M:Elementor.Core.Files.CSS.Post.get_file_handle_id">
<summary>
Get file handle ID.
Retrieve the handle ID for the post CSS file.
</summary>
<returns>CSS file handle ID.</returns>
</member>
<member name="M:Elementor.Core.Files.CSS.Post.render_styles(Elementor.Element_Base)">
<summary>
Render styles.
Parse the CSS for any given element.
</summary>
<param name="element" type="Element_Base">The element.</param>
</member>
<member name="M:Elementor.Core.Files.File_Types.Base.get_file_extension">
<summary>
Get File Extension
Returns the file type's file extension
</summary>
<returns>- file extension</returns>
</member>
<member name="M:Elementor.Core.Files.File_Types.Base.validate_file(Pchp.Core.PhpValue)">
<summary>
Validate File
This method give file types the chance to run file-type-specific validations before returning the file for upload.
</summary>
</member>
<member name="M:Elementor.Core.Files.File_Types.Base.is_upload_allowed">
<summary>
Is Upload Allowed
This method returns whether the file type is allowed to be uploaded, even if unfiltered uploads are disabled.
</summary>
</member>
<member name="M:Elementor.Core.Files.File_Types.Json.get_file_extension">
<summary>
Get File Extension
Returns the file type's file extension
</summary>
<returns>- file extension</returns>
</member>
<member name="M:Elementor.Core.Files.File_Types.Zip.get_file_extension">
<summary>
Get File Extension
Returns the file type's file extension
</summary>
<returns>- file extension</returns>
</member>
<member name="M:Elementor.Core.Files.File_Types.Zip.get_file_property_name">
<summary>
Get File Property Name
Get the property name to look for in the $_FILES superglobal
</summary>
</member>
<member name="M:Elementor.Core.Files.File_Types.Zip.extract(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Extract
Performs the extraction of the zip files to a temporary directory.
Returns an error if for some reason the ZipArchive utility isn't available.
Otherwise, Returns an array containing the temporary extraction directory, and the list of extracted files.
</summary>
<param name="file_path" type="string"></param>
<param name="allowed_file_types" type="array|null"></param>
</member>
<member name="M:Elementor.Core.Files.File_Types.Zip.get_allowed_files(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Get Allowed Files
Accepts a zipArchive instance and an array of allowed file types. Iterates over the zip archive's files and
checks if their extensions are in the list of allowed file types. Returns an array containing all valid files.
</summary>
<param name="zip" type="\ZipArchive"></param>
<param name="allowed_file_types" type="array"></param>
</member>
<member name="M:Elementor.Core.Files.File_Types.Zip.find_temp_files(Pchp.Core.PhpValue)">
<summary>
Find temporary files.
Recursively finds a list of temporary files from the extracted zip file.

Example return data:

[
0 =&gt; '/www/wp-content/uploads/elementor/tmp/5eb3a7a411d44/templates/block-2-col-marble-title.json',
1 =&gt; '/www/wp-content/uploads/elementor/tmp/5eb3a7a411d44/templates/block-2-col-text-and-photo.json',
]
</summary>
<param name="temp_path" type="string">- The temporary file path to scan for template files</param>
<returns>An array of temporary files on the filesystem</returns>
</member>
<member name="M:Elementor.Core.Files.Manager.__construct">
<summary>
Files manager constructor.
Initializing the Elementor files manager.
</summary>
</member>
<member name="M:Elementor.Core.Files.Manager.on_delete_post(Pchp.Core.PhpValue)">
<summary>
On post delete.
Delete post CSS immediately after a post is deleted from the database.

Fired by `deleted_post` action.
</summary>
<param name="post_id" type="string">Post ID.</param>
</member>
<member name="M:Elementor.Core.Files.Manager.on_export_post_meta(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
On export post meta.
When exporting data using WXR, skip post CSS file meta key. This way the
export won't contain the post CSS file data used by Elementor.

Fired by `wxr_export_skip_postmeta` filter.
</summary>
<param name="skip" type="bool">Whether to skip the current post meta.</param>
<param name="meta_key" type="string">Current meta key.</param>
<returns>Whether to skip the post CSS meta.</returns>
</member>
<member name="M:Elementor.Core.Files.Manager.clear_cache">
<summary>
Clear cache.
Delete all meta containing files data. And delete the actual
files from the upload directory.
</summary>
</member>
<member name="M:Elementor.Core.Files.Manager.register_actions">
<summary>
Register actions.
Register filters and actions for the files manager.
</summary>
</member>
<member name="M:Elementor.Core.Files.Manager.reset_assets_data">
<summary>
Reset Assets Data.
Reset the page assets data.
</summary>
</member>
<member name="M:Elementor.Core.Files.Uploads_Manager.register_file_types">
<summary>
Register File Types
To Add a new file type to Elementor, with its own handling logic, you need to add it to the $file_types array here.
</summary>
</member>
<member name="M:Elementor.Core.Files.Uploads_Manager.extract_and_validate_zip(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Extract and Validate Zip
This method accepts a $file array (which minimally should include a 'tmp_name')
</summary>
<param name="file_path" type="string"></param>
<param name="allowed_file_types" type="array"></param>
</member>
<member name="M:Elementor.Core.Files.Uploads_Manager.handle_elementor_upload(Pchp.Core.PhpArray,Pchp.Core.PhpValue)">
<summary>
Handle Elementor Upload
This method receives a $file array. If the received file is a Base64 string, the $file array should include a
'fileData' property containing the string, which is decoded and has its contents stored in a temporary file.
If the $file parameter passed is a standard $file array, the 'name' and 'tmp_name' properties are used for
validation.

The file goes through validation; if it passes validation, the file is returned. Otherwise, an error is returned.
</summary>
<param name="file" type="array"></param>
<param name="allowed_file_extensions" type="array">Optional. an array of file types that are allowed to pass validation for each
upload.</param>
</member>
<member name="M:Elementor.Core.Files.Uploads_Manager.handle_elementor_wp_media_upload(Pchp.Core.PhpValue)">
<summary>
Runs on the 'wp_handle_upload_prefilter' filter.
</summary>
</member>
<member name="M:Elementor.Core.Files.Uploads_Manager.get_file_type_handlers(Pchp.Core.PhpValue)">
<summary>
Get File Type Handler
Initialize the proper file type handler according to the file extension
and assign it to the file type handlers array.
</summary>
<param name="file_extension" type="string|null">- file extension</param>
</member>
<member name="M:Elementor.Core.Files.Uploads_Manager.create_temp_file(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Create Temp File
Create a random temporary file.
</summary>
<param name="file_content" type="string"></param>
<param name="file_name" type="string"></param>
</member>
<member name="M:Elementor.Core.Files.Uploads_Manager.get_temp_dir">
<summary>
Get Temp Directory
Get the temporary files directory path. If the directory does not exist, this method creates it.
</summary>
<returns>$temp_dir</returns>
</member>
<member name="M:Elementor.Core.Files.Uploads_Manager.create_unique_dir">
<summary>
Create Unique Temp Dir
Create a unique temporary directory
</summary>
<returns>the new directory path</returns>
</member>
<member name="M:Elementor.Core.Files.Uploads_Manager.are_unfiltered_uploads_enabled">
<summary>
Are Unfiltered Uploads Enabled
Checks if the user allowed uploading unfiltered files.
</summary>
</member>
<member name="M:Elementor.Core.Files.Uploads_Manager.add_file_extension_to_allowed_extensions_list(Pchp.Core.PhpValue)">
<summary>
Add File Extension To Allowed Extensions List
</summary>
<param name="file_type" type="string"></param>
</member>
<member name="M:Elementor.Core.Files.Uploads_Manager.save_base64_to_tmp_file(Pchp.Core.PhpValue)">
<summary>
Save Base64 as File
Saves a Base64 string as a .tmp file in Elementor's temporary files directory.
</summary>
</member>
<member name="M:Elementor.Core.Files.Uploads_Manager.is_elementor_wp_media_upload">
<summary>
is_elementor_wp_media_upload
</summary>
</member>
<member name="M:Elementor.Core.Files.Uploads_Manager.validate_file(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Validate File
</summary>
<param name="file_path" type="string"></param>
<param name="file_extensions" type="array">Optional</param>
</member>
<member name="M:Elementor.Core.Files.Uploads_Manager.remove_file_or_dir(Pchp.Core.PhpValue)">
<summary>
Remove File Or Directory
Directory is deleted recursively with all of its contents (subdirectories and files).
</summary>
<param name="path" type="string"></param>
</member>
<member name="M:Elementor.Core.Files.Uploads_Manager.remove_directory_with_files(Pchp.Core.PhpValue)">
<summary>
Remove Directory with Files
</summary>
<param name="dir" type="string"></param>
</member>
<member name="M:Elementor.Core.Files.Uploads_Manager.get_allowed_file_extensions">
<summary>
Get Allowed File Extensions
Retrieve an array containing the list of file extensions allowed for upload.
</summary>
<returns>file extension/s</returns>
</member>
<member name="M:Elementor.Core.Frontend.Render_Mode_Manager.get_base_url(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:Elementor.Core.Frontend.Render_Mode_Manager.get_nonce_action(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="M:Elementor.Core.Frontend.Render_Mode_Manager.register_render_mode(Pchp.Core.PhpValue)">
<summary>
Register a new render mode into the render mode manager.
</summary>
<returns>$this</returns>
</member>
<member name="M:Elementor.Core.Frontend.Render_Mode_Manager.get_current">
<summary>
Get the current render mode.
</summary>
</member>
<member name="M:Elementor.Core.Frontend.Render_Mode_Manager.set_current(Elementor.Core.Frontend.RenderModes.Render_Mode_Base)">
<param name="render_mode" type="Render_Mode_Base"></param>
<returns>$this</returns>
</member>
<member name="M:Elementor.Core.Frontend.Render_Mode_Manager.choose_render_mode">
<summary>
Set render mode.
</summary>
<returns>$this</returns>
</member>
<member name="M:Elementor.Core.Frontend.Render_Mode_Manager.add_current_actions">
<summary>
Add actions base on the current render.
</summary>
</member>
<member name="M:Elementor.Core.Frontend.Render_Mode_Manager.__construct">
<summary>
Render_Mode_Manager constructor.
</summary>
</member>
<member name="M:Elementor.Core.Frontend.RenderModes.Render_Mode_Base.__construct(Pchp.Core.PhpValue)">
<summary>
Render_Mode_Base constructor.
</summary>
</member>
<member name="M:Elementor.Core.Frontend.RenderModes.Render_Mode_Base.get_name(Pchp.Core.Context,Pchp.Core.Reflection.PhpTypeInfo)">
<summary>
Returns the key name of the class.
</summary>
</member>
<member name="M:Elementor.Core.Frontend.RenderModes.Render_Mode_Base.get_url(Pchp.Core.Context,Pchp.Core.Reflection.PhpTypeInfo,Pchp.Core.PhpValue)">
</member>
<member name="M:Elementor.Core.Frontend.RenderModes.Render_Mode_Base.prepare_render">
<summary>
Runs before the render, by default load scripts and styles.
</summary>
</member>
<member name="M:Elementor.Core.Frontend.RenderModes.Render_Mode_Base.enqueue_scripts">
<summary>
By default do not do anything.
</summary>
</member>
<member name="M:Elementor.Core.Frontend.RenderModes.Render_Mode_Base.enqueue_styles">
<summary>
By default do not do anything.
</summary>
</member>
<member name="M:Elementor.Core.Frontend.RenderModes.Render_Mode_Base.get_permissions_callback">
<summary>
Check if the current user has permissions for the current render mode.
</summary>
</member>
<member name="M:Elementor.Core.Frontend.RenderModes.Render_Mode_Base.is_static">
<summary>
Checks if the current render mode is static render, By default returns false.
</summary>
</member>
<member name="M:Elementor.Core.Frontend.RenderModes.Render_Mode_Base.get_document">
</member>
<member name="M:Elementor.Core.Frontend.RenderModes.Render_Mode_Normal.get_name(Pchp.Core.Context)">
</member>
<member name="M:Elementor.Core.Frontend.RenderModes.Render_Mode_Normal.get_permissions_callback">
<summary>
Anyone can access the normal render mode.
</summary>
</member>
<member name="M:Elementor.Core.Kits.Controls.Repeater.get_type">
<summary>
Get control type.
Retrieve the control type, in this case `global-style-repeater`.
</summary>
<returns>Control type.</returns>
</member>
<member name="M:Elementor.Core.Kits.Controls.Repeater.get_default_settings">
<summary>
Get repeater control default settings.
Retrieve the default settings of the repeater control. Used to return the
default settings while initializing the repeater control.
</summary>
<returns>Control default settings.</returns>
</member>
<member name="M:Elementor.Core.Kits.Controls.Repeater.content_template">
<summary>
Render repeater control output in the editor.
Used to generate the control HTML in the editor using Underscore JS
template. The variables for the class are available using `data` JS
object.
</summary>
</member>
<member name="M:Elementor.Core.Kits.Documents.Kit.get_tabs">
</member>
<member name="M:Elementor.Core.Kits.Documents.Kit.get_tab(Pchp.Core.PhpValue)">
<summary>
Retrieve a tab by ID.
</summary>
</member>
<member name="M:Elementor.Core.Kits.Documents.Kit.register_tab(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Register a kit settings menu.
</summary>
</member>
<member name="M:Elementor.Core.Kits.Documents.Kit.get_initial_config">
</member>
<member name="M:Elementor.Core.Kits.Documents.Kit.register_controls">
</member>
<member name="M:Elementor.Core.Kits.Documents.Kit.register_tabs">
<summary>
Register default tabs (menu pages) for site settings.
</summary>
</member>
<member name="M:Elementor.Core.Kits.Documents.Tabs.Settings_Layout.before_save(Pchp.Core.PhpArray)">
<summary>
Before Save
Runs Before the Kit document is saved.

For backwards compatibility, when the mobile and tablet breakpoints are updated, we also update the
old breakpoint settings ('viewport_md', 'viewport_lg' ) with the saved values + 1px. The reason 1px
is added is because the old breakpoints system was min-width based, and the new system introduced in
Elementor v3.2.0 is max-width based.
</summary>
<param name="data" type="array"></param>
<returns>$data</returns>
</member>
<member name="M:Elementor.Core.Kits.Documents.Tabs.Tab_Base.before_save(Pchp.Core.PhpArray)">
<summary>
Before Save
Allows for modifying the kit data before it is saved to the database.
</summary>
<param name="data" type="array"></param>
</member>
<member name="M:Elementor.Core.Kits.Manager.is_valid_kit(Pchp.Core.PhpValue)">
</member>
<member name="M:Elementor.Core.Kits.Manager.get_empty_kit_instance">
<summary>
Returns an empty kit for situation when there is no kit in the site.
</summary>
</member>
<member name="M:Elementor.Core.Kits.Manager.is_kit(Pchp.Core.PhpValue)">
<summary>
Checks if specific post is a kit.
</summary>
</member>
<member name="M:Elementor.Core.Kits.Manager.init_kit_controls">
<summary>
Init kit controls.
A temp solution in order to avoid init kit group control from within another group control.

After moving the `default_font` to the kit, the Typography group control cause initialize the kit controls at: https://github.com/elementor/elementor/blob/e6e1db9eddef7e3c1a5b2ba0c2338e2af2a3bfe3/includes/controls/groups/typography.php#L91
and because the group control is a singleton, its args are changed to the last kit group control.
</summary>
</member>
<member name="M:Elementor.Core.Kits.Manager.create_default_kit(Pchp.Core.Context)">
<summary>
Create a default kit if needed.
This action runs on activation hook, all the Plugin components do not exists and
the Document manager and Kits manager instances cannot be used.
</summary>
</member>
<member name="M:Elementor.Core.Kits.Manager.register_document(Pchp.Core.PhpValue)">
<param name="documents_manager" type="Documents_Manager"></param>
</member>
<member name="M:Elementor.Core.Kits.Manager.map_scheme_to_global(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Map Scheme To Global
Convert a given scheme value to its corresponding default global value
</summary>
<param name="type" type="string">'color'/'typography'</param>
</member>
<member name="M:Elementor.Core.Kits.Manager.convert_scheme_to_global(Pchp.Core.PhpValue)">
<summary>
Convert Scheme to Default Global
If a control has a scheme property, convert it to a default Global.
</summary>
<param name="scheme">- Control scheme property</param>
<returns>- Control/group control args</returns>
</member>
<member name="M:Elementor.Core.Kits.Manager.add_body_class">
<summary>
Add kit wrapper body class.
It should be added even for non Elementor pages,
in order to support embedded templates.
</summary>
</member>
<member name="M:Elementor.Core.Kits.Manager.before_delete_kit(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Send a confirm message before move a kit to trash, or if delete permanently not for trash.
</summary>
<param name="is_permanently_delete" type="false"></param>
</member>
<member name="M:Elementor.Core.Kits.Manager.add_menu_in_admin_bar(Pchp.Core.PhpValue)">
<summary>
Add 'Edit with elementor -&gt; Site Settings' in admin bar.
</summary>
<returns>$admin_bar_config</returns>
</member>
<member name="M:Elementor.Core.Logger.Items.Base.from_json(Pchp.Core.Context,Pchp.Core.PhpValue)">
<returns>| null</returns>
</member>
<member name="M:Elementor.Core.Logger.Items.Log_Item_Interface.__construct(Pchp.Core.PhpValue)">
<summary>
Log_Item_Interface constructor.
</summary>
<param name="args" type="array"></param>
</member>
<member name="M:Elementor.Core.Logger.Items.Log_Item_Interface.__get(Pchp.Core.PhpValue)">
<param name="name" type="string"></param>
</member>
<member name="M:Elementor.Core.Logger.Items.Log_Item_Interface.__toString">
</member>
<member name="M:Elementor.Core.Logger.Items.Log_Item_Interface.from_json(Pchp.Core.Context,Pchp.Core.PhpValue)">
<returns>| null</returns>
</member>
<member name="M:Elementor.Core.Logger.Items.Log_Item_Interface.format(Pchp.Core.PhpValue)">
<param name="format" type="string"></param>
</member>
<member name="M:Elementor.Core.Logger.Items.Log_Item_Interface.get_fingerprint">
</member>
<member name="M:Elementor.Core.Logger.Items.Log_Item_Interface.increase_times(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<param name="item" type="Log_Item_Interface"></param>
<param name="truncate" type="bool"></param>
</member>
<member name="M:Elementor.Core.Logger.Items.Log_Item_Interface.get_name">
</member>
<member name="M:Elementor.Core.Logger.Loggers.Base.get_log">
</member>
<member name="M:Elementor.Core.Logger.Loggers.Base.create_item(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<param name="message" type="string"></param>
<param name="type" type="string"></param>
<param name="args" type="array"></param>
</member>
<member name="M:Elementor.Core.Logger.Loggers.Logger_Interface.log(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<param name="message" type="string"></param>
<param name="type" type="string"></param>
<param name="meta" type="array"></param>
</member>
<member name="M:Elementor.Core.Logger.Loggers.Logger_Interface.info(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<param name="message" type="string"></param>
<param name="meta" type="array"></param>
</member>
<member name="M:Elementor.Core.Logger.Loggers.Logger_Interface.notice(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<param name="message" type="string"></param>
<param name="meta" type="array"></param>
</member>
<member name="M:Elementor.Core.Logger.Loggers.Logger_Interface.warning(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<param name="message" type="string"></param>
<param name="meta" type="array"></param>
</member>
<member name="M:Elementor.Core.Logger.Loggers.Logger_Interface.error(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<param name="message" type="string"></param>
<param name="meta" type="array"></param>
</member>
<member name="M:Elementor.Core.Logger.Loggers.Logger_Interface.get_formatted_log_entries(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<param name="max_entries" type="int"></param>
<param name="table" type="bool">use &lt;td&gt; in format</param>
<returns>[ 'key' =&gt; [ 'total_count' =&gt; int, 'count' =&gt; int, 'entries' =&gt; Log_Item[] ] ]</returns>
</member>
<member name="M:Elementor.Core.Logger.Manager.js_log">
<summary>
Javascript log.
Log Elementor errors and save them in the database.

Fired by `wp_ajax_elementor_js_log` action.
</summary>
</member>
<member name="M:Elementor.Core.Logger.Manager.get_logger(Pchp.Core.PhpValue)">
<param name="name" type="string"></param>
</member>
<member name="M:Elementor.Core.Logger.Manager.log(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<param name="message" type="string"></param>
<param name="args" type="array"></param>
</member>
<member name="M:Elementor.Core.Logger.Manager.info(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<param name="message" type="string"></param>
<param name="args" type="array"></param>
</member>
<member name="M:Elementor.Core.Logger.Manager.notice(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<param name="message" type="string"></param>
<param name="args" type="array"></param>
</member>
<member name="M:Elementor.Core.Logger.Manager.warning(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<param name="message" type="string"></param>
<param name="args" type="array"></param>
</member>
<member name="M:Elementor.Core.Logger.Manager.error(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<param name="message" type="string"></param>
<param name="args" type="array"></param>
</member>
<member name="M:Elementor.Core.Modules_Manager.__construct">
<summary>
Modules manager constructor.
Initializing the Elementor modules manager.
</summary>
</member>
<member name="M:Elementor.Core.Modules_Manager.get_modules_names">
<summary>
Get modules names.
Retrieve the modules names.
</summary>
<returns>Modules names.</returns>
</member>
<member name="M:Elementor.Core.Modules_Manager.get_modules(Pchp.Core.PhpValue)">
<summary>
Get modules.
Retrieve all the registered modules or a specific module.
</summary>
<param name="module_name" type="string">Module name.</param>
<returns>All the registered modules or a specific module.</returns>
</member>
<member name="M:Elementor.Core.Modules_Manager.get_modules_namespace_prefix">
<summary>
Get modules namespace prefix.
Retrieve the modules namespace prefix.
</summary>
<returns>Modules namespace prefix.</returns>
</member>
<member name="M:Elementor.Core.Page_Assets.Data_Managers.Base.get_asset_content">
<summary>
Get Asset Content.
Responsible for extracting the asset data from a certain file.
Will be triggered automatically when the asset data does not exist, or when the asset version was changed.
</summary>
</member>
<member name="M:Elementor.Core.Page_Assets.Data_Managers.Base.get_key">
<summary>
Get Asset Key.
The asset data will be saved in the DB under this key.
</summary>
</member>
<member name="M:Elementor.Core.Page_Assets.Data_Managers.Base.get_version">
<summary>
Get Relative Version.
The asset data will be re-evaluated according the version number.
</summary>
</member>
<member name="M:Elementor.Core.Page_Assets.Data_Managers.Base.get_file_path">
<summary>
Get Asset Path.
The asset data will be extracted from the file path.
</summary>
</member>
<member name="M:Elementor.Core.Page_Assets.Data_Managers.Base.get_config_data(Pchp.Core.PhpValue)">
<summary>
Get Config Data.
Holds a unique data relevant for the specific assets category type.
</summary>
</member>
<member name="M:Elementor.Core.Page_Assets.Data_Managers.Base.set_asset_data(Pchp.Core.PhpValue)">
<summary>
Set Asset Data.
Responsible for setting the current asset data.
</summary>
</member>
<member name="M:Elementor.Core.Page_Assets.Data_Managers.Base.save_asset_data(Pchp.Core.PhpValue)">
<summary>
Save Asset Data.
Responsible for saving the asset data in the DB.
</summary>
<param name="asset_key" type="string"></param>
</member>
<member name="M:Elementor.Core.Page_Assets.Data_Managers.Base.is_asset_version_changed(Pchp.Core.PhpValue)">
<summary>
Is Asset Version Changed.
Responsible for comparing the saved asset data version to the current relative version.
</summary>
<param name="asset_key" type="string"></param>
</member>
<member name="M:Elementor.Core.Page_Assets.Data_Managers.Base.get_file_data(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Get File Data.
Getting a file content or size.
</summary>
<param name="data_type" type="string">(content|size)</param>
<param name="file_key" type="string">- In case that the same file data is needed for multiple assets (like a JSON file), the file data key should be the same for all shared assets to make sure that the file is being read only once.</param>
</member>
<member name="M:Elementor.Core.Page_Assets.Data_Managers.Base.get_saved_assets_data">
<summary>
Get Saved Assets Data.
Getting the assets data from the DB.
</summary>
</member>
<member name="M:Elementor.Core.Page_Assets.Data_Managers.Base.init_asset_data(Pchp.Core.PhpValue)">
<summary>
Init Asset Data.
Initialize the asset data and handles the asset content updates when needed.
</summary>
<param name="config" type="array">{
@type string 'key'
@type string 'version'
@type string 'file_path'
@type array 'data'
}</param>
</member>
<member name="M:Elementor.Core.Page_Assets.Data_Managers.Base.get_asset_data(Pchp.Core.PhpValue)">
<summary>
Get Asset Data.
Getting the asset data content.
</summary>
<param name="config" type="array">{
@type string 'key'
@type string 'version'
@type string 'file_path'
@type array 'data'
}</param>
</member>
<member name="M:Elementor.Core.Page_Assets.Loader.enable_assets(Pchp.Core.PhpArray)">
<param name="assets" type="array">{
@type array 'styles'
@type array 'scripts'
}</param>
</member>
<member name="M:Elementor.Core.Page_Assets.Loader.add_assets(Pchp.Core.PhpArray)">
<param name="assets" type="array">{
@type array 'styles'
@type array 'scripts'
}</param>
</member>
<member name="M:Elementor.Core.Responsive.Files.Frontend.__construct(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:Elementor.Core.Responsive.Files.Frontend.parse_content">
</member>
<member name="M:Elementor.Core.Responsive.Files.Frontend.load_meta">
<summary>
Load meta.
Retrieve the file meta data.
</summary>
</member>
<member name="M:Elementor.Core.Responsive.Files.Frontend.update_meta(Pchp.Core.PhpValue)">
<summary>
Update meta.
Update the file meta data.
</summary>
<param name="meta" type="array">New meta data.</param>
</member>
<member name="M:Elementor.Core.Responsive.Files.Frontend.delete_meta">
<summary>
Delete meta.
Delete the file meta data.
</summary>
</member>
<member name="M:Elementor.Core.Responsive.Files.Frontend.get_file_meta_key">
</member>
<member name="M:Elementor.Core.Responsive.Files.Frontend.load_meta_option">
</member>
<member name="M:Elementor.Core.Responsive.Files.Frontend.maybe_convert_placeholder_data(Pchp.Core.PhpValue)">
<summary>
Maybe Convert Placeholder Data
Converts responsive placeholders in Elementor CSS template files from the legacy format into the new format.
Used for backwards compatibility for old Pro versions that were built with an Elementor Core version &lt;3.2.0.
</summary>
</member>
<member name="M:Elementor.Core.Responsive.Responsive.get_default_breakpoints(Pchp.Core.Context)">
<summary>
Get default breakpoints.
Retrieve the default responsive breakpoints.
</summary>
<returns>Default breakpoints.</returns>
</member>
<member name="M:Elementor.Core.Responsive.Responsive.get_editable_breakpoints(Pchp.Core.Context)">
<summary>
Get editable breakpoints.
Retrieve the editable breakpoints.
</summary>
<returns>Editable breakpoints.</returns>
</member>
<member name="M:Elementor.Core.Responsive.Responsive.get_breakpoints(Pchp.Core.Context)">
<summary>
Get breakpoints.
Retrieve the responsive breakpoints.
</summary>
<returns>Responsive breakpoints.</returns>
</member>
<member name="M:Elementor.Core.Responsive.Responsive.has_custom_breakpoints(Pchp.Core.Context)">
</member>
<member name="M:Elementor.Core.Responsive.Responsive.get_stylesheet_templates_path(Pchp.Core.Context)">
</member>
<member name="M:Elementor.Core.Responsive.Responsive.compile_stylesheet_templates(Pchp.Core.Context)">
</member>
<member name="M:Elementor.Core.RoleManager.Role_Manager.get_role_manager_options">
</member>
<member name="M:Elementor.Core.RoleManager.Role_Manager.get_page_title">
</member>
<member name="M:Elementor.Core.RoleManager.Role_Manager.register_admin_menu">
</member>
<member name="M:Elementor.Core.RoleManager.Role_Manager.create_tabs">
</member>
<member name="M:Elementor.Core.RoleManager.Role_Manager.display_settings_page">
</member>
<member name="M:Elementor.Core.RoleManager.Role_Manager.display_role_controls(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<param name="role_slug" type="string">The role slug.</param>
<param name="role_data" type="array">An array with role data.</param>
</member>
<member name="M:Elementor.Core.RoleManager.Role_Manager.get_go_pro_link_html">
</member>
<member name="M:Elementor.Core.RoleManager.Role_Manager.get_user_restrictions_array">
</member>
<member name="M:Elementor.Core.RoleManager.Role_Manager.get_user_restrictions">
</member>
<member name="M:Elementor.Core.RoleManager.Role_Manager.user_can(Pchp.Core.PhpValue)">
</member>
<member name="M:Elementor.Core.RoleManager.Role_Manager.__construct">
</member>
<member name="M:Elementor.Core.Schemes.Base_UI.get_title">
<summary>
Get scheme title.
Retrieve the scheme title.
</summary>
</member>
<member name="M:Elementor.Core.Schemes.Base_UI.get_disabled_title">
<summary>
Get scheme disabled title.
Retrieve the scheme disabled title.
</summary>
</member>
<member name="M:Elementor.Core.Schemes.Base_UI.get_scheme_titles">
<summary>
Get scheme titles.
Retrieve the scheme titles.
</summary>
</member>
<member name="M:Elementor.Core.Schemes.Base_UI.print_template_content">
<summary>
Print scheme content template.
Used to generate the HTML in the editor using Underscore JS template. The
variables for the class are available using `data` JS object.
</summary>
</member>
<member name="M:Elementor.Core.Schemes.Base_UI._init_system_schemes">
<summary>
Init system schemes.
Initialize the system schemes.
</summary>
</member>
<member name="M:Elementor.Core.Schemes.Base_UI.get_system_schemes">
<summary>
Get system schemes.
Retrieve the system schemes.
</summary>
<returns>System schemes.</returns>
</member>
<member name="M:Elementor.Core.Schemes.Base_UI.print_template">
<summary>
Print scheme template.
Used to generate the scheme template on the editor using Underscore JS
template.
</summary>
</member>
<member name="M:Elementor.Core.Schemes.Base_UI.get_scheme">
<summary>
Get scheme.
Retrieve the scheme.
</summary>
<returns>The scheme.</returns>
</member>
<member name="M:Elementor.Core.Schemes.Base.get_type(Pchp.Core.Context)">
<summary>
Get scheme type.
Retrieve the scheme type.
</summary>
</member>
<member name="M:Elementor.Core.Schemes.Base.get_default_scheme">
<summary>
Get default scheme.
Retrieve the default scheme.
</summary>
</member>
<member name="M:Elementor.Core.Schemes.Base.get_description(Pchp.Core.Context)">
<summary>
Get description.
Retrieve the scheme description.
</summary>
<returns>Scheme description.</returns>
</member>
<member name="M:Elementor.Core.Schemes.Base.get_scheme_value">
<summary>
Get scheme value.
Retrieve the scheme value.
</summary>
<returns>Scheme value.</returns>
</member>
<member name="M:Elementor.Core.Schemes.Base.save_scheme(Pchp.Core.PhpArray)">
<summary>
Save scheme.
Update Elementor scheme in the database, and update the last updated
scheme time.
</summary>
<param name="posted" type="array"></param>
</member>
<member name="M:Elementor.Core.Schemes.Base.get_scheme">
<summary>
Get scheme.
Retrieve the scheme.
</summary>
<returns>The scheme.</returns>
</member>
<member name="M:Elementor.Core.Schemes.Color_Picker.get_type(Pchp.Core.Context)">
<summary>
Get color picker scheme type.
Retrieve the color picker scheme type.
</summary>
<returns>Color picker scheme type.</returns>
</member>
<member name="M:Elementor.Core.Schemes.Color_Picker.get_default_scheme">
<summary>
Get default color picker scheme.
Retrieve the default color picker scheme.
</summary>
<returns>Default color picker scheme.</returns>
</member>
<member name="M:Elementor.Core.Schemes.Color.get_type(Pchp.Core.Context)">
<summary>
Get color scheme type.
Retrieve the color scheme type.
</summary>
<returns>Color scheme type.</returns>
</member>
<member name="M:Elementor.Core.Schemes.Color.get_title">
<summary>
Get color scheme title.
Retrieve the color scheme title.
</summary>
<returns>Color scheme title.</returns>
</member>
<member name="M:Elementor.Core.Schemes.Color.get_disabled_title">
<summary>
Get color scheme disabled title.
Retrieve the color scheme disabled title.
</summary>
<returns>Color scheme disabled title.</returns>
</member>
<member name="M:Elementor.Core.Schemes.Color.get_scheme_titles">
<summary>
Get color scheme titles.
Retrieve the color scheme titles.
</summary>
<returns>Color scheme titles.</returns>
</member>
<member name="M:Elementor.Core.Schemes.Color.get_default_scheme">
<summary>
Get default color scheme.
Retrieve the default color scheme.
</summary>
<returns>Default color scheme.</returns>
</member>
<member name="M:Elementor.Core.Schemes.Color.print_template_content">
<summary>
Print color scheme content template.
Used to generate the HTML in the editor using Underscore JS template. The
variables for the class are available using `data` JS object.
</summary>
</member>
<member name="M:Elementor.Core.Schemes.Color._init_system_schemes">
<summary>
Init system color schemes.
Initialize the system color schemes.
</summary>
<returns>System color schemes.</returns>
</member>
<member name="M:Elementor.Core.Schemes.Color._get_system_schemes_to_print">
<summary>
Get system color schemes to print.
Retrieve the system color schemes
</summary>
<returns>The system color schemes.</returns>
</member>
<member name="M:Elementor.Core.Schemes.Color._get_current_scheme_title">
<summary>
Get current color scheme title.
Retrieve the current color scheme title.
</summary>
<returns>The current color scheme title.</returns>
</member>
<member name="M:Elementor.Core.Schemes.Manager.register_scheme(Pchp.Core.PhpValue)">
<summary>
Register new scheme.
Add a new scheme to the schemes list. The method creates a new scheme
instance for any given scheme class and adds the scheme to the registered
schemes list.
</summary>
<param name="scheme_class" type="string">Scheme class name.</param>
</member>
<member name="M:Elementor.Core.Schemes.Manager.unregister_scheme(Pchp.Core.PhpValue)">
<summary>
Unregister scheme.
Removes a scheme from the list of registered schemes.
</summary>
<param name="id" type="string">Scheme ID.</param>
<returns>True if the scheme was removed, False otherwise.</returns>
</member>
<member name="M:Elementor.Core.Schemes.Manager.get_registered_schemes">
<summary>
Get registered schemes.
Retrieve the registered schemes list from the current instance.
</summary>
<returns>Registered schemes.</returns>
</member>
<member name="M:Elementor.Core.Schemes.Manager.get_registered_schemes_data">
<summary>
Get schemes data.
Retrieve all the registered schemes with data for each scheme.
</summary>
<returns>Registered schemes with each scheme data.</returns>
</member>
<member name="M:Elementor.Core.Schemes.Manager.get_schemes_defaults">
<summary>
Get default schemes.
Retrieve all the registered schemes with default scheme for each scheme.
</summary>
<returns>Registered schemes with with default scheme for each scheme.</returns>
</member>
<member name="M:Elementor.Core.Schemes.Manager.get_system_schemes">
<summary>
Get system schemes.
Retrieve all the registered ui schemes with system schemes for each scheme.
</summary>
<returns>Registered ui schemes with with system scheme for each scheme.</returns>
</member>
<member name="M:Elementor.Core.Schemes.Manager.get_scheme(Pchp.Core.PhpValue)">
<summary>
Get scheme.
Retrieve a single scheme from the list of all the registered schemes in
the current instance.
</summary>
<param name="id" type="string">Scheme ID.</param>
<returns>Scheme instance if scheme exist, False otherwise.</returns>
</member>
<member name="M:Elementor.Core.Schemes.Manager.get_scheme_value(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Get scheme value.
Retrieve the scheme value from the list of all the registered schemes in
the current instance.
</summary>
<param name="scheme_type" type="string">Scheme type.</param>
<param name="scheme_value" type="string">Scheme value.</param>
<returns>Scheme value if scheme exist, False otherwise.</returns>
</member>
<member name="M:Elementor.Core.Schemes.Manager.ajax_apply_scheme(Pchp.Core.PhpArray)">
<summary>
Ajax apply scheme.
Ajax handler for Elementor apply_scheme.

Fired by `wp_ajax_elementor_apply_scheme` action.
</summary>
<param name="data" type="array"></param>
</member>
<member name="M:Elementor.Core.Schemes.Manager.print_schemes_templates">
<summary>
Print ui schemes templates.
Used to generate the scheme templates on the editor using Underscore JS
template, for all the registered ui schemes.
</summary>
</member>
<member name="M:Elementor.Core.Schemes.Manager.register_ajax_actions(Elementor.Core.Common.Modules.Ajax.Module)">
<param name="ajax" type="Ajax"></param>
</member>
<member name="M:Elementor.Core.Schemes.Manager.get_enabled_schemes(Pchp.Core.Context)">
<summary>
Get enabled schemes.
Retrieve all enabled schemes from the list of the registered schemes in
the current instance.
</summary>
<returns>Enabled schemes.</returns>
</member>
<member name="M:Elementor.Core.Schemes.Manager.register_default_schemes">
<summary>
Register default schemes.
Add a default schemes to the register schemes list.

This method is used to set initial schemes when initializing the class.
</summary>
</member>
<member name="M:Elementor.Core.Schemes.Manager.__construct">
<summary>
Schemes manager constructor.
Initializing Elementor schemes manager and register default schemes.
</summary>
</member>
<member name="M:Elementor.Core.Schemes.Typography.get_type(Pchp.Core.Context)">
<summary>
Get typography scheme type.
Retrieve the typography scheme type.
</summary>
<returns>Typography scheme type.</returns>
</member>
<member name="M:Elementor.Core.Schemes.Typography.get_title">
<summary>
Get typography scheme title.
Retrieve the typography scheme title.
</summary>
<returns>Typography scheme title.</returns>
</member>
<member name="M:Elementor.Core.Schemes.Typography.get_disabled_title">
<summary>
Get typography scheme disabled title.
Retrieve the typography scheme disabled title.
</summary>
<returns>Typography scheme disabled title.</returns>
</member>
<member name="M:Elementor.Core.Schemes.Typography.get_scheme_titles">
<summary>
Get typography scheme titles.
Retrieve the typography scheme titles.
</summary>
<returns>Typography scheme titles.</returns>
</member>
<member name="M:Elementor.Core.Schemes.Typography.get_default_scheme">
<summary>
Get default typography scheme.
Retrieve the default typography scheme.
</summary>
<returns>Default typography scheme.</returns>
</member>
<member name="M:Elementor.Core.Schemes.Typography._init_system_schemes">
<summary>
Init system typography schemes.
Initialize the system typography schemes.
</summary>
<returns>System typography schemes.</returns>
</member>
<member name="M:Elementor.Core.Schemes.Typography.print_template_content">
<summary>
Print typography scheme content template.
Used to generate the HTML in the editor using Underscore JS template. The
variables for the class are available using `data` JS object.
</summary>
</member>
<member name="M:Elementor.Core.Settings.Base.CSS_Manager.get_css_file_name">
<summary>
Get CSS file name.
Retrieve CSS file name for the settings base css manager.
</summary>
<returns>CSS file name</returns>
</member>
<member name="M:Elementor.Core.Settings.Base.CSS_Manager.get_model_for_css_file(Elementor.Core.Files.CSS.Base)">
<summary>
Get model for CSS file.
Retrieve the model for the CSS file.
</summary>
<param name="css_file" type="CSS_File">The requested CSS file.</param>
</member>
<member name="M:Elementor.Core.Settings.Base.CSS_Manager.get_css_file_for_update(Pchp.Core.PhpValue)">
<summary>
Get CSS file for update.
Retrieve the CSS file before updating it.
</summary>
<param name="id" type="int">Post ID.</param>
</member>
<member name="M:Elementor.Core.Settings.Base.CSS_Manager.__construct">
<summary>
Settings base manager constructor.
Initializing Elementor settings base css manager.
</summary>
</member>
<member name="M:Elementor.Core.Settings.Base.CSS_Manager.save_settings(Pchp.Core.PhpArray,Pchp.Core.PhpValue)">
<summary>
Save settings.
Save settings to the database and update the CSS file.
</summary>
<param name="settings" type="array">Settings.</param>
<param name="id" type="int">Optional. Post ID. Default is `0`.</param>
</member>
<member name="M:Elementor.Core.Settings.Base.CSS_Manager.add_settings_css_rules(Elementor.Core.Files.CSS.Base)">
<summary>
Add settings CSS rules.
Add new CSS rules to the settings manager.

Fired by `elementor/css-file/{$name}/parse` action.
</summary>
<param name="css_file" type="CSS_File">The requested CSS file.</param>
</member>
<member name="M:Elementor.Core.Settings.Base.CSS_Model.get_css_wrapper_selector">
<summary>
Get CSS wrapper selector.
Retrieve the wrapper selector for the current panel.
</summary>
</member>
<member name="M:Elementor.Core.Settings.Base.Manager.__construct">
<summary>
Settings base manager constructor.
Initializing Elementor settings base manager.
</summary>
</member>
<member name="M:Elementor.Core.Settings.Base.Manager.register_ajax_actions(Pchp.Core.PhpValue)">
<summary>
Register ajax actions.
Add new actions to handle data after an ajax requests returned.

Fired by `elementor/ajax/register_actions` action.
</summary>
<param name="ajax_manager" type="Ajax"></param>
</member>
<member name="M:Elementor.Core.Settings.Base.Manager.get_model_for_config">
<summary>
Get model for config.
Retrieve the model for settings configuration.
</summary>
<returns>The model object.</returns>
</member>
<member name="M:Elementor.Core.Settings.Base.Manager.get_name">
<summary>
Get manager name.
Retrieve settings manager name.
</summary>
</member>
<member name="M:Elementor.Core.Settings.Base.Manager.get_model(Pchp.Core.PhpValue)">
<summary>
Get model.
Retrieve the model for any given model ID.
</summary>
<param name="id" type="int">Optional. Model ID. Default is `0`.</param>
<returns>The model.</returns>
</member>
<member name="M:Elementor.Core.Settings.Base.Manager.ajax_save_settings(Pchp.Core.PhpValue)">
<summary>
Ajax request to save settings.
Save settings using an ajax request.
</summary>
<param name="request" type="array">Ajax request.</param>
<returns>Ajax response data.</returns>
</member>
<member name="M:Elementor.Core.Settings.Base.Manager.save_settings(Pchp.Core.PhpArray,Pchp.Core.PhpValue)">
<summary>
Save settings.
Save settings to the database.
</summary>
<param name="settings" type="array">Settings.</param>
<param name="id" type="int">Optional. Post ID. Default is `0`.</param>
</member>
<member name="M:Elementor.Core.Settings.Base.Manager.on_elementor_editor_init">
<summary>
On Elementor init.
Add editor template for the settings

Fired by `elementor/init` action.
</summary>
</member>
<member name="M:Elementor.Core.Settings.Base.Manager.get_saved_settings(Pchp.Core.PhpValue)">
<summary>
Get saved settings.
Retrieve the saved settings from the database.
</summary>
<param name="id" type="int">Post ID.</param>
</member>
<member name="M:Elementor.Core.Settings.Base.Manager.save_settings_to_db(Pchp.Core.PhpArray,Pchp.Core.PhpValue)">
<summary>
Save settings to DB.
Save settings to the database.
</summary>
<param name="settings" type="array">Settings.</param>
<param name="id" type="int">Post ID.</param>
</member>
<member name="M:Elementor.Core.Settings.Base.Manager.get_special_settings_names">
<summary>
Get special settings names.
Retrieve the names of the special settings that are not saved as regular
settings. Those settings have a separate saving process.
</summary>
<returns>Special settings names.</returns>
</member>
<member name="M:Elementor.Core.Settings.Base.Manager.ajax_before_save_settings(Pchp.Core.PhpArray,Pchp.Core.PhpValue)">
<summary>
Ajax before saving settings.
Validate the data before saving it and updating the data in the database.
</summary>
<param name="data" type="array">Post data.</param>
<param name="id" type="int">Post ID.</param>
</member>
<member name="M:Elementor.Core.Settings.Base.Manager.print_editor_template_content(Pchp.Core.PhpValue)">
<summary>
Print the setting template content in the editor.
Used to generate the control HTML in the editor using Underscore JS
template. The variables for the class are available using `data` JS
object.
</summary>
<param name="name" type="string">Settings panel name.</param>
</member>
<member name="M:Elementor.Core.Settings.Base.Manager.create_model(Pchp.Core.PhpValue)">
<summary>
Create model.
Create a new model object for any given model ID and store the object in
models cache property for later use.
</summary>
<param name="id" type="int">Model ID.</param>
</member>
<member name="M:Elementor.Core.Settings.Base.Manager.get_editor_template">
<summary>
Get editor template.
Retrieve the final HTML for the editor.
</summary>
<returns>Settings editor template.</returns>
</member>
<member name="M:Elementor.Core.Settings.Base.Model.get_panel_page_settings">
<summary>
Get panel page settings.
Retrieve the page setting for the current panel.
</summary>
</member>
<member name="M:Elementor.Core.Settings.EditorPreferences.Manager.get_model_for_config">
<summary>
Get model for config.
Retrieve the model for settings configuration.
</summary>
<returns>The model object.</returns>
</member>
<member name="M:Elementor.Core.Settings.EditorPreferences.Manager.get_name">
<summary>
Get manager name.
Retrieve settings manager name.
</summary>
</member>
<member name="M:Elementor.Core.Settings.EditorPreferences.Manager.get_saved_settings(Pchp.Core.PhpValue)">
<summary>
Get saved settings.
Retrieve the saved settings from the database.
</summary>
<param name="id." type="int"></param>
</member>
<member name="M:Elementor.Core.Settings.EditorPreferences.Manager.save_settings_to_db(Pchp.Core.PhpArray,Pchp.Core.PhpValue)">
<summary>
Save settings to DB.
Save settings to the database.
</summary>
<param name="settings" type="array">Settings.</param>
<param name="id" type="int">Post ID.</param>
</member>
<member name="M:Elementor.Core.Settings.EditorPreferences.Model.get_name">
<summary>
Get element name.
Retrieve the element name.
</summary>
<returns>The name.</returns>
</member>
<member name="M:Elementor.Core.Settings.EditorPreferences.Model.get_panel_page_settings">
<summary>
Get panel page settings.
Retrieve the page setting for the current panel.
</summary>
</member>
<member name="M:Elementor.Core.Settings.EditorPreferences.Model.register_controls">
</member>
<member name="M:Elementor.Core.Settings.General.Manager.__construct">
<summary>
General settings manager constructor.
Initializing Elementor general settings manager.
</summary>
</member>
<member name="M:Elementor.Core.Settings.General.Manager.get_name">
<summary>
Get manager name.
Retrieve general settings manager name.
</summary>
<returns>Manager name.</returns>
</member>
<member name="M:Elementor.Core.Settings.General.Manager.get_model_for_config">
<summary>
Get model for config.
Retrieve the model for settings configuration.
</summary>
<returns>The model object.</returns>
</member>
<member name="M:Elementor.Core.Settings.General.Manager.get_saved_settings(Pchp.Core.PhpValue)">
</member>
<member name="M:Elementor.Core.Settings.General.Manager.get_css_file_name">
<summary>
Get CSS file name.
Retrieve CSS file name for the general settings manager.
</summary>
<returns>CSS file name.</returns>
</member>
<member name="M:Elementor.Core.Settings.General.Manager.save_settings_to_db(Pchp.Core.PhpArray,Pchp.Core.PhpValue)">
</member>
<member name="M:Elementor.Core.Settings.General.Manager.get_model_for_css_file(Elementor.Core.Files.CSS.Base)">
</member>
<member name="M:Elementor.Core.Settings.General.Manager.get_css_file_for_update(Pchp.Core.PhpValue)">
</member>
<member name="M:Elementor.Core.Settings.Manager.add_settings_manager(Pchp.Core.Context,Elementor.Core.Settings.Base.Manager)">
<summary>
Add settings manager.
Register a single settings manager to the registered settings managers.
</summary>
<param name="manager" type="Base\Manager">Settings manager.</param>
</member>
<member name="M:Elementor.Core.Settings.Manager.get_settings_managers(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Get settings managers.
Retrieve registered settings manager(s).

If no parameter passed, it will retrieve all the settings managers. For
any given parameter it will retrieve a single settings manager if one
exist, or `null` otherwise.
</summary>
<param name="manager_name" type="string">Optional. Settings manager name. Default is
null.</param>
<returns>Single settings manager, if it exists,
null if it doesn't exists, or the all
the settings managers if no parameter
defined.</returns>
</member>
<member name="M:Elementor.Core.Settings.Manager.register_default_settings_managers(Pchp.Core.Context)">
<summary>
Register default settings managers.
Register builtin Elementor settings managers.
</summary>
</member>
<member name="M:Elementor.Core.Settings.Manager.get_manager_class(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Get class path for default settings managers.
</summary>
</member>
<member name="M:Elementor.Core.Settings.Manager.get_settings_managers_config(Pchp.Core.Context)">
<summary>
Get settings managers config.
Retrieve the settings managers configuration.
</summary>
<returns>The settings managers configuration.</returns>
</member>
<member name="M:Elementor.Core.Settings.Manager.get_settings_frontend_config(Pchp.Core.Context)">
<summary>
Get settings frontend config.
Retrieve the settings managers frontend configuration.
</summary>
<returns>The settings managers frontend configuration.</returns>
</member>
<member name="M:Elementor.Core.Settings.Manager.run(Pchp.Core.Context)">
<summary>
Run settings managers.
Register builtin Elementor settings managers.
</summary>
</member>
<member name="M:Elementor.Core.Settings.Page.Manager.get_name">
<summary>
Get manager name.
Retrieve page settings manager name.
</summary>
<returns>Manager name.</returns>
</member>
<member name="M:Elementor.Core.Settings.Page.Manager.get_model_for_config">
<summary>
Get model for config.
Retrieve the model for settings configuration.
</summary>
<returns>The model object.</returns>
</member>
<member name="M:Elementor.Core.Settings.Page.Manager.ajax_before_save_settings(Pchp.Core.PhpArray,Pchp.Core.PhpValue)">
<summary>
Ajax before saving settings.
Validate the data before saving it and updating the data in the database.
</summary>
<param name="data" type="array">Post data.</param>
<param name="id" type="int">Post ID.</param>
<exception cref="Exception">If invalid post returned using the `$id`.</exception>
<exception cref="Exception">If current user don't have permissions to edit the post.</exception>
</member>
<member name="M:Elementor.Core.Settings.Page.Manager.print_editor_template_content(Pchp.Core.PhpValue)">
</member>
<member name="M:Elementor.Core.Settings.Page.Manager.save_settings_to_db(Pchp.Core.PhpArray,Pchp.Core.PhpValue)">
<summary>
Save settings to DB.
Save page settings to the database, as post meta data.
</summary>
<param name="settings" type="array">Settings.</param>
<param name="id" type="int">Post ID.</param>
</member>
<member name="M:Elementor.Core.Settings.Page.Manager.get_css_file_for_update(Pchp.Core.PhpValue)">
<summary>
Get CSS file for update.
Retrieve the CSS file before updating it.

This method overrides the parent method to disallow updating CSS files for pages.
</summary>
<param name="id" type="int">Post ID.</param>
<returns>Disallow The updating CSS files for pages.</returns>
</member>
<member name="M:Elementor.Core.Settings.Page.Manager.get_saved_settings(Pchp.Core.PhpValue)">
<summary>
Get saved settings.
Retrieve the saved settings from the post meta.
</summary>
<param name="id" type="int">Post ID.</param>
<returns>Saved settings.</returns>
</member>
<member name="M:Elementor.Core.Settings.Page.Manager.get_css_file_name">
<summary>
Get CSS file name.
Retrieve CSS file name for the page settings manager.
</summary>
<returns>CSS file name.</returns>
</member>
<member name="M:Elementor.Core.Settings.Page.Manager.get_model_for_css_file(Elementor.Core.Files.CSS.Base)">
<summary>
Get model for CSS file.
Retrieve the model for the CSS file.
</summary>
<param name="css_file" type="Base">The requested CSS file.</param>
<returns>The model object.</returns>
</member>
<member name="M:Elementor.Core.Settings.Page.Manager.get_special_settings_names">
<summary>
Get special settings names.
Retrieve the names of the special settings that are not saved as regular
settings. Those settings have a separate saving process.
</summary>
<returns>Special settings names.</returns>
</member>
<member name="M:Elementor.Core.Settings.Page.Manager.save_post_status(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:Elementor.Core.Settings.Page.Model.__construct(Pchp.Core.PhpArray)">
<summary>
Model constructor.
Initializing Elementor page settings model.
</summary>
<param name="data" type="array">Optional. Model data. Default is an empty array.</param>
</member>
<member name="M:Elementor.Core.Settings.Page.Model.get_name">
<summary>
Get model name.
Retrieve page settings model name.
</summary>
<returns>Model name.</returns>
</member>
<member name="M:Elementor.Core.Settings.Page.Model.get_unique_name">
<summary>
Get model unique name.
Retrieve page settings model unique name.
</summary>
<returns>Model unique name.</returns>
</member>
<member name="M:Elementor.Core.Settings.Page.Model.get_css_wrapper_selector">
<summary>
Get CSS wrapper selector.
Retrieve the wrapper selector for the page settings model.
</summary>
<returns>CSS wrapper selector.</returns>
</member>
<member name="M:Elementor.Core.Settings.Page.Model.get_panel_page_settings">
<summary>
Get panel page settings.
Retrieve the panel setting for the page settings model.
</summary>
<returns>{
Panel settings.

@type string $title The panel title.
}</returns>
</member>
<member name="M:Elementor.Core.Settings.Page.Model.on_export(Pchp.Core.PhpValue)">
<summary>
On export post meta.
When exporting data, check if the post is not using page template and
exclude it from the exported Elementor data.
</summary>
<param name="element_data" type="array">Element data.</param>
<returns>Element data to be exported.</returns>
</member>
<member name="M:Elementor.Core.Settings.Page.Model.register_controls">
<summary>
Register model controls.
Used to add new controls to the page settings model.
</summary>
</member>
<member name="M:Elementor.Core.Upgrade.Elementor_3_Re_Migrate_Globals.admin_localize_settings">
</member>
<member name="M:Elementor.Core.Upgrade.Elementor_3_Re_Migrate_Globals.create_updater">
</member>
<member name="M:Elementor.Core.Upgrade.Upgrade_Utils._update_widget_settings(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
_update_widget_settings
</summary>
<param name="widget_id" type="string">widget type id</param>
<param name="updater" type="Updater">updater instance</param>
<param name="changes" type="array">array containing updating control_ids, callback and other data needed by the callback</param>
</member>
<member name="M:Elementor.Core.Upgrade.Upgrades._v_0_3_2(Pchp.Core.Context)">
<summary>
Upgrade Elementor 0.3.2
Change the image widget link URL, setting is to `custom` link.
</summary>
</member>
<member name="M:Elementor.Core.Upgrade.Upgrades._v_0_9_2(Pchp.Core.Context)">
<summary>
Upgrade Elementor 0.9.2
Change the icon widget, icon-box widget and the social-icons widget,
setting their icon padding size to an empty string.

Change the image widget, setting the image size to full image size.
</summary>
</member>
<member name="M:Elementor.Core.Upgrade.Upgrades._v_0_11_0(Pchp.Core.Context)">
<summary>
Upgrade Elementor 0.11.0
Change the button widget sizes, setting up new button sizes.
</summary>
</member>
<member name="M:Elementor.Core.Upgrade.Upgrades._v_2_0_0(Pchp.Core.Context)">
<summary>
Upgrade Elementor 2.0.0
Fix post titles for old autosave drafts that saved with the format 'Auto Save 2018-03-18 17:24'.
</summary>
</member>
<member name="M:Elementor.Core.Upgrade.Upgrades._v_2_0_1(Pchp.Core.Context)">
<summary>
Upgrade Elementor 2.0.1
Fix post titles for old autosave drafts that saved with the format 'Auto Save...'.
</summary>
</member>
<member name="M:Elementor.Core.Upgrade.Upgrades._v_2_0_10(Pchp.Core.Context)">
<summary>
Upgrade Elementor 2.0.10
Fix post titles for old autosave drafts that saved with the format 'Auto Save...'.
Fix also Translated titles.
</summary>
</member>
<member name="M:Elementor.Core.Upgrade.Upgrades._v_2_3_0_widget_image(Pchp.Core.Context,Pchp.Core.PhpValue)">
<param name="updater" type="Updater"></param>
</member>
<member name="M:Elementor.Core.Upgrade.Upgrades._v_2_3_0_template_type(Pchp.Core.Context,Pchp.Core.PhpValue)">
<param name="updater" type="Updater"></param>
</member>
<member name="M:Elementor.Core.Upgrade.Upgrades._v_2_6_0_fa4_migration_flag(Pchp.Core.Context)">
<summary>
Set FontAwesome Migration needed flag
</summary>
</member>
<member name="M:Elementor.Core.Upgrade.Upgrades._migrate_icon_fa4_value(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
migrate Icon control string value to Icons control array value
</summary>
<param name="element" type="array"></param>
<param name="args" type="array"></param>
</member>
<member name="M:Elementor.Core.Upgrade.Upgrades._v_2_6_6_fa4_migration_button(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Set FontAwesome 5 value Migration on for button widget
</summary>
<param name="updater" type="Updater"></param>
</member>
<member name="M:Elementor.Core.Upgrade.Upgrades.rename_document_base_to_wp(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Update database to separate page from post.
</summary>
<param name="updater" type="Updater"></param>
<param name="type" type="string"></param>
</member>
<member name="M:Elementor.Core.Upgrade.Upgrades._v_2_7_1_remove_old_usage_data(Pchp.Core.Context)">
<summary>
Don't use the old data anymore.
Since 2.7.1 the key was changed from `elementor_elements_usage` to `elementor_controls_usage`.
</summary>
</member>
<member name="M:Elementor.Core.Upgrade.Upgrades.recalc_usage_data(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Recalc usage.
</summary>
<param name="updater" type="Updater"></param>
</member>
<member name="M:Elementor.Core.Upgrade.Upgrades._v_3_0_0_move_general_settings_to_kit(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Move general &amp; lightbox settings to active kit and all it's revisions.
</summary>
<param name="updater" type="Updater"></param>
</member>
<member name="M:Elementor.Core.Upgrade.Upgrades._v_3_0_0_move_default_colors_to_kit(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Move default colors settings to active kit and all it's revisions.
</summary>
<param name="updater" type="Updater"></param>
</member>
<member name="M:Elementor.Core.Upgrade.Upgrades._v_3_0_0_move_saved_colors_to_kit(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Move saved colors settings to active kit and all it's revisions.
</summary>
<param name="updater" type="Updater"></param>
</member>
<member name="M:Elementor.Core.Upgrade.Upgrades._v_3_0_0_move_default_typography_to_kit(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Move default typography settings to active kit and all it's revisions.
</summary>
<param name="updater" type="Updater"></param>
</member>
<member name="M:Elementor.Core.Upgrade.Upgrades.move_settings_to_kit(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<param name="callback" type="callback"></param>
<param name="updater" type="Updater"></param>
<param name="include_revisions" type="bool"></param>
</member>
<member name="M:Elementor.Core.Utils.Collection.__construct(Pchp.Core.PhpArray)">
<summary>
Collection constructor.
</summary>
<param name="items" type="array"></param>
</member>
<member name="M:Elementor.Core.Utils.Collection.filter(Pchp.Core.PhpValue)">
<param name="callback" type="callable|null"></param>
<returns>$this</returns>
</member>
<member name="M:Elementor.Core.Utils.Collection.merge(Pchp.Core.PhpValue)">
<returns>$this</returns>
</member>
<member name="M:Elementor.Core.Utils.Collection.union(Pchp.Core.PhpArray)">
<summary>
Union the collection with the given items.
</summary>
<param name="items" type="array"></param>
<returns>$this</returns>
</member>
<member name="M:Elementor.Core.Utils.Collection.merge_recursive(Pchp.Core.PhpValue)">
<summary>
Merge array recursively
</summary>
<returns>$this</returns>
</member>
<member name="M:Elementor.Core.Utils.Collection.replace_recursive(Pchp.Core.PhpValue)">
<summary>
Replace array recursively
</summary>
<returns>$this</returns>
</member>
<member name="M:Elementor.Core.Utils.Collection.implode(Pchp.Core.PhpValue)">
<summary>
Implode the items
</summary>
</member>
<member name="M:Elementor.Core.Utils.Collection.map(Pchp.Core.PhpValue)">
<summary>
Run a map over each of the items.
</summary>
<param name="callback" type="callable"></param>
<returns>$this</returns>
</member>
<member name="M:Elementor.Core.Utils.Collection.reduce(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<param name="callback" type="callable"></param>
<param name="initial" type="null"></param>
</member>
<member name="M:Elementor.Core.Utils.Collection.map_with_keys(Pchp.Core.PhpValue)">
<param name="callback" type="callable"></param>
<returns>$this</returns>
</member>
<member name="M:Elementor.Core.Utils.Collection.except(Pchp.Core.PhpArray)">
<summary>
Get all items except for those with the specified keys.
</summary>
<param name="keys" type="array"></param>
<returns>$this</returns>
</member>
<member name="M:Elementor.Core.Utils.Collection.only(Pchp.Core.PhpArray)">
<summary>
Get the items with the specified keys.
</summary>
<param name="keys" type="array"></param>
<returns>$this</returns>
</member>
<member name="M:Elementor.Core.Utils.Collection.pluck(Pchp.Core.PhpValue)">
<summary>
Run over the collection to get specific prop from the collection item.
</summary>
<returns>$this</returns>
</member>
<member name="M:Elementor.Core.Utils.Collection.group_by(Pchp.Core.PhpValue)">
<summary>
Group the collection items by specific key in each collection item.
</summary>
<returns>$this</returns>
</member>
<member name="M:Elementor.Core.Utils.Collection.sort_keys(Pchp.Core.PhpValue)">
<summary>
Sort keys
</summary>
<param name="descending" type="false"></param>
<returns>$this</returns>
</member>
<member name="M:Elementor.Core.Utils.Collection.get(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Get specific item from the collection.
</summary>
<param name="default" type="null"></param>
</member>
<member name="M:Elementor.Core.Utils.Collection.first(Pchp.Core.PhpValue)">
<summary>
Get the first item.
</summary>
<param name="default" type="null"></param>
</member>
<member name="M:Elementor.Core.Utils.Collection.find(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Find an element from the items.
</summary>
<param name="callback" type="callable"></param>
<param name="default" type="null"></param>
</member>
<member name="M:Elementor.Core.Utils.Collection.unique(Pchp.Core.PhpValue)">
<summary>
Make sure all the values inside the array are uniques.
</summary>
<param name="keys" type="null|string|string[]"></param>
<returns>$this</returns>
</member>
<member name="M:Elementor.Core.Utils.Collection.keys">
</member>
<member name="M:Elementor.Core.Utils.Collection.is_empty">
</member>
<member name="M:Elementor.Core.Utils.Collection.all">
</member>
<member name="M:Elementor.Core.Utils.Collection.values">
</member>
<member name="M:Elementor.Core.Utils.Collection.offsetExists(Pchp.Core.PhpValue)">
<param name="key" type="mixed"></param>
</member>
<member name="M:Elementor.Core.Utils.Collection.offsetGet(Pchp.Core.PhpValue)">
<param name="key" type="mixed"></param>
</member>
<member name="M:Elementor.Core.Utils.Collection.offsetSet(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<param name="key" type="mixed"></param>
<param name="value" type="mixed"></param>
</member>
<member name="M:Elementor.Core.Utils.Collection.offsetUnset(Pchp.Core.PhpValue)">
<param name="key" type="mixed"></param>
</member>
<member name="M:Elementor.Core.Utils.Collection.getIterator">
</member>
<member name="M:Elementor.Core.Utils.Collection.count">
</member>
<member name="M:Elementor.Core.Utils.Collection.get_item_value(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<param name="default" type="null"></param>
</member>
<member name="M:Elementor.Core.Utils.Http.request_with_fallback(Pchp.Core.PhpArray,Pchp.Core.PhpValue)">
<summary>
Pass multiple urls to implements a fallback machine when one of the urls
is sending an error or not exists anymore.
</summary>
<param name="urls" type="array"></param>
<param name="args" type="array"></param>
</member>
<member name="M:Elementor.Core.Utils.Http.is_successful_response(Pchp.Core.PhpValue)">
</member>
<member name="M:Elementor.Core.Utils.ImportExport.Parsers.WXR_Parser_Regex.parse(Pchp.Core.PhpValue)">
<param name="file" type="string"></param>
</member>
<member name="M:Elementor.Core.Utils.ImportExport.Parsers.WXR_Parser_SimpleXML.parse(Pchp.Core.PhpValue)">
<param name="file" type="string"></param>
</member>
<member name="M:Elementor.Core.Utils.ImportExport.Parsers.WXR_Parser_XML.parse(Pchp.Core.PhpValue)">
<param name="file" type="string"></param>
</member>
<member name="M:Elementor.Core.Utils.ImportExport.WP_Exporter.run">
<summary>
Run export, by requested args.
Returns XML with exported data.
</summary>
</member>
<member name="M:Elementor.Core.Utils.ImportExport.WP_Exporter.indent(Pchp.Core.PhpValue)">
<summary>
Return tabulation characters, by `$columns`.
</summary>
<param name="columns" type="int"></param>
</member>
<member name="M:Elementor.Core.Utils.ImportExport.WP_Exporter.wxr_cdata(Pchp.Core.PhpValue)">
<summary>
Return wrapped given string in XML CDATA tag.
</summary>
<param name="str" type="string">String to wrap in XML CDATA tag.</param>
</member>
<member name="M:Elementor.Core.Utils.ImportExport.WP_Exporter.wxr_site_url">
<summary>
Return the URL of the site.
</summary>
<returns>Site URL.</returns>
</member>
<member name="M:Elementor.Core.Utils.ImportExport.WP_Exporter.wxr_cat_name(Pchp.Core.PhpValue)">
<summary>
Return a cat_name XML tag from a given category object.
</summary>
<param name="category" type="\WP_Term">Category Object</param>
</member>
<member name="M:Elementor.Core.Utils.ImportExport.WP_Exporter.wxr_category_description(Pchp.Core.PhpValue)">
<summary>
Return a category_description XML tag from a given category object.
</summary>
<param name="category" type="\WP_Term">Category Object</param>
</member>
<member name="M:Elementor.Core.Utils.ImportExport.WP_Exporter.wxr_tag_name(Pchp.Core.PhpValue)">
<summary>
Return a tag_name XML tag from a given tag object.
</summary>
<param name="tag" type="\WP_Term">Tag Object</param>
</member>
<member name="M:Elementor.Core.Utils.ImportExport.WP_Exporter.wxr_tag_description(Pchp.Core.PhpValue)">
<summary>
Return a tag_description XML tag from a given tag object.
</summary>
<param name="tag" type="\WP_Term">Tag Object</param>
</member>
<member name="M:Elementor.Core.Utils.ImportExport.WP_Exporter.wxr_term_name(Pchp.Core.PhpValue)">
<summary>
Return a term_name XML tag from a given term object.
</summary>
<param name="term" type="\WP_Term">Term Object</param>
</member>
<member name="M:Elementor.Core.Utils.ImportExport.WP_Exporter.wxr_term_description(Pchp.Core.PhpValue)">
<summary>
Return a term_description XML tag from a given term object.
</summary>
<param name="term" type="\WP_Term">Term Object</param>
</member>
<member name="M:Elementor.Core.Utils.ImportExport.WP_Exporter.wxr_term_meta(Pchp.Core.PhpValue)">
<summary>
Return term meta XML tags for a given term object.
</summary>
<param name="term" type="\WP_Term">Term object.</param>
</member>
<member name="M:Elementor.Core.Utils.ImportExport.WP_Exporter.wxr_authors_list(Pchp.Core.PhpValue)">
<summary>
Return list of authors with posts.
</summary>
<param name="post_ids" type="int[]">Optional. Array of post IDs to filter the query by.</param>
</member>
<member name="M:Elementor.Core.Utils.ImportExport.WP_Exporter.wxr_categories_list(Pchp.Core.PhpArray)">
<summary>
Return list of categories.
</summary>
<param name="cats" type="array"></param>
</member>
<member name="M:Elementor.Core.Utils.ImportExport.WP_Exporter.wxr_tags_list(Pchp.Core.PhpArray)">
<summary>
Return list of tags.
</summary>
<param name="tags" type="array"></param>
</member>
<member name="M:Elementor.Core.Utils.ImportExport.WP_Exporter.wxr_terms_list(Pchp.Core.PhpArray)">
<summary>
Return list of terms.
</summary>
<param name="terms" type="array"></param>
</member>
<member name="M:Elementor.Core.Utils.ImportExport.WP_Exporter.wxr_posts_list(Pchp.Core.PhpArray)">
<summary>
Return list of posts, by requested `$post_ids`.
</summary>
<param name="post_ids" type="array"></param>
</member>
<member name="M:Elementor.Core.Utils.ImportExport.WP_Exporter.wxr_nav_menu_terms">
<summary>
Return all navigation menu terms
</summary>
</member>
<member name="M:Elementor.Core.Utils.ImportExport.WP_Exporter.wxr_post_taxonomy(Pchp.Core.PhpValue)">
<summary>
Return list of taxonomy terms, in XML tag format, associated with a post
</summary>
<param name="post" type="\WP_Post"></param>
</member>
<member name="M:Elementor.Core.Utils.ImportExport.WP_Exporter.get_xml_export(Pchp.Core.PhpArray,Pchp.Core.PhpArray,Pchp.Core.PhpArray,Pchp.Core.PhpArray)">
<summary>
Get's the XML export.
</summary>
</member>
<member name="M:Elementor.Core.Utils.ImportExport.WP_Import.get_filename_from_disposition(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Parses filename from a Content-Disposition header value.
As per RFC6266:

content-disposition = "Content-Disposition" ":"
disposition-type *( ";" disposition-parm )

disposition-type    = "inline" | "attachment" | disp-ext-type
; case-insensitive
disp-ext-type       = token

disposition-parm    = filename-parm | disp-ext-parm

filename-parm       = "filename" "=" value
| "filename*" "=" ext-value

disp-ext-parm       = token "=" value
| ext-token "=" ext-value
ext-token           = &lt;the characters in token, followed by "*"&gt;
</summary>
<param name="disposition_header" type="string[]">List of Content-Disposition header values.</param>
<returns>Filename if available, or null if not found.</returns>
</member>
<member name="M:Elementor.Core.Utils.ImportExport.WP_Import.get_file_extension_by_mime_type(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Retrieves file extension by mime type.
</summary>
<param name="mime_type" type="string">Mime type to search extension for.</param>
<returns>File extension if available, or null if not found.</returns>
</member>
<member name="M:Elementor.Core.Utils.ImportExport.WP_Import.import(Pchp.Core.PhpValue)">
<summary>
The main controller for the actual import stage.
</summary>
<param name="file" type="string">Path to the WXR file for importing</param>
</member>
<member name="M:Elementor.Core.Utils.ImportExport.WP_Import.import_start(Pchp.Core.PhpValue)">
<summary>
Parses the WXR file and prepares us for the task of processing parsed data.
</summary>
<param name="file" type="string">Path to the WXR file for importing</param>
</member>
<member name="M:Elementor.Core.Utils.ImportExport.WP_Import.import_end">
<summary>
Performs post-import cleanup of files and the cache
</summary>
</member>
<member name="M:Elementor.Core.Utils.ImportExport.WP_Import.set_authors_from_import(Pchp.Core.PhpValue)">
<summary>
Retrieve authors from parsed WXR data and set it to `$this-&gt;&gt;authors`.
Uses the provided author information from WXR 1.1 files
or extracts info from each post for WXR 1.0 files
</summary>
<param name="import_data" type="array">Data returned by a WXR parser</param>
</member>
<member name="M:Elementor.Core.Utils.ImportExport.WP_Import.set_author_mapping">
<summary>
Map old author logins to local user IDs based on decisions made
in import options form. Can map to an existing user, create a new user
or falls back to the current user in case of error with either of the previous
</summary>
</member>
<member name="M:Elementor.Core.Utils.ImportExport.WP_Import.process_categories">
<summary>
Create new categories based on import information
Doesn't create a new category if its slug already exists
</summary>
<returns>number of imported categories.</returns>
</member>
<member name="M:Elementor.Core.Utils.ImportExport.WP_Import.process_tags">
<summary>
Create new post tags based on import information
Doesn't create a tag if its slug already exists
</summary>
<returns>number of imported tags.</returns>
</member>
<member name="M:Elementor.Core.Utils.ImportExport.WP_Import.process_terms">
<summary>
Create new terms based on import information
Doesn't create a term its slug already exists
</summary>
<returns>number of imported terms.</returns>
</member>
<member name="M:Elementor.Core.Utils.ImportExport.WP_Import.process_termmeta(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Add metadata to imported term.
</summary>
<param name="term" type="array">Term data from WXR import.</param>
<param name="term_id" type="int">ID of the newly created term.</param>
</member>
<member name="M:Elementor.Core.Utils.ImportExport.WP_Import.process_posts">
<summary>
Create new posts based on import information
Posts marked as having a parent which doesn't exist will become top level items.
Doesn't create a new post if: the post type doesn't exist, the given post ID
is already noted as imported or a post with the same title and date already exists.
Note that new/updated terms, comments and meta are imported for the last of the above.
</summary>
<returns>the ids of succeed/failed imported posts.</returns>
</member>
<member name="M:Elementor.Core.Utils.ImportExport.WP_Import.process_menu_item(Pchp.Core.PhpValue)">
<summary>
Attempt to create a new menu item from import data
Fails for draft, orphaned menu items and those without an associated nav_menu
or an invalid nav_menu term. If the post type or term object which the menu item
represents doesn't exist then the menu item will not be imported (waits until the
end of the import to retry again before discarding).
</summary>
<param name="item" type="array">Menu item details from WXR file</param>
</member>
<member name="M:Elementor.Core.Utils.ImportExport.WP_Import.process_attachment(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
If fetching attachments is enabled then attempt to create a new attachment
</summary>
<param name="post" type="array">Attachment post details from WXR</param>
<param name="url" type="string">URL to fetch attachment from</param>
<returns>Post ID on success, WP_Error otherwise</returns>
</member>
<member name="M:Elementor.Core.Utils.ImportExport.WP_Import.fetch_remote_file(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Attempt to download a remote file attachment
</summary>
<param name="url" type="string">URL of item to fetch</param>
<param name="post" type="array">Attachment details</param>
<returns>Local file location details on success, WP_Error otherwise</returns>
</member>
<member name="M:Elementor.Core.Utils.ImportExport.WP_Import.backfill_parents">
<summary>
Attempt to associate posts and menu items with previously missing parents
An imported post's parent may not have been imported when it was first created
so try again. Similarly for child menu items and menu items which were missing
the object (e.g. post) they represent in the menu
</summary>
</member>
<member name="M:Elementor.Core.Utils.ImportExport.WP_Import.backfill_attachment_urls">
<summary>
Use stored mapping information to update old attachment URLs
</summary>
</member>
<member name="M:Elementor.Core.Utils.ImportExport.WP_Import.remap_featured_images">
<summary>
Update _thumbnail_id meta to new, imported attachment IDs
</summary>
</member>
<member name="M:Elementor.Core.Utils.ImportExport.WP_Import.parse(Pchp.Core.PhpValue)">
<summary>
Parse a WXR file
</summary>
<param name="file" type="string">Path to WXR file for parsing</param>
<returns>Information gathered from the WXR file</returns>
</member>
<member name="M:Elementor.Core.Utils.ImportExport.WP_Import.is_valid_meta_key(Pchp.Core.PhpValue)">
<summary>
Decide if the given meta key maps to information we will want to import
</summary>
<param name="key" type="string">The meta key to check</param>
<returns>The key if we do want to import, false if not</returns>
</member>
<member name="M:Elementor.Core.Utils.Str.encode_idn_url(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Convert a non-latin URL to an IDN one.
Note: Max length is 64 chars.
</summary>
<param name="url" type="string">- A URL to encode.</param>
<returns>- IDN encoded URL ( e.g. `http://é.com` will be encoded to `http://xn--9ca.com` ).</returns>
</member>
<member name="M:Elementor.Core.Utils.Version.__construct(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Version constructor.
</summary>
</member>
<member name="M:Elementor.Core.Utils.Version.create(Pchp.Core.Context,Pchp.Core.Reflection.PhpTypeInfo,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Create Version instance.
</summary>
<param name="major1" type="string"></param>
<param name="major2" type="string"></param>
<param name="patch" type="string"></param>
<param name="stage" type="null"></param>
</member>
<member name="M:Elementor.Core.Utils.Version.is_valid_version(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Checks if the current version string is valid.
</summary>
</member>
<member name="M:Elementor.Core.Utils.Version.create_from_string(Pchp.Core.Context,Pchp.Core.Reflection.PhpTypeInfo,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Creates a Version instance from a string.
</summary>
<param name="should_validate" type="bool"></param>
</member>
<member name="M:Elementor.Core.Utils.Version.compare(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Compare the current version instance with another version.
</summary>
<param name="part" type="string"></param>
</member>
<member name="M:Elementor.Core.Utils.Version.__toString">
<summary>
Implode the version and return it as string.
</summary>
</member>
<member name="M:Elementor.Core.Wp_Api.get_plugins">
</member>
<member name="M:Elementor.Core.Wp_Api.get_active_plugins">
</member>
<member name="M:Elementor.Data.Base.Controller.__construct">
<summary>
Controller constructor.
Register endpoints on 'rest_api_init'.
</summary>
</member>
<member name="M:Elementor.Data.Base.Controller.get_name">
<summary>
Get controller name.
</summary>
</member>
<member name="M:Elementor.Data.Base.Controller.get_namespace">
<summary>
Get controller namespace.
</summary>
</member>
<member name="M:Elementor.Data.Base.Controller.get_rest_base">
<summary>
Get controller reset base.
</summary>
</member>
<member name="M:Elementor.Data.Base.Controller.get_controller_route">
<summary>
Get controller route.
</summary>
</member>
<member name="M:Elementor.Data.Base.Controller.get_controller_index">
<summary>
Retrieves the index for a controller.
</summary>
</member>
<member name="M:Elementor.Data.Base.Controller.get_processors(Pchp.Core.PhpValue)">
<summary>
Get processors.
</summary>
<param name="command" type="string"></param>
</member>
<member name="M:Elementor.Data.Base.Controller.create_items(Pchp.Core.PhpValue)">
<summary>
Creates multiple items.
</summary>
<param name="request" type="\WP_REST_Request">Full data about the request.</param>
<returns>Response object on success, or WP_Error object on failure.</returns>
</member>
<member name="M:Elementor.Data.Base.Controller.update_items(Pchp.Core.PhpValue)">
<summary>
Updates multiple items.
</summary>
<param name="request" type="\WP_REST_Request">Full data about the request.</param>
<returns>Response object on success, or WP_Error object on failure.</returns>
</member>
<member name="M:Elementor.Data.Base.Controller.delete_items(Pchp.Core.PhpValue)">
<summary>
Delete multiple items.
</summary>
<param name="request" type="\WP_REST_Request">Full data about the request.</param>
<returns>Response object on success, or WP_Error object on failure.</returns>
</member>
<member name="M:Elementor.Data.Base.Controller.register_endpoints">
<summary>
Register endpoints.
</summary>
</member>
<member name="M:Elementor.Data.Base.Controller.register_processors">
<summary>
Register processors.
</summary>
</member>
<member name="M:Elementor.Data.Base.Controller.register_internal_endpoints">
<summary>
Register internal endpoints.
</summary>
</member>
<member name="M:Elementor.Data.Base.Controller.register_endpoint(Pchp.Core.PhpValue)">
<summary>
Register endpoint.
</summary>
<param name="endpoint_class" type="string"></param>
</member>
<member name="M:Elementor.Data.Base.Controller.register_processor(Pchp.Core.PhpValue)">
<summary>
Register a processor.
That will be later attached to the endpoint class.
</summary>
<param name="processor_class" type="string"></param>
<returns>$processor_instance</returns>
</member>
<member name="M:Elementor.Data.Base.Controller.register">
<summary>
Register.
Endpoints &amp; processors.
</summary>
</member>
<member name="M:Elementor.Data.Base.Controller.get_items_recursive(Pchp.Core.PhpValue)">
<summary>
Retrieves a recursive collection of all endpoint(s), items.
Get items recursive, will run overall endpoints of the current controller.
For each endpoint it will run `$endpoint-&gt;getItems( $request ) // the $request passed in get_items_recursive`.
Will skip $skip_endpoints endpoint(s).

Example, scenario:
Controller 'test-controller'.
Controller endpoints: 'endpoint1', 'endpoint2'.
Endpoint2 get_items method: `get_items() { return 'test' }`.
Call `Controller.get_items_recursive( ['endpoint1'] )`, result: [ 'endpoint2' =&gt; 'test' ];
</summary>
<param name="skip_endpoints" type="array"></param>
</member>
<member name="M:Elementor.Data.Base.Controller.get_permission_callback(Pchp.Core.PhpValue)">
<summary>
Get permission callback.
Default controller permission callback.
By default endpoint will inherit the permission callback from the controller.
By default permission is `current_user_can( 'administrator' );`.
</summary>
<param name="request" type="\WP_REST_Request"></param>
</member>
<member name="M:Elementor.Data.Base.Endpoint.get_format(Pchp.Core.Context)">
<summary>
Get format suffix.
Examples:
'{one_parameter_name}'.
'{one_parameter_name}/{two_parameter_name}/'.
'{one_parameter_name}/whatever/anything/{two_parameter_name}/' and so on for each endpoint or sub-endpoint.
</summary>
<returns>current location will later be added automatically.</returns>
</member>
<member name="M:Elementor.Data.Base.Endpoint.__construct(Pchp.Core.PhpValue)">
<summary>
Endpoint constructor.
run `$this-&gt;&gt;register()`.
</summary>
<param name="controller" type="\Elementor\Data\Base\Controller"></param>
</member>
<member name="M:Elementor.Data.Base.Endpoint.get_name">
<summary>
Get endpoint name.
</summary>
</member>
<member name="M:Elementor.Data.Base.Endpoint.get_base_route">
<summary>
Get base route.
Removing 'index' from endpoint.
</summary>
</member>
<member name="M:Elementor.Data.Base.Endpoint.register">
<summary>
Register the endpoint.
By default: register get items route.
</summary>
</member>
<member name="M:Elementor.Data.Base.Endpoint.register_sub_endpoint(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Register sub endpoint.
</summary>
<param name="route" type="string"></param>
<param name="endpoint_class" type="string"></param>
</member>
<member name="M:Elementor.Data.Base.Endpoint.base_callback(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Base callback.
All reset requests from the client should pass this function.
</summary>
<param name="methods" type="string"></param>
<param name="request" type="\WP_REST_Request"></param>
<param name="is_multi" type="bool"></param>
</member>
<member name="M:Elementor.Data.Base.Endpoint.get_items(Pchp.Core.PhpValue)">
<summary>
Retrieves a collection of items.
</summary>
<param name="request" type="\WP_REST_Request">Full data about the request.</param>
<returns>Response object on success, or WP_Error object on failure.</returns>
</member>
<member name="M:Elementor.Data.Base.Endpoint.get_item(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Retrieves one item from the collection.
</summary>
<param name="id" type="string"></param>
<param name="request" type="\WP_REST_Request">Full data about the request.</param>
<returns>Response object on success, or WP_Error object on failure.</returns>
</member>
<member name="M:Elementor.Data.Base.Endpoint.get_permission_callback(Pchp.Core.PhpValue)">
<summary>
Get permission callback.
By default get permission callback from the controller.
</summary>
<param name="request" type="\WP_REST_Request">Full data about the request.</param>
</member>
<member name="M:Elementor.Data.Base.Endpoint.create_item(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Creates one item.
</summary>
<param name="id" type="string">id of request item.</param>
<param name="request" type="\WP_REST_Request">Full data about the request.</param>
<returns>Response object on success, or WP_Error object on failure.</returns>
</member>
<member name="M:Elementor.Data.Base.Endpoint.create_items(Pchp.Core.PhpValue)">
<summary>
Creates multiple items.
</summary>
<param name="request" type="\WP_REST_Request">Full data about the request.</param>
<returns>Response object on success, or WP_Error object on failure.</returns>
</member>
<member name="M:Elementor.Data.Base.Endpoint.update_item(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Updates one item.
</summary>
<param name="id" type="string">id of request item.</param>
<param name="request" type="\WP_REST_Request">Full data about the request.</param>
<returns>Response object on success, or WP_Error object on failure.</returns>
</member>
<member name="M:Elementor.Data.Base.Endpoint.update_items(Pchp.Core.PhpValue)">
<summary>
Updates multiple items.
</summary>
<param name="request" type="\WP_REST_Request">Full data about the request.</param>
<returns>Response object on success, or WP_Error object on failure.</returns>
</member>
<member name="M:Elementor.Data.Base.Endpoint.delete_item(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Delete one item.
</summary>
<param name="id" type="string">id of request item.</param>
<param name="request" type="\WP_REST_Request">Full data about the request.</param>
<returns>Response object on success, or WP_Error object on failure.</returns>
</member>
<member name="M:Elementor.Data.Base.Endpoint.delete_items(Pchp.Core.PhpValue)">
<summary>
Delete multiple items.
</summary>
<param name="request" type="\WP_REST_Request">Full data about the request.</param>
<returns>Response object on success, or WP_Error object on failure.</returns>
</member>
<member name="M:Elementor.Data.Base.Endpoint.register_item_route(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Register item route.
</summary>
<param name="args" type="array"></param>
<param name="route" type="string"></param>
<param name="methods" type="string"></param>
</member>
<member name="M:Elementor.Data.Base.Endpoint.register_items_route(Pchp.Core.PhpValue)">
<summary>
Register items route.
</summary>
<param name="methods" type="string"></param>
</member>
<member name="M:Elementor.Data.Base.Endpoint.register_route(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Register route.
</summary>
<param name="route" type="string"></param>
<param name="methods" type="string"></param>
<param name="callback" type="null"></param>
<param name="args" type="array"></param>
</member>
<member name="M:Elementor.Data.Base.Processor.__construct(Pchp.Core.PhpValue)">
<summary>
Processor constructor.
</summary>
<param name="controller" type="\Elementor\Data\Base\Controller"></param>
</member>
<member name="M:Elementor.Data.Base.Processor.get_command">
<summary>
Get processor command.
</summary>
</member>
<member name="M:Elementor.Data.Base.Processor.After.get_conditions(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Get conditions for running processor.
</summary>
<param name="args" type="array"></param>
<param name="result" type="mixed"></param>
</member>
<member name="M:Elementor.Data.Base.Processor.After.apply(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Apply processor.
</summary>
</member>
<member name="M:Elementor.Data.Base.Processor.Before.get_conditions(Pchp.Core.PhpValue)">
<summary>
Get conditions for running processor.
</summary>
<param name="args" type="array"></param>
</member>
<member name="M:Elementor.Data.Base.Processor.Before.apply(Pchp.Core.PhpValue)">
<summary>
Apply processor.
</summary>
<param name="args" type="array"></param>
</member>
<member name="M:Elementor.Data.Base.SubEndpoint.get_parent">
<summary>
Get parent route.
</summary>
</member>
<member name="M:Elementor.Data.Manager.instance(Pchp.Core.Context,Pchp.Core.Reflection.PhpTypeInfo)">
<summary>
Fix issue with 'Potentially polymorphic call. The code may be inoperable depending on the actual class instance passed as the argument.'.
</summary>
</member>
<member name="M:Elementor.Data.Manager.get_controllers">
</member>
<member name="M:Elementor.Data.Manager.register_controller(Pchp.Core.PhpValue)">
<summary>
Register controller.
</summary>
<param name="controller_class_name" type="string"></param>
</member>
<member name="M:Elementor.Data.Manager.register_controller_instance(Pchp.Core.PhpValue)">
<summary>
Register controller instance.
</summary>
<param name="controller_instance" type="\Elementor\Data\Base\Controller"></param>
</member>
<member name="M:Elementor.Data.Manager.register_endpoint_format(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Register endpoint format.
</summary>
<param name="command" type="string"></param>
<param name="format" type="string"></param>
</member>
<member name="M:Elementor.Data.Manager.find_controller_instance(Pchp.Core.PhpValue)">
<summary>
Find controller instance.
By given command name.
</summary>
<param name="command" type="string"></param>
</member>
<member name="M:Elementor.Data.Manager.command_extract_args(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Command extract args.
</summary>
<param name="command" type="string"></param>
<param name="args" type="array"></param>
</member>
<member name="M:Elementor.Data.Manager.command_to_endpoint(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Command to endpoint.
Format is required otherwise $command will returned.
</summary>
<param name="command" type="string"></param>
<param name="format" type="string"></param>
<param name="args" type="array"></param>
<returns>endpoint</returns>
</member>
<member name="M:Elementor.Data.Manager.run_server">
<summary>
Run server.
Init WordPress reset api.
</summary>
</member>
<member name="M:Elementor.Data.Manager.kill_server">
<summary>
Kill server.
Free server and controllers.
</summary>
</member>
<member name="M:Elementor.Data.Manager.run_processor(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Run processor.
</summary>
<param name="processor" type="\Elementor\Data\Base\Processor"></param>
<param name="data" type="array"></param>
</member>
<member name="M:Elementor.Data.Manager.run_processors(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Run processors.
Filter them by class.
</summary>
<param name="processors" type="\Elementor\Data\Base\Processor[]"></param>
<param name="filter_by_class" type="string"></param>
<param name="data" type="array"></param>
</member>
<member name="M:Elementor.Data.Manager.run_request(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Run request.
Simulate rest API from within the backend.
Use args as query.
</summary>
<param name="endpoint" type="string"></param>
<param name="args" type="array"></param>
<param name="method" type="string"></param>
</member>
<member name="M:Elementor.Data.Manager.run_endpoint(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Run endpoint.
Wrapper for `$this-&gt;run_request` return `$response-&gt;getData()` instead of `$response`.
</summary>
<param name="endpoint" type="string"></param>
<param name="args" type="array"></param>
<param name="method" type="string"></param>
</member>
<member name="M:Elementor.Data.Manager.run(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Run ( simulated reset api ).
Do:
Init reset server.
Run before processors.
Run command as reset api endpoint from internal.
Run after processors.
</summary>
<param name="command" type="string"></param>
<param name="args" type="array"></param>
<param name="method" type="string"></param>
<returns>processed result</returns>
</member>
<member name="M:Elementor.Api.get_info_data(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Get info data.
This function notifies the user of upgrade notices, new templates and contributors.
</summary>
<param name="force_update" type="bool">Optional. Whether to force the data retrieval or
not. Default is false.</param>
<returns>Info data, or false.</returns>
</member>
<member name="M:Elementor.Api.get_upgrade_notice(Pchp.Core.Context)">
<summary>
Get upgrade notice.
Retrieve the upgrade notice if one exists, or false otherwise.
</summary>
<returns>Upgrade notice, or false none exist.</returns>
</member>
<member name="M:Elementor.Api.get_library_data(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Get templates data.
Retrieve the templates data from a remote server.
</summary>
<param name="force_update" type="bool">Optional. Whether to force the data update or
not. Default is false.</param>
<returns>The templates data.</returns>
</member>
<member name="M:Elementor.Api.get_feed_data(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Get feed data.
Retrieve the feed info data from remote elementor server.
</summary>
<param name="force_update" type="bool">Optional. Whether to force the data update or
not. Default is false.</param>
<returns>Feed data.</returns>
</member>
<member name="M:Elementor.Api.get_template_content(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Get template content.
Retrieve the templates content received from a remote server.
</summary>
<param name="template_id" type="int">The template ID.</param>
<returns>The template content.</returns>
</member>
<member name="M:Elementor.Api.send_feedback(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Send Feedback.
Fires a request to Elementor server with the feedback data.
</summary>
<param name="feedback_key" type="string">Feedback key.</param>
<param name="feedback_text" type="string">Feedback text.</param>
<returns>The response of the request.</returns>
</member>
<member name="M:Elementor.Api.ajax_reset_api_data(Pchp.Core.Context)">
<summary>
Ajax reset API data.
Reset Elementor library API data using an ajax call.
</summary>
</member>
<member name="M:Elementor.Api.init(Pchp.Core.Context)">
<summary>
Init.
Initialize Elementor API.
</summary>
</member>
<member name="M:Elementor.Autoloader.run(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Run autoloader.
Register a function as `__autoload()` implementation.
</summary>
<param name="default_path" type="string"></param>
<param name="default_namespace" type="string"></param>
</member>
<member name="M:Elementor.Autoloader.get_classes_aliases(Pchp.Core.Context)">
<summary>
Get classes aliases.
Retrieve the classes aliases names.
</summary>
<returns>Classes aliases.</returns>
</member>
<member name="M:Elementor.Autoloader.normalize_class_name(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Normalize Class Name
Used to convert control names to class names.
</summary>
<param name="delimiter" type="string"></param>
</member>
<member name="M:Elementor.Autoloader.load_class(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Load class.
For a given class name, require the class file.
</summary>
<param name="relative_class_name" type="string">Class name.</param>
</member>
<member name="M:Elementor.Autoloader.autoload(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Autoload.
For a given class, check if it exist and load it.
</summary>
<param name="class" type="string">Class name.</param>
</member>
<member name="M:Elementor.Controls_Stack.get_name">
<summary>
Get element name.
Retrieve the element name.
</summary>
<returns>The name.</returns>
</member>
<member name="M:Elementor.Controls_Stack.get_unique_name">
<summary>
Get unique name.
Some classes need to use unique names, this method allows you to create
them. By default it retrieves the regular name.
</summary>
<returns>Unique name.</returns>
</member>
<member name="M:Elementor.Controls_Stack.get_id">
<summary>
Get element ID.
Retrieve the element generic ID.
</summary>
<returns>The ID.</returns>
</member>
<member name="M:Elementor.Controls_Stack.get_id_int">
<summary>
Get element ID.
Retrieve the element generic ID as integer.
</summary>
<returns>The converted ID.</returns>
</member>
<member name="M:Elementor.Controls_Stack.get_type(Pchp.Core.Context)">
<summary>
Get the type.
Retrieve the type, e.g. 'stack', 'section', 'widget' etc.
</summary>
<returns>The type.</returns>
</member>
<member name="M:Elementor.Controls_Stack.is_editable">
</member>
<member name="M:Elementor.Controls_Stack.get_current_section">
<summary>
Get current section.
When inserting new controls, this method will retrieve the current section.
</summary>
<returns>Current section.</returns>
</member>
<member name="M:Elementor.Controls_Stack.get_current_tab">
<summary>
Get current tab.
When inserting new controls, this method will retrieve the current tab.
</summary>
<returns>Current tab.</returns>
</member>
<member name="M:Elementor.Controls_Stack.get_controls(Pchp.Core.PhpValue)">
<summary>
Get controls.
Retrieve all the controls or, when requested, a specific control.
</summary>
<param name="control_id" type="string">The ID of the requested control. Optional field,
when set it will return a specific control.
Default is null.</param>
<returns>Controls list.</returns>
</member>
<member name="M:Elementor.Controls_Stack.get_active_controls(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Get active controls.
Retrieve an array of active controls that meet the condition field.

If specific controls was given as a parameter, retrieve active controls
from that list, otherwise check for all the controls available.
</summary>
<param name="controls" type="array">Optional. An array of controls. Default is null.</param>
<param name="settings" type="array">Optional. Controls settings. Default is null.</param>
<returns>Active controls.</returns>
</member>
<member name="M:Elementor.Controls_Stack.get_controls_settings">
<summary>
Get controls settings.
Retrieve the settings for all the controls that represent them.
</summary>
<returns>Controls settings.</returns>
</member>
<member name="M:Elementor.Controls_Stack.add_control(Pchp.Core.PhpValue,Pchp.Core.PhpArray,Pchp.Core.PhpValue)">
<summary>
Add new control to stack.
Register a single control to allow the user to set/update data.

This method should be used inside `register_controls()`.
</summary>
<param name="id" type="string">Control ID.</param>
<param name="args" type="array">Control arguments.</param>
<param name="options" type="array">Optional. Control options. Default is an empty array.</param>
<returns>True if control added, False otherwise.</returns>
</member>
<member name="M:Elementor.Controls_Stack.remove_control(Pchp.Core.PhpValue)">
<summary>
Remove control from stack.
Unregister an existing control and remove it from the stack.
</summary>
<param name="control_id" type="string">Control ID.</param>
</member>
<member name="M:Elementor.Controls_Stack.update_control(Pchp.Core.PhpValue,Pchp.Core.PhpArray,Pchp.Core.PhpArray)">
<summary>
Update control in stack.
Change the value of an existing control in the stack. When you add new
control you set the `$args` parameter, this method allows you to update
the arguments by passing new data.
</summary>
<param name="control_id" type="string">Control ID.</param>
<param name="args" type="array">Control arguments. Only the new fields you want
to update.</param>
<param name="options" type="array">Optional. Some additional options. Default is
an empty array.</param>
</member>
<member name="M:Elementor.Controls_Stack.get_stack">
<summary>
Get stack.
Retrieve the stack of controls.
</summary>
<returns>Stack of controls.</returns>
</member>
<member name="M:Elementor.Controls_Stack.get_position_info(Pchp.Core.PhpArray)">
<summary>
Get position information.
Retrieve the position while injecting data, based on the element type.
</summary>
<param name="position" type="array">{
The injection position.

@type string $type     Injection type, either `control` or `section`.
Default is `control`.
@type string $at       Where to inject. If `$type` is `control` accepts
`before` and `after`. If `$type` is `section`
accepts `start` and `end`. Default values based on
the `type`.
@type string $of       Control/Section ID.
@type array  $fallback Fallback injection position. When the position is
not found it will try to fetch the fallback
position.
}</param>
<returns>Position info.</returns>
</member>
<member name="M:Elementor.Controls_Stack.get_control_key(Pchp.Core.PhpValue)">
<summary>
Get control key.
Retrieve the key of the control based on a given index of the control.
</summary>
<param name="control_index" type="string">Control index.</param>
<returns>Control key.</returns>
</member>
<member name="M:Elementor.Controls_Stack.get_control_index(Pchp.Core.PhpValue)">
<summary>
Get control index.
Retrieve the index of the control based on a given key of the control.
</summary>
<param name="control_key" type="string">Control key.</param>
<returns>Control index.</returns>
</member>
<member name="M:Elementor.Controls_Stack.get_section_controls(Pchp.Core.PhpValue)">
<summary>
Get section controls.
Retrieve all controls under a specific section.
</summary>
<param name="section_id" type="string">Section ID.</param>
<returns>Section controls</returns>
</member>
<member name="M:Elementor.Controls_Stack.add_group_control(Pchp.Core.PhpValue,Pchp.Core.PhpArray,Pchp.Core.PhpArray)">
<summary>
Add new group control to stack.
Register a set of related controls grouped together as a single unified
control. For example grouping together like typography controls into a
single, easy-to-use control.
</summary>
<param name="group_name" type="string">Group control name.</param>
<param name="args" type="array">Group control arguments. Default is an empty array.</param>
<param name="options" type="array">Optional. Group control options. Default is an
empty array.</param>
</member>
<member name="M:Elementor.Controls_Stack.get_scheme_controls">
<summary>
Get scheme controls.
Retrieve all the controls that use schemes.
</summary>
<returns>Scheme controls.</returns>
</member>
<member name="M:Elementor.Controls_Stack.get_style_controls(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Get style controls.
Retrieve style controls for all active controls or, when requested, from
a specific set of controls.
</summary>
<param name="controls" type="array">Optional. Controls list. Default is null.</param>
<param name="settings" type="array">Optional. Controls settings. Default is null.</param>
<returns>Style controls.</returns>
</member>
<member name="M:Elementor.Controls_Stack.get_tabs_controls">
<summary>
Get tabs controls.
Retrieve all the tabs assigned to the control.
</summary>
<returns>Tabs controls.</returns>
</member>
<member name="M:Elementor.Controls_Stack.add_responsive_control(Pchp.Core.PhpValue,Pchp.Core.PhpArray,Pchp.Core.PhpValue)">
<summary>
Add new responsive control to stack.
Register a set of controls to allow editing based on user screen size.
This method registers one or more controls per screen size/device, depending on the current Responsive Control
Duplication Mode. There are 3 control duplication modes:
* 'off' - Only a single control is generated. In the Editor, this control is duplicated in JS.
* 'on' - Multiple controls are generated, one control per enabled device/breakpoint + a default/desktop control.
* 'dynamic' - If the control includes the `'dynamic' =&gt; 'active' =&gt; true` property - the control is duplicated,
once for each device/breakpoint + default/desktop.
If the control doesn't include the `'dynamic' =&gt; 'active' =&gt; true` property - the control is not duplicated.
</summary>
<param name="id" type="string">Responsive control ID.</param>
<param name="args" type="array">Responsive control arguments.</param>
<param name="options" type="array">Optional. Responsive control options. Default is
an empty array.</param>
</member>
<member name="M:Elementor.Controls_Stack.update_responsive_control(Pchp.Core.PhpValue,Pchp.Core.PhpArray,Pchp.Core.PhpArray)">
<summary>
Update responsive control in stack.
Change the value of an existing responsive control in the stack. When you
add new control you set the `$args` parameter, this method allows you to
update the arguments by passing new data.
</summary>
<param name="id" type="string">Responsive control ID.</param>
<param name="args" type="array">Responsive control arguments.</param>
<param name="options" type="array">Optional. Additional options.</param>
</member>
<member name="M:Elementor.Controls_Stack.remove_responsive_control(Pchp.Core.PhpValue)">
<summary>
Remove responsive control from stack.
Unregister an existing responsive control and remove it from the stack.
</summary>
<param name="id" type="string">Responsive control ID.</param>
</member>
<member name="M:Elementor.Controls_Stack.get_class_name">
<summary>
Get class name.
Retrieve the name of the current class.
</summary>
<returns>Class name.</returns>
</member>
<member name="M:Elementor.Controls_Stack.get_config">
<summary>
Get the config.
Retrieve the config or, if non set, use the initial config.
</summary>
<returns>The config.</returns>
</member>
<member name="M:Elementor.Controls_Stack.get_frontend_settings_keys">
<summary>
Get frontend settings keys.
Retrieve settings keys for all frontend controls.
</summary>
<returns>Settings keys for each control.</returns>
</member>
<member name="M:Elementor.Controls_Stack.get_pointer_index">
<summary>
Get controls pointer index.
Retrieve pointer index where the next control should be added.

While using injection point, it will return the injection point index.
Otherwise index of the last control plus one.
</summary>
<returns>Controls pointer index.</returns>
</member>
<member name="M:Elementor.Controls_Stack.get_data(Pchp.Core.PhpValue)">
<summary>
Get the raw data.
Retrieve all the items or, when requested, a specific item.
</summary>
<param name="item" type="string">Optional. The requested item. Default is null.</param>
<returns>The raw data.</returns>
</member>
<member name="M:Elementor.Controls_Stack.get_parsed_dynamic_settings(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:Elementor.Controls_Stack.get_active_settings(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Get active settings.
Retrieve the settings from all the active controls.
</summary>
<param name="controls" type="array">Optional. An array of controls. Default is null.</param>
<param name="settings" type="array">Optional. Controls settings. Default is null.</param>
<returns>Active settings.</returns>
</member>
<member name="M:Elementor.Controls_Stack.get_settings_for_display(Pchp.Core.PhpValue)">
<summary>
Get settings for display.
Retrieve all the settings or, when requested, a specific setting for display.

Unlike `get_settings()` method, this method retrieves only active settings
that passed all the conditions, rendered all the shortcodes and all the dynamic
tags.
</summary>
<param name="setting_key" type="string">Optional. The key of the requested setting.
Default is null.</param>
<returns>The settings.</returns>
</member>
<member name="M:Elementor.Controls_Stack.parse_dynamic_settings(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Parse dynamic settings.
Retrieve the settings with rendered dynamic tags.
</summary>
<param name="settings" type="array">Optional. The requested setting. Default is null.</param>
<param name="controls" type="array">Optional. The controls array. Default is null.</param>
<param name="all_settings" type="array">Optional. All the settings. Default is null.</param>
<returns>The settings with rendered dynamic tags.</returns>
</member>
<member name="M:Elementor.Controls_Stack.get_frontend_settings">
<summary>
Get frontend settings.
Retrieve the settings for all frontend controls.
</summary>
<returns>Frontend settings.</returns>
</member>
<member name="M:Elementor.Controls_Stack.filter_controls_settings(Pchp.Core.PhpValue,Pchp.Core.PhpArray,Pchp.Core.PhpArray)">
<summary>
Filter controls settings.
Receives controls, settings and a callback function to filter the settings by
and returns filtered settings.
</summary>
<param name="callback" type="callable">The callback function.</param>
<param name="settings" type="array">Optional. Control settings. Default is an empty
array.</param>
<param name="controls" type="array">Optional. Controls list. Default is an empty
array.</param>
<returns>Filtered settings.</returns>
</member>
<member name="M:Elementor.Controls_Stack.is_control_visible(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Whether the control is visible or not.
Used to determine whether the control is visible or not.
</summary>
<param name="control" type="array">The control.</param>
<param name="values" type="array">Optional. Condition values. Default is null.</param>
<returns>Whether the control is visible.</returns>
</member>
<member name="M:Elementor.Controls_Stack.start_controls_section(Pchp.Core.PhpValue,Pchp.Core.PhpArray)">
<summary>
Start controls section.
Used to add a new section of controls. When you use this method, all the
registered controls from this point will be assigned to this section,
until you close the section using `end_controls_section()` method.

This method should be used inside `register_controls()`.
</summary>
<param name="section_id" type="string">Section ID.</param>
<param name="args" type="array">Section arguments Optional.</param>
</member>
<member name="M:Elementor.Controls_Stack.end_controls_section">
<summary>
End controls section.
Used to close an existing open controls section. When you use this method
it stops adding new controls to this section.

This method should be used inside `register_controls()`.
</summary>
</member>
<member name="M:Elementor.Controls_Stack.start_controls_tabs(Pchp.Core.PhpValue,Pchp.Core.PhpArray)">
<summary>
Start controls tabs.
Used to add a new set of tabs inside a section. You should use this
method before adding new individual tabs using `start_controls_tab()`.
Each tab added after this point will be assigned to this group of tabs,
until you close it using `end_controls_tabs()` method.

This method should be used inside `register_controls()`.
</summary>
<param name="tabs_id" type="string">Tabs ID.</param>
<param name="args" type="array">Tabs arguments.</param>
</member>
<member name="M:Elementor.Controls_Stack.end_controls_tabs">
<summary>
End controls tabs.
Used to close an existing open controls tabs. When you use this method it
stops adding new controls to this tabs.

This method should be used inside `register_controls()`.
</summary>
</member>
<member name="M:Elementor.Controls_Stack.start_controls_tab(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Start controls tab.
Used to add a new tab inside a group of tabs. Use this method before
adding new individual tabs using `start_controls_tab()`.
Each tab added after this point will be assigned to this group of tabs,
until you close it using `end_controls_tab()` method.

This method should be used inside `register_controls()`.
</summary>
<param name="tab_id" type="string">Tab ID.</param>
<param name="args" type="array">Tab arguments.</param>
</member>
<member name="M:Elementor.Controls_Stack.end_controls_tab">
<summary>
End controls tab.
Used to close an existing open controls tab. When you use this method it
stops adding new controls to this tab.

This method should be used inside `register_controls()`.
</summary>
</member>
<member name="M:Elementor.Controls_Stack.start_popover">
<summary>
Start popover.
Used to add a new set of controls in a popover. When you use this method,
all the registered controls from this point will be assigned to this
popover, until you close the popover using `end_popover()` method.

This method should be used inside `register_controls()`.
</summary>
</member>
<member name="M:Elementor.Controls_Stack.end_popover">
<summary>
End popover.
Used to close an existing open popover. When you use this method it stops
adding new controls to this popover.

This method should be used inside `register_controls()`.
</summary>
</member>
<member name="M:Elementor.Controls_Stack.add_render_attribute(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Add render attribute.
Used to add attributes to a specific HTML element.

The HTML tag is represented by the element parameter, then you need to
define the attribute key and the attribute key. The final result will be:
`&lt;element attribute_key="attribute_value"&gt;`.

Example usage:

`$this-&gt;add_render_attribute( 'wrapper', 'class', 'custom-widget-wrapper-class' );`
`$this-&gt;add_render_attribute( 'widget', 'id', 'custom-widget-id' );`
`$this-&gt;add_render_attribute( 'button', [ 'class' =&gt; 'custom-button-class', 'id' =&gt; 'custom-button-id' ] );`
</summary>
<param name="element" type="array|string">The HTML element.</param>
<param name="key" type="array|string">Optional. Attribute key. Default is null.</param>
<param name="value" type="array|string">Optional. Attribute value. Default is null.</param>
<param name="overwrite" type="bool">Optional. Whether to overwrite existing
attribute. Default is false, not to overwrite.</param>
<returns>Current instance of the element.</returns>
</member>
<member name="M:Elementor.Controls_Stack.get_render_attributes(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Get Render Attributes
Used to retrieve render attribute.

The returned array is either all elements and their attributes if no `$element` is specified, an array of all
attributes of a specific element or a specific attribute properties if `$key` is specified.

Returns null if one of the requested parameters isn't set.
</summary>
<param name="element" type="string"></param>
<param name="key" type="string"></param>
</member>
<member name="M:Elementor.Controls_Stack.set_render_attribute(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Set render attribute.
Used to set the value of the HTML element render attribute or to update
an existing render attribute.
</summary>
<param name="element" type="array|string">The HTML element.</param>
<param name="key" type="array|string">Optional. Attribute key. Default is null.</param>
<param name="value" type="array|string">Optional. Attribute value. Default is null.</param>
<returns>Current instance of the element.</returns>
</member>
<member name="M:Elementor.Controls_Stack.remove_render_attribute(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Remove render attribute.
Used to remove an element (with its keys and their values), key (with its values),
or value/s from an HTML element's render attribute.
</summary>
<param name="element" type="string">The HTML element.</param>
<param name="key" type="string">Optional. Attribute key. Default is null.</param>
<param name="values" type="array|string">Optional. Attribute value/s. Default is null.</param>
</member>
<member name="M:Elementor.Controls_Stack.get_render_attribute_string(Pchp.Core.PhpValue)">
<summary>
Get render attribute string.
Used to retrieve the value of the render attribute.
</summary>
<param name="element" type="string">The element.</param>
<returns>Render attribute string, or an empty string if the attribute
is empty or not exist.</returns>
</member>
<member name="M:Elementor.Controls_Stack.print_render_attribute_string(Pchp.Core.PhpValue)">
<summary>
Print render attribute string.
Used to output the rendered attribute.
</summary>
<param name="element" type="array|string">The element.</param>
</member>
<member name="M:Elementor.Controls_Stack.print_template">
<summary>
Print element template.
Used to generate the element template on the editor.
</summary>
</member>
<member name="M:Elementor.Controls_Stack.start_injection(Pchp.Core.PhpArray)">
<summary>
Start injection.
Used to inject controls and sections to a specific position in the stack.

When you use this method, all the registered controls and sections will
be injected to a specific position in the stack, until you stop the
injection using `end_injection()` method.
</summary>
<param name="position" type="array">{
The position where to start the injection.

@type string $type Injection type, either `control` or `section`.
Default is `control`.
@type string $at   Where to inject. If `$type` is `control` accepts
`before` and `after`. If `$type` is `section`
accepts `start` and `end`. Default values based on
the `type`.
@type string $of   Control/Section ID.
}</param>
</member>
<member name="M:Elementor.Controls_Stack.end_injection">
<summary>
End injection.
Used to close an existing opened injection point.

When you use this method it stops adding new controls and sections to
this point and continue to add controls to the regular position in the
stack.
</summary>
</member>
<member name="M:Elementor.Controls_Stack.get_injection_point">
<summary>
Get injection point.
Retrieve the injection point in the stack where new controls and sections
will be inserted.
</summary>
<returns>An array when an injection point is defined, null
otherwise.</returns>
</member>
<member name="M:Elementor.Controls_Stack._register_controls">
<summary>
Register controls.
Used to add new controls to any element type. For example, external
developers use this method to register controls in a widget.

Should be inherited and register new controls using `add_control()`,
`add_responsive_control()` and `add_group_control()`, inside control
wrappers like `start_controls_section()`, `start_controls_tabs()` and
`start_controls_tab()`.
</summary>
</member>
<member name="M:Elementor.Controls_Stack.register_controls">
<summary>
Register controls.
Used to add new controls to any element type. For example, external
developers use this method to register controls in a widget.

Should be inherited and register new controls using `add_control()`,
`add_responsive_control()` and `add_group_control()`, inside control
wrappers like `start_controls_section()`, `start_controls_tabs()` and
`start_controls_tab()`.
</summary>
</member>
<member name="M:Elementor.Controls_Stack.get_default_data">
<summary>
Get default data.
Retrieve the default data. Used to reset the data on initialization.
</summary>
<returns>Default data.</returns>
</member>
<member name="M:Elementor.Controls_Stack.get_init_settings">
</member>
<member name="M:Elementor.Controls_Stack.get_initial_config">
<summary>
Get initial config.
Retrieve the current element initial configuration - controls list and
the tabs assigned to the control.
</summary>
<returns>The initial config.</returns>
</member>
<member name="M:Elementor.Controls_Stack._get_initial_config">
<summary>
Get initial config.
Retrieve the current element initial configuration - controls list and
the tabs assigned to the control.
</summary>
<returns>The initial config.</returns>
</member>
<member name="M:Elementor.Controls_Stack.get_section_args(Pchp.Core.PhpValue)">
<summary>
Get section arguments.
Retrieve the section arguments based on section ID.
</summary>
<param name="section_id" type="string">Section ID.</param>
<returns>Section arguments.</returns>
</member>
<member name="M:Elementor.Controls_Stack.render">
<summary>
Render element.
Generates the final HTML on the frontend.
</summary>
</member>
<member name="M:Elementor.Controls_Stack.render_static">
<summary>
Render element in static mode.
If not inherent will call the base render.
</summary>
</member>
<member name="M:Elementor.Controls_Stack.render_by_mode">
<summary>
Determine the render logic.
</summary>
</member>
<member name="M:Elementor.Controls_Stack.print_template_content(Pchp.Core.PhpValue)">
<summary>
Print content template.
Used to generate the content template on the editor, using a
Backbone JavaScript template.
</summary>
<param name="template_content" type="string">Template content.</param>
</member>
<member name="M:Elementor.Controls_Stack.content_template">
<summary>
Render element output in the editor.
Used to generate the live preview, using a Backbone JavaScript template.
</summary>
</member>
<member name="M:Elementor.Controls_Stack._content_template">
<summary>
Render element output in the editor.
Used to generate the live preview, using a Backbone JavaScript template.
</summary>
</member>
<member name="M:Elementor.Controls_Stack.init_controls">
<summary>
Initialize controls.
Register the all controls added by `register_controls()`.
</summary>
</member>
<member name="M:Elementor.Controls_Stack.init(Pchp.Core.PhpValue)">
<summary>
Initialize the class.
Set the raw data, the ID and the parsed settings.
</summary>
<param name="data" type="array">Initial data.</param>
</member>
<member name="M:Elementor.Controls_Stack._init(Pchp.Core.PhpValue)">
<summary>
Initialize the class.
Set the raw data, the ID and the parsed settings.
</summary>
<param name="data" type="array">Initial data.</param>
</member>
<member name="M:Elementor.Controls_Stack.sanitize_settings(Pchp.Core.PhpArray,Pchp.Core.PhpArray)">
<summary>
Sanitize initial data.
Performs settings cleaning and sanitization.
</summary>
<param name="settings" type="array">Settings to sanitize.</param>
<param name="controls" type="array">Optional. An array of controls. Default is an
empty array.</param>
<returns>Sanitized settings.</returns>
</member>
<member name="M:Elementor.Controls_Stack.__construct(Pchp.Core.PhpArray)">
<summary>
Controls stack constructor.
Initializing the control stack class using `$data`. The `$data` is required
for a normal instance. It is optional only for internal `type instance`.
</summary>
<param name="data" type="array">Optional. Control stack data. Default is an empty array.</param>
</member>
<member name="M:Elementor.Element_Base.add_script_depends(Pchp.Core.PhpValue)">
<summary>
Add script depends.
Register new script to enqueue by the handler.
</summary>
<param name="handler" type="string">Depend script handler.</param>
</member>
<member name="M:Elementor.Element_Base.add_style_depends(Pchp.Core.PhpValue)">
<summary>
Add style depends.
Register new style to enqueue by the handler.
</summary>
<param name="handler" type="string">Depend style handler.</param>
</member>
<member name="M:Elementor.Element_Base.get_script_depends">
<summary>
Get script dependencies.
Retrieve the list of script dependencies the element requires.
</summary>
<returns>Element scripts dependencies.</returns>
</member>
<member name="M:Elementor.Element_Base.enqueue_scripts">
<summary>
Enqueue scripts.
Registers all the scripts defined as element dependencies and enqueues
them. Use `get_script_depends()` method to add custom script dependencies.
</summary>
</member>
<member name="M:Elementor.Element_Base.get_style_depends">
<summary>
Get style dependencies.
Retrieve the list of style dependencies the element requires.
</summary>
<returns>Element styles dependencies.</returns>
</member>
<member name="M:Elementor.Element_Base.enqueue_styles">
<summary>
Enqueue styles.
Registers all the styles defined as element dependencies and enqueues
them. Use `get_style_depends()` method to add custom style dependencies.
</summary>
</member>
<member name="M:Elementor.Element_Base.add_edit_tool(Pchp.Core.Context)">
</member>
<member name="M:Elementor.Element_Base.is_edit_buttons_enabled(Pchp.Core.Context)">
</member>
<member name="M:Elementor.Element_Base._get_default_child_type(Pchp.Core.PhpArray)">
<summary>
Get default child type.
Retrieve the default child type based on element data.

Note that not all elements support children.
</summary>
<param name="element_data" type="array">Element data.</param>
</member>
<member name="M:Elementor.Element_Base.before_render">
<summary>
Before element rendering.
Used to add stuff before the element.
</summary>
</member>
<member name="M:Elementor.Element_Base.after_render">
<summary>
After element rendering.
Used to add stuff after the element.
</summary>
</member>
<member name="M:Elementor.Element_Base.get_title">
<summary>
Get element title.
Retrieve the element title.
</summary>
<returns>Element title.</returns>
</member>
<member name="M:Elementor.Element_Base.get_icon">
<summary>
Get element icon.
Retrieve the element icon.
</summary>
<returns>Element icon.</returns>
</member>
<member name="M:Elementor.Element_Base.is_reload_preview_required">
<summary>
Whether the reload preview is required.
Used to determine whether the reload preview is required or not.
</summary>
<returns>Whether the reload preview is required.</returns>
</member>
<member name="M:Elementor.Element_Base.should_print_empty">
</member>
<member name="M:Elementor.Element_Base.get_children">
<summary>
Get child elements.
Retrieve all the child elements of this element.
</summary>
<returns>Child elements.</returns>
</member>
<member name="M:Elementor.Element_Base.get_default_args(Pchp.Core.PhpValue)">
<summary>
Get default arguments.
Retrieve the element default arguments. Used to return all the default
arguments or a specific default argument, if one is set.
</summary>
<param name="item" type="array">Optional. Default is null.</param>
<returns>Default argument(s).</returns>
</member>
<member name="M:Elementor.Element_Base.add_child(Pchp.Core.PhpArray,Pchp.Core.PhpArray)">
<summary>
Add new child element.
Register new child element to allow hierarchy.
</summary>
<param name="child_data" type="array">Child element data.</param>
<param name="child_args" type="array">Child element arguments.</param>
<returns>Child element instance, or false if failed.</returns>
</member>
<member name="M:Elementor.Element_Base.add_link_attributes(Pchp.Core.PhpValue,Pchp.Core.PhpArray,Pchp.Core.PhpValue)">
<summary>
Add link render attributes.
Used to add link tag attributes to a specific HTML element.

The HTML link tag is represented by the element parameter. The `url_control` parameter
needs to be an array of link settings in the same format they are set by Elementor's URL control.

Example usage:

`$this-&gt;add_link_attributes( 'button', $settings['link'] );`
</summary>
<param name="element" type="array|string">The HTML element.</param>
<param name="url_control" type="array">Array of link settings.</param>
<param name="overwrite" type="bool">Optional. Whether to overwrite existing
attribute. Default is false, not to overwrite.</param>
<returns>Current instance of the element.</returns>
</member>
<member name="M:Elementor.Element_Base.print_element">
<summary>
Print element.
Used to generate the element final HTML on the frontend and the editor.
</summary>
</member>
<member name="M:Elementor.Element_Base.get_raw_data(Pchp.Core.PhpValue)">
<summary>
Get the element raw data.
Retrieve the raw element data, including the id, type, settings, child
elements and whether it is an inner element.

The data with the HTML used always to display the data, but the Elementor
editor uses the raw data without the HTML in order not to render the data
again.
</summary>
<param name="with_html_content" type="bool">Optional. Whether to return the data with
HTML content or without. Used for caching.
Default is false, without HTML.</param>
<returns>Element raw data.</returns>
</member>
<member name="M:Elementor.Element_Base.get_unique_selector">
<summary>
Get unique selector.
Retrieve the unique selector of the element. Used to set a unique HTML
class for each HTML element. This way Elementor can set custom styles for
each element.
</summary>
<returns>Unique selector.</returns>
</member>
<member name="M:Elementor.Element_Base.is_type_instance">
<summary>
Is type instance.
Used to determine whether the element is an instance of that type or not.
</summary>
<returns>Whether the element is an instance of that type.</returns>
</member>
<member name="M:Elementor.Element_Base._add_render_attributes">
<summary>
Add render attributes.
Used to add attributes to the current element wrapper HTML tag.
</summary>
</member>
<member name="M:Elementor.Element_Base.add_render_attributes">
<summary>
Add render attributes.
Used to add attributes to the current element wrapper HTML tag.
</summary>
</member>
<member name="M:Elementor.Element_Base.add_hidden_device_controls">
<summary>
Add Hidden Device Controls
Adds controls for hiding elements within certain devices' viewport widths. Adds a control for each active device.
</summary>
</member>
<member name="M:Elementor.Element_Base.get_default_data">
<summary>
Get default data.
Retrieve the default element data. Used to reset the data on initialization.
</summary>
<returns>Default data.</returns>
</member>
<member name="M:Elementor.Element_Base._print_content">
<summary>
Print element content.
Output the element final HTML on the frontend.
</summary>
</member>
<member name="M:Elementor.Element_Base.print_content">
<summary>
Print element content.
Output the element final HTML on the frontend.
</summary>
</member>
<member name="M:Elementor.Element_Base.get_initial_config">
<summary>
Get initial config.
Retrieve the current element initial configuration.

Adds more configuration on top of the controls list and the tabs assigned
to the control. This method also adds element name, type, icon and more.
</summary>
<returns>The initial config.</returns>
</member>
<member name="M:Elementor.Element_Base.get_child_type(Pchp.Core.PhpValue)">
<summary>
Get child type.
Retrieve the element child type based on element data.
</summary>
<param name="element_data" type="array">Element ID.</param>
<returns>Child type or false if type not found.</returns>
</member>
<member name="M:Elementor.Element_Base.init_children">
<summary>
Initialize children.
Initializing the element child elements.
</summary>
</member>
<member name="M:Elementor.Element_Base.__construct(Pchp.Core.PhpArray,Pchp.Core.PhpValue)">
<summary>
Element base constructor.
Initializing the element base class using `$data` and `$args`.

The `$data` parameter is required for a normal instance because of the
way Elementor renders data when initializing elements.
</summary>
<param name="data" type="array">Optional. Element data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Element default arguments. Default is null.</param>
</member>
<member name="M:Elementor.Skin_Base.__construct(Elementor.Widget_Base)">
<summary>
Skin base constructor.
Initializing the skin base class by setting parent widget and registering
controls actions.
</summary>
<param name="parent" type="Widget_Base"></param>
</member>
<member name="M:Elementor.Skin_Base.render">
<summary>
Render skin.
Generates the final HTML on the frontend.
</summary>
</member>
<member name="M:Elementor.Skin_Base.render_static">
<summary>
Render element in static mode.
If not inherent will call the base render.
</summary>
</member>
<member name="M:Elementor.Skin_Base.render_by_mode">
<summary>
Determine the render logic.
</summary>
</member>
<member name="M:Elementor.Skin_Base._register_controls_actions">
<summary>
Register skin controls actions.
Run on init and used to register new skins to be injected to the widget.
This method is used to register new actions that specify the location of
the skin in the widget.

Example usage:
`add_action( 'elementor/element/{widget_id}/{section_id}/before_section_end', [ $this, 'register_controls' ] );`
</summary>
</member>
<member name="M:Elementor.Skin_Base.get_control_id(Pchp.Core.PhpValue)">
<summary>
Get skin control ID.
Retrieve the skin control ID. Note that skin controls have special prefix
to distinguish them from regular controls, and from controls in other
skins.
</summary>
<param name="control_base_id" type="string">Control base ID.</param>
<returns>Control ID.</returns>
</member>
<member name="M:Elementor.Skin_Base.get_instance_value(Pchp.Core.PhpValue)">
<summary>
Get skin settings.
Retrieve all the skin settings or, when requested, a specific setting.
</summary>
<param name="control_base_id" type="string">Control base ID.</param>
<returns>Widget instance.</returns>
</member>
<member name="M:Elementor.Skin_Base.start_controls_section(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Start skin controls section.
Used to add a new section of controls to the skin.
</summary>
<param name="id" type="string">Section ID.</param>
<param name="args" type="array">Section arguments.</param>
</member>
<member name="M:Elementor.Skin_Base.add_control(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Add new skin control.
Register a single control to the allow the user to set/update skin data.
</summary>
<param name="id" type="string">Control ID.</param>
<param name="args" type="array">Control arguments.</param>
<param name="options" type="array"></param>
<returns>True if skin added, False otherwise.</returns>
</member>
<member name="M:Elementor.Skin_Base.update_control(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpArray)">
<summary>
Update skin control.
Change the value of an existing skin control.
</summary>
<param name="id" type="string">Control ID.</param>
<param name="args" type="array">Control arguments. Only the new fields you want to update.</param>
<param name="options" type="array">Optional. Some additional options.</param>
</member>
<member name="M:Elementor.Skin_Base.add_responsive_control(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Add new responsive skin control.
Register a set of controls to allow editing based on user screen size.
</summary>
<param name="id" type="string">Responsive control ID.</param>
<param name="args" type="array">Responsive control arguments.</param>
<param name="options" type="array"></param>
</member>
<member name="M:Elementor.Skin_Base.start_controls_tab(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Start skin controls tab.
Used to add a new tab inside a group of tabs.
</summary>
<param name="id" type="string">Control ID.</param>
<param name="args" type="array">Control arguments.</param>
</member>
<member name="M:Elementor.Skin_Base.start_controls_tabs(Pchp.Core.PhpValue)">
<summary>
Start skin controls tabs.
Used to add a new set of tabs inside a section.
</summary>
<param name="id" type="string">Control ID.</param>
</member>
<member name="M:Elementor.Skin_Base.add_group_control(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Add new group control.
Register a set of related controls grouped together as a single unified
control.
</summary>
<param name="group_name" type="string">Group control name.</param>
<param name="args" type="array">Group control arguments. Default is an empty array.</param>
<param name="options" type="array"></param>
</member>
<member name="M:Elementor.Skin_Base.set_parent(Pchp.Core.PhpValue)">
<summary>
Set parent widget.
Used to define the parent widget of the skin.
</summary>
<param name="parent" type="Widget_Base">Parent widget.</param>
</member>
<member name="M:Elementor.Sub_Controls_Stack.get_id">
<summary>
Get self ID.
Retrieve the self ID.
</summary>
</member>
<member name="M:Elementor.Sub_Controls_Stack.get_title">
<summary>
Get self title.
Retrieve the self title.
</summary>
</member>
<member name="M:Elementor.Sub_Controls_Stack.__construct(Pchp.Core.PhpValue)">
<summary>
Constructor.
Initializing the base class by setting parent stack.
</summary>
<param name="parent" type="Controls_Stack"></param>
</member>
<member name="M:Elementor.Sub_Controls_Stack.get_control_id(Pchp.Core.PhpValue)">
<summary>
Get control ID.
Retrieve the control ID. Note that the sub controls stack may have a special prefix
to distinguish them from regular controls, and from controls in other
sub stack.

By default do nothing, and return the original id.
</summary>
<param name="control_base_id" type="string">Control base ID.</param>
<returns>Control ID.</returns>
</member>
<member name="M:Elementor.Sub_Controls_Stack.add_control(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Add new control.
Register a single control to allow the user to set/update data.
</summary>
<param name="id" type="string">Control ID.</param>
<param name="args" type="array">Control arguments.</param>
<param name="options" type="array"></param>
<returns>True if added, False otherwise.</returns>
</member>
<member name="M:Elementor.Sub_Controls_Stack.update_control(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpArray)">
<summary>
Update control.
Change the value of an existing control.
</summary>
<param name="id" type="string">Control ID.</param>
<param name="args" type="array">Control arguments. Only the new fields you want to update.</param>
<param name="options" type="array">Optional. Some additional options.</param>
</member>
<member name="M:Elementor.Sub_Controls_Stack.remove_control(Pchp.Core.PhpValue)">
<summary>
Remove control.
Unregister an existing control.
</summary>
<param name="id" type="string">Control ID.</param>
</member>
<member name="M:Elementor.Sub_Controls_Stack.add_group_control(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Add new group control.
Register a set of related controls grouped together as a single unified
control.
</summary>
<param name="group_name" type="string">Group control name.</param>
<param name="args" type="array">Group control arguments. Default is an empty array.</param>
<param name="options" type="array"></param>
</member>
<member name="M:Elementor.Sub_Controls_Stack.add_responsive_control(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Add new responsive control.
Register a set of controls to allow editing based on user screen size.
</summary>
<param name="id" type="string">Responsive control ID.</param>
<param name="args" type="array">Responsive control arguments.</param>
<param name="options" type="array"></param>
</member>
<member name="M:Elementor.Sub_Controls_Stack.update_responsive_control(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Update responsive control.
Change the value of an existing responsive control.
</summary>
<param name="id" type="string">Responsive control ID.</param>
<param name="args" type="array">Responsive control arguments.</param>
</member>
<member name="M:Elementor.Sub_Controls_Stack.remove_responsive_control(Pchp.Core.PhpValue)">
<summary>
Remove responsive control.
Unregister an existing responsive control.
</summary>
<param name="id" type="string">Responsive control ID.</param>
</member>
<member name="M:Elementor.Sub_Controls_Stack.start_controls_section(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Start controls section.
Used to add a new section of controls to the stack.
</summary>
<param name="id" type="string">Section ID.</param>
<param name="args" type="array">Section arguments.</param>
</member>
<member name="M:Elementor.Sub_Controls_Stack.end_controls_section">
<summary>
End controls section.
Used to close an existing open controls section.
</summary>
</member>
<member name="M:Elementor.Sub_Controls_Stack.start_controls_tabs(Pchp.Core.PhpValue)">
<summary>
Start controls tabs.
Used to add a new set of tabs inside a section.
</summary>
<param name="id" type="string">Control ID.</param>
</member>
<member name="M:Elementor.Sub_Controls_Stack.end_controls_tab">
<summary>
End controls tabs.
Used to close an existing open controls tabs.
</summary>
</member>
<member name="M:Elementor.Sub_Controls_Stack.end_controls_tabs">
<summary>
End controls tabs.
Used to close an existing open controls tabs.
</summary>
</member>
<member name="M:Elementor.Widget_Base.get_type(Pchp.Core.Context)">
<summary>
Get element type.
Retrieve the element type, in this case `widget`.
</summary>
<returns>The type.</returns>
</member>
<member name="M:Elementor.Widget_Base.get_icon">
<summary>
Get widget icon.
Retrieve the widget icon.
</summary>
<returns>Widget icon.</returns>
</member>
<member name="M:Elementor.Widget_Base.get_keywords">
<summary>
Get widget keywords.
Retrieve the widget keywords.
</summary>
<returns>Widget keywords.</returns>
</member>
<member name="M:Elementor.Widget_Base.get_categories">
<summary>
Get widget categories.
Retrieve the widget categories.
</summary>
<returns>Widget categories.</returns>
</member>
<member name="M:Elementor.Widget_Base.__construct(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Widget base constructor.
Initializing the widget base class.
</summary>
<exception cref="Exception">If arguments are missing when initializing a full widget
instance.</exception>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Widget default arguments. Default is null.</param>
</member>
<member name="M:Elementor.Widget_Base.get_stack(Pchp.Core.PhpValue)">
<summary>
Get stack.
Retrieve the widget stack of controls.
</summary>
<param name="with_common_controls" type="bool">Optional. Whether to include the common controls. Default is true.</param>
<returns>Widget stack of controls.</returns>
</member>
<member name="M:Elementor.Widget_Base.get_pointer_index">
<summary>
Get widget controls pointer index.
Retrieve widget pointer index where the next control should be added.

While using injection point, it will return the injection point index. Otherwise index of the last control of the
current widget itself without the common controls, plus one.
</summary>
<returns>Widget controls pointer index.</returns>
</member>
<member name="M:Elementor.Widget_Base.show_in_panel">
<summary>
Show in panel.
Whether to show the widget in the panel or not. By default returns true.
</summary>
<returns>Whether to show the widget in the panel or not.</returns>
</member>
<member name="M:Elementor.Widget_Base.start_controls_section(Pchp.Core.PhpValue,Pchp.Core.PhpArray)">
<summary>
Start widget controls section.
Used to add a new section of controls to the widget. Regular controls and
skin controls.

Note that when you add new controls to widgets they must be wrapped by
`start_controls_section()` and `end_controls_section()`.
</summary>
<param name="section_id" type="string">Section ID.</param>
<param name="args" type="array">Section arguments Optional.</param>
</member>
<member name="M:Elementor.Widget_Base.register_skin_control">
<summary>
Register the Skin Control if the widget has skins.
An internal method that is used to add a skin control to the widget.
Added at the top of the controls section.
</summary>
</member>
<member name="M:Elementor.Widget_Base._register_skins">
<summary>
Register widget skins - deprecated prefixed method
</summary>
</member>
<member name="M:Elementor.Widget_Base.register_skins">
<summary>
Register widget skins.
This method is activated while initializing the widget base class. It is
used to assign skins to widgets with `add_skin()` method.

Usage:

protected function register_skins() {
$this-&gt;add_skin( new Skin_Classic( $this ) );
}
</summary>
</member>
<member name="M:Elementor.Widget_Base.get_initial_config">
<summary>
Get initial config.
Retrieve the current widget initial configuration.

Adds more configuration on top of the controls list, the tabs assigned to
the control, element name, type, icon and more. This method also adds
widget type, keywords and categories.
</summary>
<returns>The initial widget config.</returns>
</member>
<member name="M:Elementor.Widget_Base.should_print_empty">
</member>
<member name="M:Elementor.Widget_Base.print_template_content(Pchp.Core.PhpValue)">
<summary>
Print widget content template.
Used to generate the widget content template on the editor, using a
Backbone JavaScript template.
</summary>
<param name="template_content" type="string">Template content.</param>
</member>
<member name="M:Elementor.Widget_Base.parse_text_editor(Pchp.Core.PhpValue)">
<summary>
Parse text editor.
Parses the content from rich text editor with shortcodes, oEmbed and
filtered data.
</summary>
<param name="content" type="string">Text editor content.</param>
<returns>Parsed content.</returns>
</member>
<member name="M:Elementor.Widget_Base.print_text_editor(Pchp.Core.PhpValue)">
<summary>
Safe print parsed text editor.
</summary>
<param name="content" type="string">Text editor content.</param>
</member>
<member name="M:Elementor.Widget_Base.get_html_wrapper_class">
<summary>
Get HTML wrapper class.
Retrieve the widget container class. Can be used to override the
container class for specific widgets.
</summary>
</member>
<member name="M:Elementor.Widget_Base.add_render_attributes">
<summary>
Add widget render attributes.
Used to add attributes to the current widget wrapper HTML tag.
</summary>
</member>
<member name="M:Elementor.Widget_Base.add_lightbox_data_to_image_link(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Add lightbox data to image link.
Used to add lightbox data attributes to image link HTML.
</summary>
<param name="link_html" type="string">Image link HTML.</param>
<param name="id" type="string">Attachment id.</param>
<returns>Image link HTML with lightbox data attributes.</returns>
</member>
<member name="M:Elementor.Widget_Base.add_lightbox_data_attributes(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Add Light-Box attributes.
Used to add Light-Box-related data attributes to links that open media files.
</summary>
<param name="element" type="array|string">The link HTML element.</param>
<param name="id" type="int">The ID of the image</param>
<param name="lightbox_setting_key" type="string">The setting key that dictates weather to open the image in a lightbox</param>
<param name="group_id" type="string">Unique ID for a group of lightbox images</param>
<param name="overwrite" type="bool">Optional. Whether to overwrite existing
attribute. Default is false, not to overwrite.</param>
<returns>Current instance of the widget.</returns>
</member>
<member name="M:Elementor.Widget_Base.render_content">
<summary>
Render widget output on the frontend.
Used to generate the final HTML displayed on the frontend.

Note that if skin is selected, it will be rendered by the skin itself,
not the widget.
</summary>
</member>
<member name="M:Elementor.Widget_Base.render_plain_content">
<summary>
Render widget plain content.
Elementor saves the page content in a unique way, but it's not the way
WordPress saves data. This method is used to save generated HTML to the
database as plain content the WordPress way.

When rendering plain content, it allows other WordPress plugins to
interact with the content - to search, check SEO and other purposes. It
also allows the site to keep working even if Elementor is deactivated.

Note that if the widget uses shortcodes to display the data, the best
practice is to return the shortcode itself.

Also note that if the widget don't display any content it should return
an empty string. For example Elementor Pro Form Widget uses this method
to return an empty string because there is no content to return. This way
if Elementor Pro will be deactivated there won't be any form to display.
</summary>
</member>
<member name="M:Elementor.Widget_Base.before_render">
<summary>
Before widget rendering.
Used to add stuff before the widget `_wrapper` element.
</summary>
</member>
<member name="M:Elementor.Widget_Base.after_render">
<summary>
After widget rendering.
Used to add stuff after the widget `_wrapper` element.
</summary>
</member>
<member name="M:Elementor.Widget_Base.get_raw_data(Pchp.Core.PhpValue)">
<summary>
Get the element raw data.
Retrieve the raw element data, including the id, type, settings, child
elements and whether it is an inner element.

The data with the HTML used always to display the data, but the Elementor
editor uses the raw data without the HTML in order not to render the data
again.
</summary>
<param name="with_html_content" type="bool">Optional. Whether to return the data with
HTML content or without. Used for caching.
Default is false, without HTML.</param>
<returns>Element raw data.</returns>
</member>
<member name="M:Elementor.Widget_Base.print_content">
<summary>
Print widget content.
Output the widget final HTML on the frontend.
</summary>
</member>
<member name="M:Elementor.Widget_Base.print_unescaped_setting(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Print a setting content without escaping.
Script tags are allowed on frontend according to the WP theme securing policy.
</summary>
<param name="setting" type="string"></param>
<param name="repeater_name" type="null"></param>
<param name="index" type="null"></param>
</member>
<member name="M:Elementor.Widget_Base.get_default_data">
<summary>
Get default data.
Retrieve the default widget data. Used to reset the data on initialization.
</summary>
<returns>Default data.</returns>
</member>
<member name="M:Elementor.Widget_Base._get_default_child_type(Pchp.Core.PhpArray)">
<summary>
Get default child type.
Retrieve the widget child type based on element data.
</summary>
<param name="element_data" type="array">Widget ID.</param>
<returns>Child type or false if it's not a valid widget.</returns>
</member>
<member name="M:Elementor.Widget_Base.get_repeater_setting_key(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Get repeater setting key.
Retrieve the unique setting key for the current repeater item. Used to connect the current element in the
repeater to it's settings model and it's control in the panel.

PHP usage (inside `Widget_Base::render()` method):

$tabs = $this-&gt;get_settings( 'tabs' );
foreach ( $tabs as $index =&gt; $item ) {
$tab_title_setting_key = $this-&gt;get_repeater_setting_key( 'tab_title', 'tabs', $index );
$this-&gt;add_inline_editing_attributes( $tab_title_setting_key, 'none' );
echo '&lt;div ' . $this-&gt;get_render_attribute_string( $tab_title_setting_key ) . '&gt;' . $item['tab_title'] . '&lt;/div&gt;';
}
</summary>
<param name="setting_key" type="string">The current setting key inside the repeater item (e.g. `tab_title`).</param>
<param name="repeater_key" type="string">The repeater key containing the array of all the items in the repeater (e.g. `tabs`).</param>
<param name="repeater_item_index" type="int">The current item index in the repeater array (e.g. `3`).</param>
<returns>The repeater setting key (e.g. `tabs.3.tab_title`).</returns>
</member>
<member name="M:Elementor.Widget_Base.add_inline_editing_attributes(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Add inline editing attributes.
Define specific area in the element to be editable inline. The element can have several areas, with this method
you can set the area inside the element that can be edited inline. You can also define the type of toolbar the
user will see, whether it will be a basic toolbar or an advanced one.

Note: When you use wysiwyg control use the advanced toolbar, with textarea control use the basic toolbar. Text
control should not have toolbar.

PHP usage (inside `Widget_Base::render()` method):

$this-&gt;add_inline_editing_attributes( 'text', 'advanced' );
echo '&lt;div ' . $this-&gt;get_render_attribute_string( 'text' ) . '&gt;' . $this-&gt;get_settings( 'text' ) . '&lt;/div&gt;';
</summary>
<param name="key" type="string">Element key.</param>
<param name="toolbar" type="string">Optional. Toolbar type. Accepted values are `advanced`, `basic` or `none`. Default is
`basic`.</param>
</member>
<member name="M:Elementor.Widget_Base.add_skin(Elementor.Skin_Base)">
<summary>
Add new skin.
Register new widget skin to allow the user to set custom designs. Must be
called inside the `register_skins()` method.
</summary>
<param name="skin" type="Skin_Base">Skin instance.</param>
</member>
<member name="M:Elementor.Widget_Base.get_skin(Pchp.Core.PhpValue)">
<summary>
Get single skin.
Retrieve a single skin based on skin ID, from all the skin assigned to
the widget. If the skin does not exist or not assigned to the widget,
return false.
</summary>
<param name="skin_id" type="string">Skin ID.</param>
<returns>Single skin, or false.</returns>
</member>
<member name="M:Elementor.Widget_Base.get_current_skin_id">
<summary>
Get current skin ID.
Retrieve the ID of the current skin.
</summary>
<returns>Current skin.</returns>
</member>
<member name="M:Elementor.Widget_Base.get_current_skin">
<summary>
Get current skin.
Retrieve the current skin, or if non exist return false.
</summary>
<returns>Current skin or false.</returns>
</member>
<member name="M:Elementor.Widget_Base.remove_skin(Pchp.Core.PhpValue)">
<summary>
Remove widget skin.
Unregister an existing skin and remove it from the widget.
</summary>
<param name="skin_id" type="string">Skin ID.</param>
<returns>Whether the skin was removed successfully from the widget.</returns>
</member>
<member name="M:Elementor.Widget_Base.get_skins">
<summary>
Get widget skins.
Retrieve all the skin assigned to the widget.
</summary>
</member>
<member name="M:Elementor.Widget_Base.get_group_name">
<summary>
Get group name.
Some widgets need to use group names, this method allows you to create them.
By default it retrieves the regular name.
</summary>
<returns>Unique name.</returns>
</member>
<member name="M:Elementor.Widget_Base.get_inline_css_depends">
<summary>
Get Inline CSS dependencies.
Retrieve a list of inline CSS dependencies that the element requires.
</summary>
<returns>array.</returns>
</member>
<member name="M:Elementor.Widget_Base.deprecated_notice(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<param name="plugin_title" type="string">Plugin's title</param>
<param name="since" type="string">Plugin version widget was deprecated</param>
<param name="last" type="string">Plugin version in which the widget will be removed</param>
<param name="replacement" type="string">Widget replacement</param>
</member>
<member name="M:Elementor.Beta_Testers.get_beta_version">
<summary>
Get beta version.
Retrieve Elementor beta version from wp.org plugin repository.
</summary>
<returns>Beta version or false.</returns>
</member>
<member name="M:Elementor.Beta_Testers.check_version(Pchp.Core.PhpValue)">
<summary>
Check version.
Checks whether a beta version exist, and retrieve the version data.

Fired by `pre_set_site_transient_update_plugins` filter, before WordPress
runs the plugin update checker.
</summary>
<param name="transient" type="array">Plugin version data.</param>
<returns>Plugin version data.</returns>
</member>
<member name="M:Elementor.Beta_Testers.__construct">
<summary>
Beta testers constructor.
Initializing Elementor beta testers.
</summary>
</member>
<member name="M:Elementor.Compatibility.register_actions(Pchp.Core.Context)">
<summary>
Register actions.
Run Elementor compatibility with external plugins using custom filters and
actions.
</summary>
</member>
<member name="M:Elementor.Compatibility.add_new_button_to_gutenberg(Pchp.Core.Context)">
<summary>
Add new button to gutenberg.
Insert new "Elementor" button to the gutenberg editor to create new post
using Elementor page builder.
</summary>
</member>
<member name="M:Elementor.Compatibility.init(Pchp.Core.Context)">
<summary>
Init.
Initialize Elementor compatibility with external plugins.

Fired by `init` action.
</summary>
</member>
<member name="M:Elementor.Compatibility.polylang_compatibility(Pchp.Core.Context)">
<summary>
Polylang compatibility.
Fix Polylang compatibility with Elementor.
</summary>
</member>
<member name="M:Elementor.Compatibility.save_polylang_meta(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Save polylang meta.
Copy elementor data while polylang creates a translation copy.

Fired by `pll_copy_post_metas` filter.
</summary>
<param name="keys" type="array">List of custom fields names.</param>
<param name="sync" type="bool">True if it is synchronization, false if it is a copy.</param>
<param name="from" type="int">ID of the post from which we copy information.</param>
<param name="to" type="int">ID of the post to which we paste information.</param>
<returns>List of custom fields names.</returns>
</member>
<member name="M:Elementor.Compatibility.on_wp_import_post_meta(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Process post meta before WP importer.
Normalize Elementor post meta on import, We need the `wp_slash` in order
to avoid the unslashing during the `add_post_meta`.

Fired by `wp_import_post_meta` filter.
</summary>
<param name="post_meta" type="array">Post meta.</param>
<returns>Updated post meta.</returns>
</member>
<member name="M:Elementor.Compatibility.is_wp_importer_before_0_7(Pchp.Core.Context)">
<summary>
Is WP Importer Before 0.7
Checks if WP Importer is installed, and whether its version is older than 0.7.
</summary>
</member>
<member name="M:Elementor.Compatibility.on_wxr_importer_pre_process_post_meta(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Process post meta before WXR importer.
Normalize Elementor post meta on import with the new WP_importer, We need
the `wp_slash` in order to avoid the unslashing during the `add_post_meta`.

Fired by `wxr_importer.pre_process.post_meta` filter.
</summary>
<param name="post_meta" type="array">Post meta.</param>
<returns>Updated post meta.</returns>
</member>
<member name="M:Elementor.Conditions.compare(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Compare conditions.
Whether the two values comply the comparison operator.
</summary>
<param name="left_value" type="mixed">First value to compare.</param>
<param name="right_value" type="mixed">Second value to compare.</param>
<param name="operator" type="string">Comparison operator.</param>
<returns>Whether the two values complies the comparison operator.</returns>
</member>
<member name="M:Elementor.Conditions.check(Pchp.Core.Context,Pchp.Core.PhpArray,Pchp.Core.PhpArray)">
<summary>
Check conditions.
Whether the comparison conditions comply.
</summary>
<param name="conditions" type="array">The conditions to check.</param>
<param name="comparison" type="array">The comparison parameter.</param>
<returns>Whether the comparison conditions comply.</returns>
</member>
<member name="M:Elementor.Control_Animation.get_type">
<summary>
Get control type.
Retrieve the animation control type.
</summary>
<returns>Control type.</returns>
</member>
<member name="M:Elementor.Control_Animation.get_default_settings">
<summary>
Retrieve default control settings.
Get the default settings of the control. Used to return the default
settings while initializing the control.
</summary>
<returns>Control default settings.</returns>
</member>
<member name="M:Elementor.Control_Animation.get_animations(Pchp.Core.Context)">
<summary>
Get animations list.
Retrieve the list of all the available animations.
</summary>
<returns>Control type.</returns>
</member>
<member name="M:Elementor.Control_Animation.content_template">
<summary>
Render animations control template.
Used to generate the control HTML in the editor using Underscore JS
template. The variables for the class are available using `data` JS
object.
</summary>
</member>
<member name="M:Elementor.Base_Data_Control.get_default_value">
<summary>
Get data control default value.
Retrieve the default value of the data control. Used to return the default
values while initializing the data control.
</summary>
<returns>Control default value.</returns>
</member>
<member name="M:Elementor.Base_Data_Control.get_value(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Get data control value.
Retrieve the value of the data control from a specific Controls_Stack settings.
</summary>
<param name="control" type="array">Control</param>
<param name="settings" type="array">Element settings</param>
<returns>Control values.</returns>
</member>
<member name="M:Elementor.Base_Data_Control.parse_tags(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Parse dynamic tags.
Iterates through all the controls and renders all the dynamic tags.
</summary>
<param name="dynamic_value" type="string">The dynamic tag text.</param>
<param name="dynamic_settings" type="array">The dynamic tag settings.</param>
<returns>A string or an array of strings with the
return value from each tag callback function.</returns>
</member>
<member name="M:Elementor.Base_Data_Control.get_style_value(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpArray)">
<summary>
Get data control style value.
Retrieve the style of the control. Used when adding CSS rules to the control
while extracting CSS from the `selectors` data argument.
</summary>
<param name="css_property" type="string">CSS property.</param>
<param name="control_value" type="string">Control value.</param>
<param name="control_data" type="array">Control Data.</param>
<returns>Control style value.</returns>
</member>
<member name="M:Elementor.Base_Data_Control.get_control_uid(Pchp.Core.PhpValue)">
<summary>
Get data control unique ID.
Retrieve the unique ID of the control. Used to set a uniq CSS ID for the
element.
</summary>
<param name="input_type" type="string">Input type. Default is 'default'.</param>
<returns>Unique ID.</returns>
</member>
<member name="M:Elementor.Base_Data_Control.print_control_uid(Pchp.Core.PhpValue)">
<summary>
Safe Print data control unique ID.
Retrieve the unique ID of the control. Used to set a unique CSS ID for the
element.
</summary>
<param name="input_type" type="string">Input type. Default is 'default'.</param>
</member>
<member name="M:Elementor.Base_Icon_Font.get_type">
<summary>
Get Icon type.
Retrieve the icon type.
</summary>
</member>
<member name="M:Elementor.Base_Icon_Font.enqueue">
<summary>
Enqueue Icon scripts and styles.
Used to register and enqueue custom scripts and styles used by the Icon.
</summary>
</member>
<member name="M:Elementor.Base_Icon_Font.get_css_prefix">
<summary>
get_css_prefix
</summary>
</member>
<member name="M:Elementor.Control_Base_Multiple.get_default_value">
<summary>
Get multiple control default value.
Retrieve the default value of the multiple control. Used to return the default
values while initializing the multiple control.
</summary>
<returns>Control default value.</returns>
</member>
<member name="M:Elementor.Control_Base_Multiple.get_value(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Get multiple control value.
Retrieve the value of the multiple control from a specific Controls_Stack settings.
</summary>
<param name="control" type="array">Control</param>
<param name="settings" type="array">Settings</param>
<returns>Control values.</returns>
</member>
<member name="M:Elementor.Control_Base_Multiple.get_style_value(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpArray)">
<summary>
Get multiple control style value.
Retrieve the style of the control. Used when adding CSS rules to the control
while extracting CSS from the `selectors` data argument.
</summary>
<param name="css_property" type="string">CSS property.</param>
<param name="control_value" type="array">Control value.</param>
<param name="control_data" type="array">Control Data.</param>
<returns>Control style value.</returns>
</member>
<member name="M:Elementor.Base_UI_Control.get_features(Pchp.Core.Context)">
<summary>
Get features.
Retrieve the list of all the available features.
</summary>
<returns>Features array.</returns>
</member>
<member name="M:Elementor.Control_Base_Units.get_default_value">
<summary>
Get units control default value.
Retrieve the default value of the units control. Used to return the default
values while initializing the units control.
</summary>
<returns>Control default value.</returns>
</member>
<member name="M:Elementor.Control_Base_Units.get_default_settings">
<summary>
Get units control default settings.
Retrieve the default settings of the units control. Used to return the default
settings while initializing the units control.
</summary>
<returns>Control default settings.</returns>
</member>
<member name="M:Elementor.Control_Base_Units.print_units_template">
<summary>
Print units control settings.
Used to generate the units control template in the editor.
</summary>
</member>
<member name="M:Elementor.Base_Control.get_features(Pchp.Core.Context)">
<summary>
Get features.
Retrieve the list of all the available features. Currently Elementor uses only
the `UI` feature.
</summary>
<returns>Features array.</returns>
</member>
<member name="M:Elementor.Base_Control.get_type">
<summary>
Get control type.
Retrieve the control type.
</summary>
</member>
<member name="M:Elementor.Base_Control.__construct">
<summary>
Control base constructor.
Initializing the control base class.
</summary>
</member>
<member name="M:Elementor.Base_Control.enqueue">
<summary>
Enqueue control scripts and styles.
Used to register and enqueue custom scripts and styles used by the control.
</summary>
</member>
<member name="M:Elementor.Base_Control.content_template">
<summary>
Control content template.
Used to generate the control HTML in the editor using Underscore JS
template. The variables for the class are available using `data` JS
object.

Note that the content template is wrapped by Base_Control::print_template().
</summary>
</member>
<member name="M:Elementor.Base_Control.print_template">
<summary>
Print control template.
Used to generate the control HTML in the editor using Underscore JS
template. The variables for the class are available using `data` JS
object.
</summary>
</member>
<member name="M:Elementor.Base_Control.get_default_settings">
<summary>
Get default control settings.
Retrieve the default settings of the control. Used to return the default
settings while initializing the control.
</summary>
<returns>Control default settings.</returns>
</member>
<member name="M:Elementor.Control_Box_Shadow.get_type">
<summary>
Get box shadow control type.
Retrieve the control type, in this case `box_shadow`.
</summary>
<returns>Control type.</returns>
</member>
<member name="M:Elementor.Control_Box_Shadow.get_default_value">
<summary>
Get box shadow control default value.
Retrieve the default value of the box shadow control. Used to return the
default values while initializing the box shadow control.
</summary>
<returns>Control default value.</returns>
</member>
<member name="M:Elementor.Control_Box_Shadow.get_sliders">
<summary>
Get box shadow control sliders.
Retrieve the sliders of the box shadow control. Sliders are used while
rendering the control output in the editor.
</summary>
<returns>Control sliders.</returns>
</member>
<member name="M:Elementor.Control_Box_Shadow.content_template">
<summary>
Render box shadow control output in the editor.
Used to generate the control HTML in the editor using Underscore JS
template. The variables for the class are available using `data` JS
object.
</summary>
</member>
<member name="M:Elementor.Control_Button.get_type">
<summary>
Get button control type.
Retrieve the control type, in this case `button`.
</summary>
<returns>Control type.</returns>
</member>
<member name="M:Elementor.Control_Button.get_default_settings">
<summary>
Get button control default settings.
Retrieve the default settings of the button control. Used to
return the default settings while initializing the button
control.
</summary>
<returns>Control default settings.</returns>
</member>
<member name="M:Elementor.Control_Button.content_template">
<summary>
Render button control output in the editor.
Used to generate the control HTML in the editor using Underscore JS
template. The variables for the class are available using `data` JS
object.
</summary>
</member>
<member name="M:Elementor.Control_Choose.get_type">
<summary>
Get choose control type.
Retrieve the control type, in this case `choose`.
</summary>
<returns>Control type.</returns>
</member>
<member name="M:Elementor.Control_Choose.content_template">
<summary>
Render choose control output in the editor.
Used to generate the control HTML in the editor using Underscore JS
template. The variables for the class are available using `data` JS
object.
</summary>
</member>
<member name="M:Elementor.Control_Choose.get_default_settings">
<summary>
Get choose control default settings.
Retrieve the default settings of the choose control. Used to return the
default settings while initializing the choose control.
</summary>
<returns>Control default settings.</returns>
</member>
<member name="M:Elementor.Control_Code.get_type">
<summary>
Get code control type.
Retrieve the control type, in this case `code`.
</summary>
<returns>Control type.</returns>
</member>
<member name="M:Elementor.Control_Code.get_default_settings">
<summary>
Get code control default settings.
Retrieve the default settings of the code control. Used to return the default
settings while initializing the code control.
</summary>
<returns>Control default settings.</returns>
</member>
<member name="M:Elementor.Control_Code.content_template">
<summary>
Render code control output in the editor.
Used to generate the control HTML in the editor using Underscore JS
template. The variables for the class are available using `data` JS
object.
</summary>
</member>
<member name="M:Elementor.Control_Color.get_type">
<summary>
Get color control type.
Retrieve the control type, in this case `color`.
</summary>
<returns>Control type.</returns>
</member>
<member name="M:Elementor.Control_Color.content_template">
<summary>
Render color control output in the editor.
Used to generate the control HTML in the editor using Underscore JS
template. The variables for the class are available using `data` JS
object.
</summary>
</member>
<member name="M:Elementor.Control_Color.get_default_settings">
<summary>
Get color control default settings.
Retrieve the default settings of the color control. Used to return the default
settings while initializing the color control.
</summary>
<returns>Control default settings.</returns>
</member>
<member name="M:Elementor.Control_Date_Time.get_type">
<summary>
Get date time control type.
Retrieve the control type, in this case `date_time`.
</summary>
<returns>Control type.</returns>
</member>
<member name="M:Elementor.Control_Date_Time.get_default_settings">
<summary>
Get date time control default settings.
Retrieve the default settings of the date time control. Used to return the
default settings while initializing the date time control.
</summary>
<returns>Control default settings.</returns>
</member>
<member name="M:Elementor.Control_Date_Time.content_template">
<summary>
Render date time control output in the editor.
Used to generate the control HTML in the editor using Underscore JS
template. The variables for the class are available using `data` JS
object.
</summary>
</member>
<member name="M:Elementor.Control_Deprecated_Notice.get_type">
<summary>
Get deprecated-notice control type.
Retrieve the control type, in this case `deprecated_notice`.
</summary>
<returns>Control type.</returns>
</member>
<member name="M:Elementor.Control_Deprecated_Notice.content_template">
<summary>
Render deprecated notice control output in the editor.
Used to generate the control HTML in the editor using Underscore JS
template. The variables for the class are available using `data` JS
object.
</summary>
</member>
<member name="M:Elementor.Control_Deprecated_Notice.get_default_settings">
<summary>
Get deprecated-notice control default settings.
Retrieve the default settings of the deprecated notice control. Used to return the
default settings while initializing the deprecated notice control.
</summary>
<returns>Control default settings.</returns>
</member>
<member name="M:Elementor.Control_Dimensions.get_type">
<summary>
Get dimensions control type.
Retrieve the control type, in this case `dimensions`.
</summary>
<returns>Control type.</returns>
</member>
<member name="M:Elementor.Control_Dimensions.get_default_value">
<summary>
Get dimensions control default values.
Retrieve the default value of the dimensions control. Used to return the
default values while initializing the dimensions control.
</summary>
<returns>Control default value.</returns>
</member>
<member name="M:Elementor.Control_Dimensions.get_default_settings">
<summary>
Get dimensions control default settings.
Retrieve the default settings of the dimensions control. Used to return the
default settings while initializing the dimensions control.
</summary>
<returns>Control default settings.</returns>
</member>
<member name="M:Elementor.Control_Dimensions.content_template">
<summary>
Render dimensions control output in the editor.
Used to generate the control HTML in the editor using Underscore JS
template. The variables for the class are available using `data` JS
object.
</summary>
</member>
<member name="M:Elementor.Control_Divider.get_type">
<summary>
Get divider control type.
Retrieve the control type, in this case `divider`.
</summary>
<returns>Control type.</returns>
</member>
<member name="M:Elementor.Control_Divider.get_default_settings">
<summary>
Get divider control default settings.
Retrieve the default settings of the divider control. Used to
return the default settings while initializing the divider
control.
</summary>
<returns>Control default settings.</returns>
</member>
<member name="M:Elementor.Control_Divider.content_template">
<summary>
Render divider control output in the editor.
Used to generate the control HTML in the editor using Underscore JS
template. The variables for the class are available using `data` JS
object.
</summary>
</member>
<member name="M:Elementor.Control_Exit_Animation.get_type">
<summary>
Get control type.
Retrieve the animation control type.
</summary>
<returns>Control type.</returns>
</member>
<member name="M:Elementor.Control_Exit_Animation.get_animations(Pchp.Core.Context)">
<summary>
Get animations list.
Retrieve the list of all the available animations.
</summary>
<returns>Control type.</returns>
</member>
<member name="M:Elementor.Control_Font.get_type">
<summary>
Get font control type.
Retrieve the control type, in this case `font`.
</summary>
<returns>Control type.</returns>
</member>
<member name="M:Elementor.Control_Font.get_default_settings">
<summary>
Get font control default settings.
Retrieve the default settings of the font control. Used to return the default
settings while initializing the font control.
</summary>
<returns>Control default settings.</returns>
</member>
<member name="M:Elementor.Control_Font.content_template">
<summary>
Render font control output in the editor.
Used to generate the control HTML in the editor using Underscore JS
template. The variables for the class are available using `data` JS
object.
</summary>
</member>
<member name="M:Elementor.Control_Gallery.get_type">
<summary>
Get gallery control type.
Retrieve the control type, in this case `gallery`.
</summary>
<returns>Control type.</returns>
</member>
<member name="M:Elementor.Control_Gallery.on_import(Pchp.Core.PhpValue)">
<summary>
Import gallery images.
Used to import gallery control files from external sites while importing
Elementor template JSON file, and replacing the old data.
</summary>
<param name="settings" type="array">Control settings</param>
<returns>Control settings.</returns>
</member>
<member name="M:Elementor.Control_Gallery.content_template">
<summary>
Render gallery control output in the editor.
Used to generate the control HTML in the editor using Underscore JS
template. The variables for the class are available using `data` JS
object.
</summary>
</member>
<member name="M:Elementor.Control_Gallery.get_default_settings">
<summary>
Get gallery control default settings.
Retrieve the default settings of the gallery control. Used to return the
default settings while initializing the gallery control.
</summary>
<returns>Control default settings.</returns>
</member>
<member name="M:Elementor.Control_Gallery.get_default_value">
<summary>
Get gallery control default values.
Retrieve the default value of the gallery control. Used to return the default
values while initializing the gallery control.
</summary>
<returns>Control default value.</returns>
</member>
<member name="M:Elementor.Group_Control_Background.get_type(Pchp.Core.Context)">
<summary>
Get background control type.
Retrieve the control type, in this case `background`.
</summary>
<returns>Control type.</returns>
</member>
<member name="M:Elementor.Group_Control_Background.get_background_types(Pchp.Core.Context)">
<summary>
Get background control types.
Retrieve available background types.
</summary>
<returns>Available background types.</returns>
</member>
<member name="M:Elementor.Group_Control_Background.get_default_background_types(Pchp.Core.Context)">
<summary>
Get Default background types.
Retrieve background control initial types.
</summary>
<returns>Default background types.</returns>
</member>
<member name="M:Elementor.Group_Control_Background.init_fields">
<summary>
Init fields.
Initialize background control fields.
</summary>
<returns>Control fields.</returns>
</member>
<member name="M:Elementor.Group_Control_Background.get_child_default_args">
<summary>
Get child default args.
Retrieve the default arguments for all the child controls for a specific group
control.
</summary>
<returns>Default arguments for all the child controls.</returns>
</member>
<member name="M:Elementor.Group_Control_Background.filter_fields">
<summary>
Filter fields.
Filter which controls to display, using `include`, `exclude`, `condition`
and `of_type` arguments.
</summary>
<returns>Control fields.</returns>
</member>
<member name="M:Elementor.Group_Control_Background.prepare_fields(Pchp.Core.PhpValue)">
<summary>
Prepare fields.
Process background control fields before adding them to `add_control()`.
</summary>
<param name="fields" type="array">Background control fields.</param>
<returns>Processed fields.</returns>
</member>
<member name="M:Elementor.Group_Control_Background.get_default_options">
<summary>
Get default options.
Retrieve the default options of the background control. Used to return the
default options while initializing the background control.
</summary>
<returns>Default background control options.</returns>
</member>
<member name="M:Elementor.Group_Control_Base.get_options(Pchp.Core.PhpValue)">
<summary>
Get options.
Retrieve group control options. If options are not set, it will initialize default options.
</summary>
<param name="option" type="array">Optional. Single option.</param>
<returns>Group control options. If option parameter was not specified, it will
return an array of all the options. If single option specified, it will
return the option value or `null` if option does not exists.</returns>
</member>
<member name="M:Elementor.Group_Control_Base.add_controls(Elementor.Controls_Stack,Pchp.Core.PhpArray,Pchp.Core.PhpArray)">
<summary>
Add new controls to stack.
Register multiple controls to allow the user to set/update data.
</summary>
<param name="element" type="Controls_Stack">The element stack.</param>
<param name="user_args" type="array">The control arguments defined by the user.</param>
<param name="options" type="array">Optional. The element options. Default is
an empty array.</param>
</member>
<member name="M:Elementor.Group_Control_Base.get_args">
<summary>
Get arguments.
Retrieve group control arguments.
</summary>
<returns>Group control arguments.</returns>
</member>
<member name="M:Elementor.Group_Control_Base.get_fields">
<summary>
Get fields.
Retrieve group control fields.
</summary>
<returns>Control fields.</returns>
</member>
<member name="M:Elementor.Group_Control_Base.get_controls_prefix">
<summary>
Get controls prefix.
Retrieve the prefix of the group control, which is `{{ControlName}}_`.
</summary>
<returns>Control prefix.</returns>
</member>
<member name="M:Elementor.Group_Control_Base.get_base_group_classes">
<summary>
Get group control classes.
Retrieve the classes of the group control.
</summary>
<returns>Group control classes.</returns>
</member>
<member name="M:Elementor.Group_Control_Base.init_fields">
<summary>
Init fields.
Initialize group control fields.
</summary>
</member>
<member name="M:Elementor.Group_Control_Base.get_default_options">
<summary>
Get default options.
Retrieve the default options of the group control. Used to return the
default options while initializing the group control.
</summary>
<returns>Default group control options.</returns>
</member>
<member name="M:Elementor.Group_Control_Base.get_child_default_args">
<summary>
Get child default arguments.
Retrieve the default arguments for all the child controls for a specific group
control.
</summary>
<returns>Default arguments for all the child controls.</returns>
</member>
<member name="M:Elementor.Group_Control_Base.filter_fields">
<summary>
Filter fields.
Filter which controls to display, using `include`, `exclude` and the
`condition` arguments.
</summary>
<returns>Control fields.</returns>
</member>
<member name="M:Elementor.Group_Control_Base.add_group_args_to_field(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Add group arguments to field.
Register field arguments to group control.
</summary>
<param name="control_id" type="string">Group control id.</param>
<param name="field_args" type="array">Group control field arguments.</param>
</member>
<member name="M:Elementor.Group_Control_Base.prepare_fields(Pchp.Core.PhpValue)">
<summary>
Prepare fields.
Process group control fields before adding them to `add_control()`.
</summary>
<param name="fields" type="array">Group control fields.</param>
<returns>Processed fields.</returns>
</member>
<member name="M:Elementor.Group_Control_Base.init_options">
<summary>
Init options.
Initializing group control options.
</summary>
</member>
<member name="M:Elementor.Group_Control_Base.init_args(Pchp.Core.PhpValue)">
<summary>
Init arguments.
Initializing group control base class.
</summary>
<param name="args" type="array">Group control settings value.</param>
</member>
<member name="M:Elementor.Group_Control_Base.get_default_args">
<summary>
Get default arguments.
Retrieve the default arguments of the group control. Used to return the
default arguments while initializing the group control.
</summary>
<returns>Control default arguments.</returns>
</member>
<member name="M:Elementor.Group_Control_Base.add_condition_prefix(Pchp.Core.PhpValue)">
<summary>
Add condition prefix.
Used to add the group prefix to controls with conditions, to
distinguish them from other controls with the same name.

This way Elementor can apply condition logic to a specific control in a
group control.
</summary>
<param name="field" type="array">Group control field.</param>
<returns>Group control field.</returns>
</member>
<member name="M:Elementor.Group_Control_Base.handle_selectors(Pchp.Core.PhpValue)">
<summary>
Handle selectors.
Used to process the CSS selector of group control fields. When using
group control, Elementor needs to apply the selector to different fields.
This method handles the process.

In addition, it handles selector values from other fields and process the
css.
</summary>
<param name="selectors" type="array">An array of selectors to process.</param>
<returns>Processed selectors.</returns>
</member>
<member name="M:Elementor.Group_Control_Base.start_popover(Elementor.Controls_Stack)">
<summary>
Start popover.
Starts a group controls popover.
</summary>
<param name="element" type="Controls_Stack">Element.</param>
</member>
<member name="M:Elementor.Group_Control_Border.get_type(Pchp.Core.Context)">
<summary>
Get border control type.
Retrieve the control type, in this case `border`.
</summary>
<returns>Control type.</returns>
</member>
<member name="M:Elementor.Group_Control_Border.init_fields">
<summary>
Init fields.
Initialize border control fields.
</summary>
<returns>Control fields.</returns>
</member>
<member name="M:Elementor.Group_Control_Border.get_default_options">
<summary>
Get default options.
Retrieve the default options of the border control. Used to return the
default options while initializing the border control.
</summary>
<returns>Default border control options.</returns>
</member>
<member name="M:Elementor.Group_Control_Box_Shadow.get_type(Pchp.Core.Context)">
<summary>
Get box shadow control type.
Retrieve the control type, in this case `box-shadow`.
</summary>
<returns>Control type.</returns>
</member>
<member name="M:Elementor.Group_Control_Box_Shadow.init_fields">
<summary>
Init fields.
Initialize box shadow control fields.
</summary>
<returns>Control fields.</returns>
</member>
<member name="M:Elementor.Group_Control_Box_Shadow.get_default_options">
<summary>
Get default options.
Retrieve the default options of the box shadow control. Used to return the
default options while initializing the box shadow control.
</summary>
<returns>Default box shadow control options.</returns>
</member>
<member name="M:Elementor.Group_Control_Css_Filter.get_type(Pchp.Core.Context)">
<summary>
Get CSS filter control type.
Retrieve the control type, in this case `css-filter`.
</summary>
<returns>Control type.</returns>
</member>
<member name="M:Elementor.Group_Control_Css_Filter.init_fields">
<summary>
Init fields.
Initialize CSS filter control fields.
</summary>
<returns>Control fields.</returns>
</member>
<member name="M:Elementor.Group_Control_Css_Filter.get_default_options">
<summary>
Get default options.
Retrieve the default options of the CSS filter control. Used to return the
default options while initializing the CSS filter control.
</summary>
<returns>Default CSS filter control options.</returns>
</member>
<member name="M:Elementor.Group_Control_Image_Size.get_type(Pchp.Core.Context)">
<summary>
Get image size control type.
Retrieve the control type, in this case `image-size`.
</summary>
<returns>Control type.</returns>
</member>
<member name="M:Elementor.Group_Control_Image_Size.get_attachment_image_html(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Get attachment image HTML.
Retrieve the attachment image HTML code.

Note that some widgets use the same key for the media control that allows
the image selection and for the image size control that allows the user
to select the image size, in this case the third parameter should be null
or the same as the second parameter. But when the widget uses different
keys for the media control and the image size control, when calling this
method you should pass the keys.
</summary>
<param name="settings" type="array">Control settings.</param>
<param name="image_size_key" type="string">Optional. Settings key for image size.
Default is `image`.</param>
<param name="image_key" type="string">Optional. Settings key for image. Default
is null. If not defined uses image size key
as the image key.</param>
<returns>Image HTML.</returns>
</member>
<member name="M:Elementor.Group_Control_Image_Size.print_attachment_image_html(Pchp.Core.Context,Pchp.Core.PhpArray,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Safe print attachment image HTML.
</summary>
<param name="settings" type="array">Control settings.</param>
<param name="image_size_key" type="string">Optional. Settings key for image size.
Default is `image`.</param>
<param name="image_key" type="string">Optional. Settings key for image. Default
is null. If not defined uses image size key
as the image key.</param>
</member>
<member name="M:Elementor.Group_Control_Image_Size.get_all_image_sizes(Pchp.Core.Context)">
<summary>
Get all image sizes.
Retrieve available image sizes with data like `width`, `height` and `crop`.
</summary>
<returns>An array of available image sizes.</returns>
</member>
<member name="M:Elementor.Group_Control_Image_Size.get_attachment_image_src(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpArray)">
<summary>
Get attachment image src.
Retrieve the attachment image source URL.
</summary>
<param name="attachment_id" type="string">The attachment ID.</param>
<param name="image_size_key" type="string">Settings key for image size.</param>
<param name="settings" type="array">Control settings.</param>
<returns>Attachment image source URL.</returns>
</member>
<member name="M:Elementor.Group_Control_Image_Size.get_child_default_args">
<summary>
Get child default arguments.
Retrieve the default arguments for all the child controls for a specific group
control.
</summary>
<returns>Default arguments for all the child controls.</returns>
</member>
<member name="M:Elementor.Group_Control_Image_Size.init_fields">
<summary>
Init fields.
Initialize image size control fields.
</summary>
<returns>Control fields.</returns>
</member>
<member name="M:Elementor.Group_Control_Image_Size.prepare_fields(Pchp.Core.PhpValue)">
<summary>
Prepare fields.
Process image size control fields before adding them to `add_control()`.
</summary>
<param name="fields" type="array">Image size control fields.</param>
<returns>Processed fields.</returns>
</member>
<member name="M:Elementor.Group_Control_Image_Size.get_image_sizes">
<summary>
Get image sizes.
Retrieve available image sizes after filtering `include` and `exclude` arguments.
</summary>
<returns>Filtered image sizes.</returns>
</member>
<member name="M:Elementor.Group_Control_Image_Size.get_default_options">
<summary>
Get default options.
Retrieve the default options of the image size control. Used to return the
default options while initializing the image size control.
</summary>
<returns>Default image size control options.</returns>
</member>
<member name="M:Elementor.Group_Control_Text_Shadow.get_type(Pchp.Core.Context)">
<summary>
Get text shadow control type.
Retrieve the control type, in this case `text-shadow`.
</summary>
<returns>Control type.</returns>
</member>
<member name="M:Elementor.Group_Control_Text_Shadow.init_fields">
<summary>
Init fields.
Initialize text shadow control fields.
</summary>
<returns>Control fields.</returns>
</member>
<member name="M:Elementor.Group_Control_Text_Shadow.get_default_options">
<summary>
Get default options.
Retrieve the default options of the text shadow control. Used to return the
default options while initializing the text shadow control.
</summary>
<returns>Default text shadow control options.</returns>
</member>
<member name="M:Elementor.Group_Control_Typography.get_scheme_fields_keys(Pchp.Core.Context)">
<summary>
Get scheme fields keys.
Retrieve all the available typography control scheme fields keys.
</summary>
<returns>Scheme fields keys.</returns>
</member>
<member name="M:Elementor.Group_Control_Typography.get_type(Pchp.Core.Context)">
<summary>
Get typography control type.
Retrieve the control type, in this case `typography`.
</summary>
<returns>Control type.</returns>
</member>
<member name="M:Elementor.Group_Control_Typography.init_fields">
<summary>
Init fields.
Initialize typography control fields.
</summary>
<returns>Control fields.</returns>
</member>
<member name="M:Elementor.Group_Control_Typography.prepare_fields(Pchp.Core.PhpValue)">
<summary>
Prepare fields.
Process typography control fields before adding them to `add_control()`.
</summary>
<param name="fields" type="array">Typography control fields.</param>
<returns>Processed fields.</returns>
</member>
<member name="M:Elementor.Group_Control_Typography.add_group_args_to_field(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Add group arguments to field.
Register field arguments to typography control.
</summary>
<param name="control_id" type="string">Typography control id.</param>
<param name="field_args" type="array">Typography control field arguments.</param>
<returns>Field arguments.</returns>
</member>
<member name="M:Elementor.Group_Control_Typography.get_default_options">
<summary>
Get default options.
Retrieve the default options of the typography control. Used to return the
default options while initializing the typography control.
</summary>
<returns>Default typography control options.</returns>
</member>
<member name="M:Elementor.Control_Heading.get_type">
<summary>
Get heading control type.
Retrieve the control type, in this case `heading`.
</summary>
<returns>Control type.</returns>
</member>
<member name="M:Elementor.Control_Heading.get_default_settings">
<summary>
Get heading control default settings.
Retrieve the default settings of the heading control. Used to return the
default settings while initializing the heading control.
</summary>
<returns>Control default settings.</returns>
</member>
<member name="M:Elementor.Control_Heading.content_template">
<summary>
Render heading control output in the editor.
Used to generate the control HTML in the editor using Underscore JS
template. The variables for the class are available using `data` JS
object.
</summary>
</member>
<member name="M:Elementor.Control_Hidden.get_type">
<summary>
Get hidden control type.
Retrieve the control type, in this case `hidden`.
</summary>
<returns>Control type.</returns>
</member>
<member name="M:Elementor.Control_Hidden.content_template">
<summary>
Render hidden control output in the editor.
Used to generate the control HTML in the editor using Underscore JS
template. The variables for the class are available using `data` JS
object.
</summary>
</member>
<member name="M:Elementor.Control_Hover_Animation.get_type">
<summary>
Get hover animation control type.
Retrieve the control type, in this case `hover_animation`.
</summary>
<returns>Control type.</returns>
</member>
<member name="M:Elementor.Control_Hover_Animation.get_animations(Pchp.Core.Context)">
<summary>
Get animations.
Retrieve the available hover animation effects.
</summary>
<returns>Available hover animation.</returns>
</member>
<member name="M:Elementor.Control_Hover_Animation.content_template">
<summary>
Render hover animation control output in the editor.
Used to generate the control HTML in the editor using Underscore JS
template. The variables for the class are available using `data` JS
object.
</summary>
</member>
<member name="M:Elementor.Control_Hover_Animation.get_default_settings">
<summary>
Get hover animation control default settings.
Retrieve the default settings of the hover animation control. Used to return
the default settings while initializing the hover animation control.
</summary>
<returns>Control default settings.</returns>
</member>
<member name="M:Elementor.Control_Icon.get_type">
<summary>
Get icon control type.
Retrieve the control type, in this case `icon`.
</summary>
<returns>Control type.</returns>
</member>
<member name="M:Elementor.Control_Icon.get_icons(Pchp.Core.Context)">
<summary>
Get icons.
Retrieve all the available icons.
</summary>
<returns>Available icons.</returns>
</member>
<member name="M:Elementor.Control_Icon.get_default_settings">
<summary>
Get icons control default settings.
Retrieve the default settings of the icons control. Used to return the default
settings while initializing the icons control.
</summary>
<returns>Control default settings.</returns>
</member>
<member name="M:Elementor.Control_Icon.content_template">
<summary>
Render icons control output in the editor.
Used to generate the control HTML in the editor using Underscore JS
template. The variables for the class are available using `data` JS
object.
</summary>
</member>
<member name="M:Elementor.Control_Icons.get_type">
<summary>
Get media control type.
Retrieve the control type, in this case `media`.
</summary>
<returns>Control type.</returns>
</member>
<member name="M:Elementor.Control_Icons.get_default_value">
<summary>
Get Icons control default values.
Retrieve the default value of the Icons control. Used to return the default
values while initializing the Icons control.
</summary>
<returns>Control default value.</returns>
</member>
<member name="M:Elementor.Control_Icons.content_template">
<summary>
Render Icons control output in the editor.
Used to generate the control HTML in the editor using Underscore JS
template. The variables for the class are available using `data` JS
object.
</summary>
</member>
<member name="M:Elementor.Control_Icons.get_default_settings">
<summary>
Get Icons control default settings.
Retrieve the default settings of the Icons control. Used to return the default
settings while initializing the Icons control.
</summary>
<returns>Control default settings.</returns>
</member>
<member name="M:Elementor.Control_Image_Dimensions.get_type">
<summary>
Get image dimensions control type.
Retrieve the control type, in this case `image_dimensions`.
</summary>
<returns>Control type.</returns>
</member>
<member name="M:Elementor.Control_Image_Dimensions.get_default_value">
<summary>
Get image dimensions control default values.
Retrieve the default value of the image dimensions control. Used to return the
default values while initializing the image dimensions control.
</summary>
<returns>Control default value.</returns>
</member>
<member name="M:Elementor.Control_Image_Dimensions.get_default_settings">
<summary>
Get image dimensions control default settings.
Retrieve the default settings of the image dimensions control. Used to return
the default settings while initializing the image dimensions control.
</summary>
<returns>Control default settings.</returns>
</member>
<member name="M:Elementor.Control_Image_Dimensions.content_template">
<summary>
Render image dimensions control output in the editor.
Used to generate the control HTML in the editor using Underscore JS
template. The variables for the class are available using `data` JS
object.
</summary>
</member>
<member name="M:Elementor.Control_Image_Dimensions.is_image_editor_supports">
<summary>
Image editor support.
Used to determine whether the editor supports a given image mime-type.
</summary>
<returns>Whether the editor supports the given mime-type.</returns>
</member>
<member name="M:Elementor.Control_Media.get_type">
<summary>
Get media control type.
Retrieve the control type, in this case `media`.
</summary>
<returns>Control type.</returns>
</member>
<member name="M:Elementor.Control_Media.get_default_value">
<summary>
Get media control default values.
Retrieve the default value of the media control. Used to return the default
values while initializing the media control.
</summary>
<returns>Control default value.</returns>
</member>
<member name="M:Elementor.Control_Media.on_import(Pchp.Core.PhpValue)">
<summary>
Import media images.
Used to import media control files from external sites while importing
Elementor template JSON file, and replacing the old data.
</summary>
<param name="settings" type="array">Control settings</param>
<returns>Control settings.</returns>
</member>
<member name="M:Elementor.Control_Media.support_svg_and_json_import(Pchp.Core.PhpValue)">
<summary>
Support SVG and JSON Import
Called by the 'upload_mimes' filter. Adds SVG and JSON mime types to the list of WordPress' allowed mime types.
</summary>
</member>
<member name="M:Elementor.Control_Media.enqueue">
<summary>
Enqueue media control scripts and styles.
Used to register and enqueue custom scripts and styles used by the media
control.
</summary>
</member>
<member name="M:Elementor.Control_Media.content_template">
<summary>
Render media control output in the editor.
Used to generate the control HTML in the editor using Underscore JS
template. The variables for the class are available using `data` JS
object.
</summary>
</member>
<member name="M:Elementor.Control_Media.get_default_settings">
<summary>
Get media control default settings.
Retrieve the default settings of the media control. Used to return the default
settings while initializing the media control.
</summary>
<returns>Control default settings.</returns>
</member>
<member name="M:Elementor.Control_Media.get_image_title(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Get media control image title.
Retrieve the `title` of the image selected by the media control.
</summary>
<param name="attachment" type="array">Media attachment.</param>
<returns>Image title.</returns>
</member>
<member name="M:Elementor.Control_Media.get_image_alt(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Get media control image alt.
Retrieve the `alt` value of the image selected by the media control.
</summary>
<param name="instance" type="array">Media attachment.</param>
<returns>Image alt.</returns>
</member>
<member name="M:Elementor.Control_Number.get_type">
<summary>
Get number control type.
Retrieve the control type, in this case `number`.
</summary>
<returns>Control type.</returns>
</member>
<member name="M:Elementor.Control_Number.get_default_settings">
<summary>
Get number control default settings.
Retrieve the default settings of the number control. Used to return the
default settings while initializing the number control.
</summary>
<returns>Control default settings.</returns>
</member>
<member name="M:Elementor.Control_Number.content_template">
<summary>
Render number control output in the editor.
Used to generate the control HTML in the editor using Underscore JS
template. The variables for the class are available using `data` JS
object.
</summary>
</member>
<member name="M:Elementor.Control_Popover_Toggle.get_type">
<summary>
Get popover toggle control type.
Retrieve the control type, in this case `popover_toggle`.
</summary>
<returns>Control type.</returns>
</member>
<member name="M:Elementor.Control_Popover_Toggle.get_default_settings">
<summary>
Get popover toggle control default settings.
Retrieve the default settings of the popover toggle control. Used to
return the default settings while initializing the popover toggle
control.
</summary>
<returns>Control default settings.</returns>
</member>
<member name="M:Elementor.Control_Popover_Toggle.content_template">
<summary>
Render popover toggle control output in the editor.
Used to generate the control HTML in the editor using Underscore JS
template. The variables for the class are available using `data` JS
object.
</summary>
</member>
<member name="M:Elementor.Control_Raw_Html.get_type">
<summary>
Get raw html control type.
Retrieve the control type, in this case `raw_html`.
</summary>
<returns>Control type.</returns>
</member>
<member name="M:Elementor.Control_Raw_Html.content_template">
<summary>
Render raw html control output in the editor.
Used to generate the control HTML in the editor using Underscore JS
template. The variables for the class are available using `data` JS
object.
</summary>
</member>
<member name="M:Elementor.Control_Raw_Html.get_default_settings">
<summary>
Get raw html control default settings.
Retrieve the default settings of the raw html control. Used to return the
default settings while initializing the raw html control.
</summary>
<returns>Control default settings.</returns>
</member>
<member name="M:Elementor.Control_Repeater.get_type">
<summary>
Get repeater control type.
Retrieve the control type, in this case `repeater`.
</summary>
<returns>Control type.</returns>
</member>
<member name="M:Elementor.Control_Repeater.get_default_value">
<summary>
Get repeater control default value.
Retrieve the default value of the data control. Used to return the default
values while initializing the repeater control.
</summary>
<returns>Control default value.</returns>
</member>
<member name="M:Elementor.Control_Repeater.get_default_settings">
<summary>
Get repeater control default settings.
Retrieve the default settings of the repeater control. Used to return the
default settings while initializing the repeater control.
</summary>
<returns>Control default settings.</returns>
</member>
<member name="M:Elementor.Control_Repeater.get_value(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Get repeater control value.
Retrieve the value of the repeater control from a specific Controls_Stack.
</summary>
<param name="control" type="array">Control</param>
<param name="settings" type="array">Controls_Stack settings</param>
<returns>Control values.</returns>
</member>
<member name="M:Elementor.Control_Repeater.on_import(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Import repeater.
Used as a wrapper method for inner controls while importing Elementor
template JSON file, and replacing the old data.
</summary>
<param name="settings" type="array">Control settings.</param>
<param name="control_data" type="array">Optional. Control data. Default is an empty array.</param>
<returns>Control settings.</returns>
</member>
<member name="M:Elementor.Control_Repeater.content_template">
<summary>
Render repeater control output in the editor.
Used to generate the control HTML in the editor using Underscore JS
template. The variables for the class are available using `data` JS
object.
</summary>
</member>
<member name="M:Elementor.Control_Section.get_type">
<summary>
Get section control type.
Retrieve the control type, in this case `section`.
</summary>
<returns>Control type.</returns>
</member>
<member name="M:Elementor.Control_Section.content_template">
<summary>
Render section control output in the editor.
Used to generate the control HTML in the editor using Underscore JS
template. The variables for the class are available using `data` JS
object.
</summary>
</member>
<member name="M:Elementor.Control_Section.get_default_settings">
<summary>
Get repeater control default settings.
Retrieve the default settings of the repeater control. Used to return the
default settings while initializing the repeater control.
</summary>
<returns>Control default settings.</returns>
</member>
<member name="M:Elementor.Control_Select.get_type">
<summary>
Get select control type.
Retrieve the control type, in this case `select`.
</summary>
<returns>Control type.</returns>
</member>
<member name="M:Elementor.Control_Select.get_default_settings">
<summary>
Get select control default settings.
Retrieve the default settings of the select control. Used to return the
default settings while initializing the select control.
</summary>
<returns>Control default settings.</returns>
</member>
<member name="M:Elementor.Control_Select.content_template">
<summary>
Render select control output in the editor.
Used to generate the control HTML in the editor using Underscore JS
template. The variables for the class are available using `data` JS
object.
</summary>
</member>
<member name="M:Elementor.Control_Select2.get_type">
<summary>
Get select2 control type.
Retrieve the control type, in this case `select2`.
</summary>
<returns>Control type.</returns>
</member>
<member name="M:Elementor.Control_Select2.get_default_settings">
<summary>
Get select2 control default settings.
Retrieve the default settings of the select2 control. Used to return the
default settings while initializing the select2 control.
</summary>
<returns>Control default settings.</returns>
</member>
<member name="M:Elementor.Control_Select2.content_template">
<summary>
Render select2 control output in the editor.
Used to generate the control HTML in the editor using Underscore JS
template. The variables for the class are available using `data` JS
object.
</summary>
</member>
<member name="M:Elementor.Control_Slider.get_type">
<summary>
Get slider control type.
Retrieve the control type, in this case `slider`.
</summary>
<returns>Control type.</returns>
</member>
<member name="M:Elementor.Control_Slider.get_default_value">
<summary>
Get slider control default values.
Retrieve the default value of the slider control. Used to return the default
values while initializing the slider control.
</summary>
<returns>Control default value.</returns>
</member>
<member name="M:Elementor.Control_Slider.get_default_settings">
<summary>
Get slider control default settings.
Retrieve the default settings of the slider control. Used to return the
default settings while initializing the slider control.
</summary>
<returns>Control default settings.</returns>
</member>
<member name="M:Elementor.Control_Slider.content_template">
<summary>
Render slider control output in the editor.
Used to generate the control HTML in the editor using Underscore JS
template. The variables for the class are available using `data` JS
object.
</summary>
</member>
<member name="M:Elementor.Control_Structure.get_type">
<summary>
Get structure control type.
Retrieve the control type, in this case `structure`.
</summary>
<returns>Control type.</returns>
</member>
<member name="M:Elementor.Control_Structure.content_template">
<summary>
Render structure control output in the editor.
Used to generate the control HTML in the editor using Underscore JS
template. The variables for the class are available using `data` JS
object.
</summary>
</member>
<member name="M:Elementor.Control_Structure.get_default_settings">
<summary>
Get structure control default settings.
Retrieve the default settings of the structure control. Used to return the
default settings while initializing the structure control.
</summary>
<returns>Control default settings.</returns>
</member>
<member name="M:Elementor.Control_Switcher.get_type">
<summary>
Get switcher control type.
Retrieve the control type, in this case `switcher`.
</summary>
<returns>Control type.</returns>
</member>
<member name="M:Elementor.Control_Switcher.content_template">
<summary>
Render switcher control output in the editor.
Used to generate the control HTML in the editor using Underscore JS
template. The variables for the class are available using `data` JS
object.
</summary>
</member>
<member name="M:Elementor.Control_Switcher.get_default_settings">
<summary>
Get switcher control default settings.
Retrieve the default settings of the switcher control. Used to return the
default settings while initializing the switcher control.
</summary>
<returns>Control default settings.</returns>
</member>
<member name="M:Elementor.Control_Tab.get_type">
<summary>
Get tab control type.
Retrieve the control type, in this case `tab`.
</summary>
<returns>Control type.</returns>
</member>
<member name="M:Elementor.Control_Tab.content_template">
<summary>
Render tab control output in the editor.
Used to generate the control HTML in the editor using Underscore JS
template. The variables for the class are available using `data` JS
object.
</summary>
</member>
<member name="M:Elementor.Control_Tab.get_default_settings">
<summary>
Get tab control default settings.
Retrieve the default settings of the tab control. Used to return the
default settings while initializing the tab control.
</summary>
<returns>Control default settings.</returns>
</member>
<member name="M:Elementor.Control_Tabs.get_type">
<summary>
Get tabs control type.
Retrieve the control type, in this case `tabs`.
</summary>
<returns>Control type.</returns>
</member>
<member name="M:Elementor.Control_Tabs.content_template">
<summary>
Render tabs control output in the editor.
Used to generate the control HTML in the editor using Underscore JS
template. The variables for the class are available using `data` JS
object.
</summary>
</member>
<member name="M:Elementor.Control_Tabs.get_default_settings">
<summary>
Get tabs control default settings.
Retrieve the default settings of the tabs control. Used to return the
default settings while initializing the tabs control.
</summary>
<returns>Control default settings.</returns>
</member>
<member name="M:Elementor.Control_Text_Shadow.get_type">
<summary>
Get text shadow control type.
Retrieve the control type, in this case `text_shadow`.
</summary>
<returns>Control type.</returns>
</member>
<member name="M:Elementor.Control_Text_Shadow.get_default_value">
<summary>
Get text shadow control default values.
Retrieve the default value of the text shadow control. Used to return the
default values while initializing the text shadow control.
</summary>
<returns>Control default value.</returns>
</member>
<member name="M:Elementor.Control_Text_Shadow.get_sliders">
<summary>
Get text shadow control sliders.
Retrieve the sliders of the text shadow control. Sliders are used while
rendering the control output in the editor.
</summary>
<returns>Control sliders.</returns>
</member>
<member name="M:Elementor.Control_Text_Shadow.content_template">
<summary>
Render text shadow control output in the editor.
Used to generate the control HTML in the editor using Underscore JS
template. The variables for the class are available using `data` JS
object.
</summary>
</member>
<member name="M:Elementor.Control_Text.get_type">
<summary>
Get text control type.
Retrieve the control type, in this case `text`.
</summary>
<returns>Control type.</returns>
</member>
<member name="M:Elementor.Control_Text.content_template">
<summary>
Render text control output in the editor.
Used to generate the control HTML in the editor using Underscore JS
template. The variables for the class are available using `data` JS
object.
</summary>
</member>
<member name="M:Elementor.Control_Text.get_default_settings">
<summary>
Get text control default settings.
Retrieve the default settings of the text control. Used to return the
default settings while initializing the text control.
</summary>
<returns>Control default settings.</returns>
</member>
<member name="M:Elementor.Control_Textarea.get_type">
<summary>
Get textarea control type.
Retrieve the control type, in this case `textarea`.
</summary>
<returns>Control type.</returns>
</member>
<member name="M:Elementor.Control_Textarea.get_default_settings">
<summary>
Get textarea control default settings.
Retrieve the default settings of the textarea control. Used to return the
default settings while initializing the textarea control.
</summary>
<returns>Control default settings.</returns>
</member>
<member name="M:Elementor.Control_Textarea.content_template">
<summary>
Render textarea control output in the editor.
Used to generate the control HTML in the editor using Underscore JS
template. The variables for the class are available using `data` JS
object.
</summary>
</member>
<member name="M:Elementor.Control_URL.get_type">
<summary>
Get url control type.
Retrieve the control type, in this case `url`.
</summary>
<returns>Control type.</returns>
</member>
<member name="M:Elementor.Control_URL.get_default_value">
<summary>
Get url control default values.
Retrieve the default value of the url control. Used to return the default
values while initializing the url control.
</summary>
<returns>Control default value.</returns>
</member>
<member name="M:Elementor.Control_URL.get_default_settings">
<summary>
Get url control default settings.
Retrieve the default settings of the url control. Used to return the default
settings while initializing the url control.
</summary>
<returns>Control default settings.</returns>
</member>
<member name="M:Elementor.Control_URL.content_template">
<summary>
Render url control output in the editor.
Used to generate the control HTML in the editor using Underscore JS
template. The variables for the class are available using `data` JS
object.
</summary>
</member>
<member name="M:Elementor.Control_WP_Widget.get_type">
<summary>
Get WordPress widget control type.
Retrieve the control type, in this case `wp_widget`.
</summary>
<returns>Control type.</returns>
</member>
<member name="M:Elementor.Control_WP_Widget.get_default_value">
<summary>
Get WordPress widget control default values.
Retrieve the default value of the WordPress widget control. Used to return the
default values while initializing the WordPress widget control.
</summary>
<returns>Control default value.</returns>
</member>
<member name="M:Elementor.Control_WP_Widget.content_template">
<summary>
Render WordPress widget control output in the editor.
Used to generate the control HTML in the editor using Underscore JS
template. The variables for the class are available using `data` JS
object.
</summary>
</member>
<member name="M:Elementor.Control_Wysiwyg.get_type">
<summary>
Get wysiwyg control type.
Retrieve the control type, in this case `wysiwyg`.
</summary>
<returns>Control type.</returns>
</member>
<member name="M:Elementor.Control_Wysiwyg.content_template">
<summary>
Render wysiwyg control output in the editor.
Used to generate the control HTML in the editor using Underscore JS
template. The variables for the class are available using `data` JS
object.
</summary>
</member>
<member name="M:Elementor.Control_Wysiwyg.get_default_settings">
<summary>
Retrieve textarea control default settings.
Get the default settings of the textarea control. Used to return the
default settings while initializing the textarea control.
</summary>
<returns>Control default settings.</returns>
</member>
<member name="M:Elementor.DB.get_builder(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Get builder.
Retrieve editor data from the database.
</summary>
<param name="post_id" type="int">Post ID.</param>
<param name="status" type="string">Optional. Post status. Default is `publish`.</param>
<returns>Editor data.</returns>
</member>
<member name="M:Elementor.DB._get_json_meta(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Get JSON meta.
Retrieve post meta data, and return the JSON decoded data.
</summary>
<param name="post_id" type="int">Post ID.</param>
<param name="key" type="string">The meta key to retrieve.</param>
<returns>Decoded JSON data from post meta.</returns>
</member>
<member name="M:Elementor.DB.set_is_elementor_page(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Is using Elementor.
Set whether the page is using Elementor or not.
</summary>
<param name="post_id" type="int">Post ID.</param>
<param name="is_elementor" type="bool">Optional. Whether the page is elementor page.
Default is true.</param>
</member>
<member name="M:Elementor.DB.render_element_plain_content(Pchp.Core.PhpValue)">
<summary>
Render element plain content.
When saving data in the editor, this method renders recursively the plain
content containing only the content and the HTML. No CSS data.
</summary>
<param name="element_data" type="array">Element data.</param>
</member>
<member name="M:Elementor.DB.save_plain_text(Pchp.Core.PhpValue)">
<summary>
Save plain text.
Retrieves the raw content, removes all kind of unwanted HTML tags and saves
the content as the `post_content` field in the database.
</summary>
<param name="post_id" type="int">Post ID.</param>
</member>
<member name="M:Elementor.DB.iterate_data(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Iterate data.
Accept any type of Elementor data and a callback function. The callback
function runs recursively for each element and his child elements.
</summary>
<param name="data_container" type="array">Any type of elementor data.</param>
<param name="callback" type="callable">A function to iterate data by.</param>
<param name="args" type="array">Array of args pointers for passing parameters in &amp; out of the callback</param>
<returns>Iterated data.</returns>
</member>
<member name="M:Elementor.DB.safe_copy_elementor_meta(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Safely copy Elementor meta.
Make sure the original page was built with Elementor and the post is not
auto-save. Only then copy elementor meta from one post to another using
`copy_elementor_meta()`.
</summary>
<param name="from_post_id" type="int">Original post ID.</param>
<param name="to_post_id" type="int">Target post ID.</param>
</member>
<member name="M:Elementor.DB.copy_elementor_meta(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Copy Elementor meta.
Duplicate the data from one post to another.

Consider using `safe_copy_elementor_meta()` method instead.
</summary>
<param name="from_post_id" type="int">Original post ID.</param>
<param name="to_post_id" type="int">Target post ID.</param>
</member>
<member name="M:Elementor.DB.is_built_with_elementor(Pchp.Core.PhpValue)">
<summary>
Is built with Elementor.
Check whether the post was built with Elementor.
</summary>
<param name="post_id" type="int">Post ID.</param>
<returns>Whether the post was built with Elementor.</returns>
</member>
<member name="M:Elementor.DB.switch_to_post(Pchp.Core.PhpValue)">
<summary>
Switch to post.
Change the global WordPress post to the requested post.
</summary>
<param name="post_id" type="int">Post ID to switch to.</param>
</member>
<member name="M:Elementor.DB.restore_current_post">
<summary>
Restore current post.
Rollback to the previous global post, rolling back from `DB::switch_to_post()`.
</summary>
</member>
<member name="M:Elementor.DB.switch_to_query(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Switch to query.
Change the WordPress query to a new query with the requested
query variables.
</summary>
<param name="query_vars" type="array">New query variables.</param>
<param name="force_global_post" type="bool"></param>
</member>
<member name="M:Elementor.DB.restore_current_query">
<summary>
Restore current query.
Rollback to the previous query, rolling back from `DB::switch_to_query()`.
</summary>
</member>
<member name="M:Elementor.DB.get_plain_text(Pchp.Core.PhpValue)">
<summary>
Get plain text.
Retrieve the post plain text.
</summary>
<param name="post_id" type="int">Post ID.</param>
<returns>Post plain text.</returns>
</member>
<member name="M:Elementor.DB.get_plain_text_from_data(Pchp.Core.PhpValue)">
<summary>
Get plain text from data.
Retrieve the post plain text from any given Elementor data.
</summary>
<param name="data" type="array">Post ID.</param>
<returns>Post plain text.</returns>
</member>
<member name="M:Elementor.Element_Column.get_name">
<summary>
Get column name.
Retrieve the column name.
</summary>
<returns>Column name.</returns>
</member>
<member name="M:Elementor.Element_Column.get_type(Pchp.Core.Context)">
<summary>
Get element type.
Retrieve the element type, in this case `column`.
</summary>
<returns>The type.</returns>
</member>
<member name="M:Elementor.Element_Column.get_title">
<summary>
Get column title.
Retrieve the column title.
</summary>
<returns>Column title.</returns>
</member>
<member name="M:Elementor.Element_Column.get_icon">
<summary>
Get column icon.
Retrieve the column icon.
</summary>
<returns>Column icon.</returns>
</member>
<member name="M:Elementor.Element_Column.get_initial_config">
<summary>
Get initial config.
Retrieve the current section initial configuration.

Adds more configuration on top of the controls list, the tabs assigned to
the control, element name, type, icon and more. This method also adds
section presets.
</summary>
<returns>The initial config.</returns>
</member>
<member name="M:Elementor.Element_Column.register_controls">
<summary>
Register column controls.
Used to add new controls to the column element.
</summary>
</member>
<member name="M:Elementor.Element_Column.content_template">
<summary>
Render column output in the editor.
Used to generate the live preview, using a Backbone JavaScript template.
</summary>
</member>
<member name="M:Elementor.Element_Column.before_render">
<summary>
Before column rendering.
Used to add stuff before the column element.
</summary>
</member>
<member name="M:Elementor.Element_Column.after_render">
<summary>
After column rendering.
Used to add stuff after the column element.
</summary>
</member>
<member name="M:Elementor.Element_Column.add_render_attributes">
<summary>
Add column render attributes.
Used to add attributes to the current column wrapper HTML tag.
</summary>
</member>
<member name="M:Elementor.Element_Column._get_default_child_type(Pchp.Core.PhpArray)">
<summary>
Get default child type.
Retrieve the column child type based on element data.
</summary>
<param name="element_data" type="array">Element ID.</param>
<returns>Column default child type.</returns>
</member>
<member name="M:Elementor.Element_Column.get_html_tag">
<summary>
Get HTML tag.
Retrieve the column element HTML tag.
</summary>
<returns>Column HTML tag.</returns>
</member>
<member name="M:Elementor.Repeater.__construct(Pchp.Core.PhpArray,Pchp.Core.PhpValue)">
<summary>
Repeater constructor.
Initializing Elementor repeater element.
</summary>
<param name="data" type="array">Optional. Element data. Default is an empty array.</param>
<param name="args" type="array|null">Optional. Element default arguments. Default is null.</param>
</member>
<member name="M:Elementor.Repeater.get_name">
<summary>
Get repeater name.
Retrieve the repeater name.
</summary>
<returns>Repeater name.</returns>
</member>
<member name="M:Elementor.Repeater.get_type(Pchp.Core.Context)">
<summary>
Get repeater type.
Retrieve the repeater type.
</summary>
<returns>Repeater type.</returns>
</member>
<member name="M:Elementor.Repeater.add_control(Pchp.Core.PhpValue,Pchp.Core.PhpArray,Pchp.Core.PhpValue)">
<summary>
Add new repeater control to stack.
Register a repeater control to allow the user to set/update data.

This method should be used inside `register_controls()`.
</summary>
<param name="id" type="string">Repeater control ID.</param>
<param name="args" type="array">Repeater control arguments.</param>
<param name="options" type="array">Optional. Repeater control options. Default is an
empty array.</param>
<returns>True if repeater control added, False otherwise.</returns>
</member>
<member name="M:Elementor.Repeater.get_fields">
<summary>
Get repeater fields.
Retrieve the fields from the current repeater control.
</summary>
<returns>Repeater fields.</returns>
</member>
<member name="M:Elementor.Repeater._get_default_child_type(Pchp.Core.PhpArray)">
<summary>
Get default child type.
Retrieve the repeater child type based on element data.

Note that repeater does not support children, therefore it returns false.
</summary>
<param name="element_data" type="array">Element ID.</param>
<returns>Repeater default child type or False if type not found.</returns>
</member>
<member name="M:Elementor.Element_Section.get_type(Pchp.Core.Context)">
<summary>
Get element type.
Retrieve the element type, in this case `section`.
</summary>
<returns>The type.</returns>
</member>
<member name="M:Elementor.Element_Section.get_name">
<summary>
Get section name.
Retrieve the section name.
</summary>
<returns>Section name.</returns>
</member>
<member name="M:Elementor.Element_Section.get_title">
<summary>
Get section title.
Retrieve the section title.
</summary>
<returns>Section title.</returns>
</member>
<member name="M:Elementor.Element_Section.get_icon">
<summary>
Get section icon.
Retrieve the section icon.
</summary>
<returns>Section icon.</returns>
</member>
<member name="M:Elementor.Element_Section.get_presets(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Get presets.
Retrieve a specific preset columns for a given columns count, or a list
of all the preset if no parameters passed.
</summary>
<param name="columns_count" type="int">Optional. Columns count. Default is null.</param>
<param name="preset_index" type="int">Optional. Preset index. Default is null.</param>
<returns>Section presets.</returns>
</member>
<member name="M:Elementor.Element_Section.init_presets(Pchp.Core.Context)">
<summary>
Initialize presets.
Initializing the section presets and set the number of columns the
section can have by default. For example a column can have two columns
50% width each one, or three columns 33.33% each one.

Note that Elementor sections have default section presets but the user
can set custom number of columns and define custom sizes for each column.
</summary>
</member>
<member name="M:Elementor.Element_Section.get_initial_config">
<summary>
Get initial config.
Retrieve the current section initial configuration.

Adds more configuration on top of the controls list, the tabs assigned to
the control, element name, type, icon and more. This method also adds
section presets.
</summary>
<returns>The initial config.</returns>
</member>
<member name="M:Elementor.Element_Section.register_controls">
<summary>
Register section controls.
Used to add new controls to the section element.
</summary>
</member>
<member name="M:Elementor.Element_Section.content_template">
<summary>
Render section output in the editor.
Used to generate the live preview, using a Backbone JavaScript template.
</summary>
</member>
<member name="M:Elementor.Element_Section.before_render">
<summary>
Before section rendering.
Used to add stuff before the section element.
</summary>
</member>
<member name="M:Elementor.Element_Section.after_render">
<summary>
After section rendering.
Used to add stuff after the section element.
</summary>
</member>
<member name="M:Elementor.Element_Section.add_render_attributes">
<summary>
Add section render attributes.
Used to add attributes to the current section wrapper HTML tag.
</summary>
</member>
<member name="M:Elementor.Element_Section._get_default_child_type(Pchp.Core.PhpArray)">
<summary>
Get default child type.
Retrieve the section child type based on element data.
</summary>
<param name="element_data" type="array">Element ID.</param>
<returns>Section default child type.</returns>
</member>
<member name="M:Elementor.Element_Section.get_html_tag">
<summary>
Get HTML tag.
Retrieve the section element HTML tag.
</summary>
<returns>Section HTML tag.</returns>
</member>
<member name="M:Elementor.Element_Section.print_shape_divider(Pchp.Core.PhpValue)">
<summary>
Print section shape divider.
Used to generate the shape dividers HTML.
</summary>
<param name="side" type="string">Shape divider side, used to set the shape key.</param>
</member>
<member name="M:Elementor.Embed.get_video_properties(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Get video properties.
Retrieve the video properties for a given video URL.
</summary>
<param name="video_url" type="string">Video URL.</param>
<returns>The video properties, or null.</returns>
</member>
<member name="M:Elementor.Embed.get_embed_url(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpArray,Pchp.Core.PhpArray)">
<summary>
Get embed URL.
Retrieve the embed URL for a given video.
</summary>
<param name="video_url" type="string">Video URL.</param>
<param name="embed_url_params" type="array">Optional. Embed parameters. Default is an
empty array.</param>
<param name="options" type="array">Optional. Embed options. Default is an
empty array.</param>
<returns>The video properties, or null.</returns>
</member>
<member name="M:Elementor.Embed.get_embed_html(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpArray,Pchp.Core.PhpArray,Pchp.Core.PhpArray)">
<summary>
Get embed HTML.
Retrieve the final HTML of the embedded URL.
</summary>
<param name="video_url" type="string">Video URL.</param>
<param name="embed_url_params" type="array">Optional. Embed parameters. Default is an
empty array.</param>
<param name="options" type="array">Optional. Embed options. Default is an
empty array.</param>
<param name="frame_attributes" type="array">Optional. IFrame attributes. Default is an
empty array.</param>
<returns>The embed HTML.</returns>
</member>
<member name="M:Elementor.Embed.get_oembed_data(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Get oembed data from the cache.
if not exists in the cache it will fetch from provider and then save to the cache.
</summary>
</member>
<member name="M:Elementor.Embed.fetch_oembed_data(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Fetch oembed data from oembed provider.
</summary>
</member>
<member name="M:Elementor.Embed.get_embed_thumbnail_html(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<param name="cached_post_id" type="null|string|int"></param>
</member>
<member name="M:Elementor.Fonts.get_font_groups(Pchp.Core.Context)">
<summary>
Get font Groups.
Retrieve the list of font groups.
</summary>
<returns>Supported font groups/types.</returns>
</member>
<member name="M:Elementor.Fonts.get_fonts(Pchp.Core.Context)">
<summary>
Get fonts.
Retrieve the list of supported fonts.
</summary>
<returns>Supported fonts.</returns>
</member>
<member name="M:Elementor.Fonts.get_native_fonts(Pchp.Core.Context)">
<summary>
Get Elementor native fonts.
Retrieve the list of supported fonts.
</summary>
<returns>Supported fonts.</returns>
</member>
<member name="M:Elementor.Fonts.get_font_type(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Get font type.
Retrieve the font type for a given font.
</summary>
<param name="name" type="string">Font name.</param>
<returns>Font type, or false if font doesn't exist.</returns>
</member>
<member name="M:Elementor.Fonts.get_fonts_by_groups(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Get fonts by group.
Retrieve all the fonts belong to specific group.
</summary>
<param name="groups" type="array">Optional. Font group. Default is an empty array.</param>
<returns>Font type, or false if font doesn't exist.</returns>
</member>
<member name="M:Elementor.Frontend.__construct">
<summary>
Front End constructor.
Initializing Elementor front end. Make sure we are not in admin, not and
redirect from old URL structure of Elementor editor.
</summary>
</member>
<member name="M:Elementor.Frontend.get_name">
<summary>
Get module name.
Retrieve the module name.
</summary>
<returns>Module name.</returns>
</member>
<member name="M:Elementor.Frontend.init_render_mode">
<summary>
Init render mode manager.
</summary>
</member>
<member name="M:Elementor.Frontend.init">
<summary>
Init.
Initialize Elementor front end. Hooks the needed actions to run Elementor
in the front end, including script and style registration.

Fired by `template_redirect` action.
</summary>
</member>
<member name="M:Elementor.Frontend.add_body_class(Pchp.Core.PhpValue)">
<param name="class" type="string|array"></param>
</member>
<member name="M:Elementor.Frontend.add_theme_color_meta_tag">
<summary>
Add Theme Color Meta Tag
</summary>
</member>
<member name="M:Elementor.Frontend.body_class(Pchp.Core.PhpValue)">
<summary>
Body tag classes.
Add new elementor classes to the body tag.

Fired by `body_class` filter.
</summary>
<param name="classes" type="array">Optional. One or more classes to add to the body tag class list.
Default is an empty array.</param>
<returns>Body tag classes.</returns>
</member>
<member name="M:Elementor.Frontend.add_content_filter">
<summary>
Add content filter.
Remove plain content and render the content generated by Elementor.
</summary>
</member>
<member name="M:Elementor.Frontend.remove_content_filter">
<summary>
Remove content filter.
When the Elementor generated content rendered, we remove the filter to prevent multiple
accuracies. This way we make sure Elementor renders the content only once.
</summary>
</member>
<member name="M:Elementor.Frontend.register_scripts">
<summary>
Registers scripts.
Registers all the frontend scripts.

Fired by `wp_enqueue_scripts` action.
</summary>
</member>
<member name="M:Elementor.Frontend.register_styles">
<summary>
Registers styles.
Registers all the frontend styles.

Fired by `wp_enqueue_scripts` action.
</summary>
</member>
<member name="M:Elementor.Frontend.enqueue_scripts">
<summary>
Enqueue scripts.
Enqueue all the frontend scripts.
</summary>
</member>
<member name="M:Elementor.Frontend.enqueue_styles">
<summary>
Enqueue styles.
Enqueue all the frontend styles.

Fired by `wp_enqueue_scripts` action.
</summary>
</member>
<member name="M:Elementor.Frontend.get_frontend_file_url(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Get Frontend File URL
Returns the URL for the CSS file to be loaded in the front end. If requested via the second parameter, a custom
file is generated based on a passed template file name. Otherwise, the URL for the default CSS file is returned.
</summary>
<param name="frontend_file_name" type="string"></param>
<param name="custom_file" type="boolean"></param>
<returns>frontend file URL</returns>
</member>
<member name="M:Elementor.Frontend.enqueue_conditional_assets">
<summary>
Enqueue assets conditionally.
Enqueue all assets that were pre-enabled.
</summary>
</member>
<member name="M:Elementor.Frontend.wp_footer">
<summary>
Elementor footer scripts and styles.
Handle styles and scripts that are not printed in the header.

Fired by `wp_footer` action.
</summary>
</member>
<member name="M:Elementor.Frontend.print_fonts_links">
<summary>
Print fonts links.
Enqueue all the frontend fonts by url.

Fired by `wp_head` action.
</summary>
</member>
<member name="M:Elementor.Frontend.enqueue_google_fonts(Pchp.Core.PhpValue)">
<summary>
Print Google fonts.
Enqueue all the frontend Google fonts.

Fired by `wp_head` action.
</summary>
<param name="google_fonts" type="array">Optional. Google fonts to print in the frontend.
Default is an empty array.</param>
</member>
<member name="M:Elementor.Frontend.enqueue_font(Pchp.Core.PhpValue)">
<summary>
Enqueue fonts.
Enqueue all the frontend fonts.
</summary>
<param name="font" type="array">Fonts to enqueue in the frontend.</param>
</member>
<member name="M:Elementor.Frontend.parse_global_css_code">
<summary>
Parse global CSS.
Enqueue the global CSS file.
</summary>
</member>
<member name="M:Elementor.Frontend.apply_builder_in_content(Pchp.Core.PhpValue)">
<summary>
Apply builder in content.
Used to apply the Elementor page editor on the post content.
</summary>
<param name="content" type="string">The post content.</param>
<returns>The post content.</returns>
</member>
<member name="M:Elementor.Frontend.get_builder_content(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Retrieve builder content.
Used to render and return the post content with all the Elementor elements.

Note that this method is an internal method, please use `get_builder_content_for_display()`.
</summary>
<param name="post_id" type="int">The post ID.</param>
<param name="with_css" type="bool">Optional. Whether to retrieve the content with CSS
or not. Default is false.</param>
<returns>The post content.</returns>
</member>
<member name="M:Elementor.Frontend.get_builder_content_for_display(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Retrieve builder content for display.
Used to render and return the post content with all the Elementor elements.
</summary>
<param name="post_id" type="int">The post ID.</param>
<param name="with_css" type="bool">Optional. Whether to retrieve the content with CSS
or not. Default is false.</param>
<returns>The post content.</returns>
</member>
<member name="M:Elementor.Frontend.start_excerpt_flag(Pchp.Core.PhpValue)">
<summary>
Start excerpt flag.
Flags when `the_excerpt` is called. Used to avoid enqueueing CSS in the excerpt.
</summary>
<param name="excerpt" type="string">The post excerpt.</param>
<returns>The post excerpt.</returns>
</member>
<member name="M:Elementor.Frontend.end_excerpt_flag(Pchp.Core.PhpValue)">
<summary>
End excerpt flag.
Flags when `the_excerpt` call ended.
</summary>
<param name="excerpt" type="string">The post excerpt.</param>
<returns>The post excerpt.</returns>
</member>
<member name="M:Elementor.Frontend.remove_content_filters">
<summary>
Remove content filters.
Remove WordPress default filters that conflicted with Elementor.
</summary>
</member>
<member name="M:Elementor.Frontend.has_elementor_in_page">
<summary>
Has Elementor In Page
Determine whether the current page is using Elementor.
</summary>
</member>
<member name="M:Elementor.Frontend.is_static_render_mode">
<summary>
Is the current render mode is static.
</summary>
</member>
<member name="M:Elementor.Frontend.get_init_settings">
<summary>
Get Init Settings
Used to define the default/initial settings of the object. Inheriting classes may implement this method to define
their own default/initial settings.
</summary>
</member>
<member name="M:Elementor.Frontend.restore_content_filters">
<summary>
Restore content filters.
Restore removed WordPress filters that conflicted with Elementor.
</summary>
</member>
<member name="M:Elementor.Frontend.process_more_tag(Pchp.Core.PhpValue)">
<summary>
Process More Tag
Respect the native WP (&lt;!--more--&gt;) tag
</summary>
</member>
<member name="M:Elementor.Heartbeat.heartbeat_received(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Heartbeat received.
Locks the Heartbeat response received when editing with Elementor.

Fired by `heartbeat_received` filter.
</summary>
<param name="response" type="array">The Heartbeat response.</param>
<param name="data" type="array">The `$_POST` data sent.</param>
<returns>Heartbeat response received.</returns>
</member>
<member name="M:Elementor.Heartbeat.refresh_nonces(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Refresh nonces.
Filter the nonces to send to the editor when editing with Elementor. Used
to refresh the nonce when the nonce expires while editing. This way the
user doesn't need to log-in again as Elementor fetches the new nonce from
the server using ajax.

Fired by `wp_refresh_nonces` filter.
</summary>
<param name="response" type="array">The no-priv Heartbeat response object or array.</param>
<param name="data" type="array">The `$_POST` data sent.</param>
<returns>Refreshed nonces.</returns>
</member>
<member name="M:Elementor.Heartbeat.__construct">
<summary>
Heartbeat constructor.
Initializing Elementor heartbeat.
</summary>
</member>
<member name="M:Elementor.Group_Control_Interface.get_type(Pchp.Core.Context)">
<summary>
Get group control type.
Retrieve the group control type.
</summary>
</member>
<member name="M:BFI_Image_Editor_Imagick_1_3?.opacity(Pchp.Core.PhpValue)">
<summary>
Changes the opacity of the image
</summary>
<param name="opacity" type="float">(0.0-1.0)</param>
</member>
<member name="M:BFI_Image_Editor_Imagick_1_3?.colorize(Pchp.Core.PhpValue)">
<summary>
Tints the image a different color
</summary>
</member>
<member name="M:BFI_Image_Editor_Imagick_1_3?.grayscale">
<summary>
Makes the image grayscale
</summary>
</member>
<member name="M:BFI_Image_Editor_Imagick_1_3?.negate">
<summary>
Negates the image
</summary>
</member>
<member name="M:BFI_Image_Editor_GD_1_3?.rotate(Pchp.Core.PhpValue)">
<summary>
Rotates current image counter-clockwise by $angle.
Ported from image-edit.php
Added presevation of alpha channels
</summary>
<param name="angle" type="float"></param>
</member>
<member name="M:BFI_Image_Editor_GD_1_3?.opacity(Pchp.Core.PhpValue)">
<summary>
Changes the opacity of the image
</summary>
<param name="opacity" type="float">(0.0-1.0)</param>
</member>
<member name="M:BFI_Image_Editor_GD_1_3?.colorize(Pchp.Core.PhpValue)">
<summary>
Tints the image a different color
</summary>
</member>
<member name="M:BFI_Image_Editor_GD_1_3?.grayscale">
<summary>
Makes the image grayscale
</summary>
</member>
<member name="M:BFI_Image_Editor_GD_1_3?.negate">
<summary>
Negates the image
</summary>
</member>
<member name="M:BFI_Thumb_1_3?.thumb(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Uses WP's Image Editor Class to resize and filter images
Inspired by: https://github.com/sy4mil/Aqua-Resizer/blob/master/aq_resizer.php
</summary>
<param name="url" type="string">the local image URL to manipulate</param>
<param name="params" type="array">the options to perform on the image. Keys and values supported:
'width' int pixels
'height' int pixels
'opacity' int 0-100
'color' string hex-color #000000-#ffffff
'grayscale' bool
'crop' bool
'negate' bool
'crop_only' bool
'crop_x' bool string
'crop_y' bool string
'crop_width' bool string
'crop_height' bool string
'quality' int 1-100</param>
<param name="single">boolean, if false then an array of data will be returned</param>
</member>
<member name="M:BFI_Thumb_1_3?.base_convert_arbitrary(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Shortens a number into a base 36 string
</summary>
<param name="number" type="string">a string of numbers to convert</param>
<param name="fromBase" type="starting">base</param>
<param name="toBase" type="base">to convert the number to</param>
<returns>base converted characters</returns>
</member>
<member name="M:Elementor.Maintenance_Mode.get(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Get elementor option.
Retrieve elementor option from the database.
</summary>
<param name="option" type="string">Option name. Expected to not be SQL-escaped.</param>
<param name="default" type="mixed">Optional. Default value to return if the option
does not exist. Default is false.</param>
<returns>False if value was not updated and true if value was updated.</returns>
</member>
<member name="M:Elementor.Maintenance_Mode.set(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Set elementor option.
Update elementor option in the database.
</summary>
<param name="option" type="string">Option name. Expected to not be SQL-escaped.</param>
<param name="value" type="mixed">Option value. Must be serializable if non-scalar.
Expected to not be SQL-escaped.</param>
<returns>False if value was not updated and true if value was updated.</returns>
</member>
<member name="M:Elementor.Maintenance_Mode.body_class(Pchp.Core.PhpValue)">
<summary>
Body class.
Add "Maintenance Mode" CSS classes to the body tag.

Fired by `body_class` filter.
</summary>
<param name="classes" type="array">An array of body classes.</param>
<returns>An array of body classes.</returns>
</member>
<member name="M:Elementor.Maintenance_Mode.template_redirect">
<summary>
Template redirect.
Redirect to the "Maintenance Mode" template.

Fired by `template_redirect` action.
</summary>
</member>
<member name="M:Elementor.Maintenance_Mode.register_settings_fields(Elementor.Tools)">
<summary>
Register settings fields.
Adds new "Maintenance Mode" settings fields to Elementor admin page.

The method need to receive the an instance of the Tools settings page
to add the new maintenance mode functionality.

Fired by `elementor/admin/after_create_settings/{$page_id}` action.
</summary>
<param name="tools" type="Tools">An instance of the Tools settings page.</param>
</member>
<member name="M:Elementor.Maintenance_Mode.add_menu_in_admin_bar(WP_Admin_Bar)">
<summary>
Add menu in admin bar.
Adds "Maintenance Mode" items to the WordPress admin bar.

Fired by `admin_bar_menu` filter.
</summary>
<param name="wp_admin_bar" type="\WP_Admin_Bar">WP_Admin_Bar instance, passed by reference.</param>
</member>
<member name="M:Elementor.Maintenance_Mode.print_style">
<summary>
Print style.
Adds custom CSS to the HEAD html tag. The CSS that emphasise the maintenance
mode with red colors.

Fired by `admin_head` and `wp_head` filters.
</summary>
</member>
<member name="M:Elementor.Maintenance_Mode.__construct">
<summary>
Maintenance mode constructor.
Initializing Elementor maintenance mode.
</summary>
</member>
<member name="M:Elementor.Maintenance_Mode.print_template_description">
<summary>
Print Template Description
Prints the template description
</summary>
</member>
<member name="M:Elementor.Maintenance.activation(Pchp.Core.Context,Pchp.Core.Reflection.PhpTypeInfo,Pchp.Core.PhpValue)">
<summary>
Activate Elementor.
Set Elementor activation hook.

Fired by `register_activation_hook` when the plugin is activated.
</summary>
</member>
<member name="M:Elementor.Maintenance.uninstall(Pchp.Core.Context)">
<summary>
Uninstall Elementor.
Set Elementor uninstallation hook.

Fired by `register_uninstall_hook` when the plugin is uninstalled.
</summary>
</member>
<member name="M:Elementor.Maintenance.init(Pchp.Core.Context,Pchp.Core.Reflection.PhpTypeInfo)">
<summary>
Init.
Initialize Elementor Maintenance.
</summary>
</member>
<member name="M:Elementor.Maintenance.create_default_kit(Pchp.Core.Context,Pchp.Core.PhpArray)">
<param name="site_ids" type="array"></param>
</member>
<member name="M:Elementor.Controls_Manager.init_tabs(Pchp.Core.Context)">
<summary>
Init tabs.
Initialize control tabs.
</summary>
</member>
<member name="M:Elementor.Controls_Manager.get_tabs(Pchp.Core.Context)">
<summary>
Get tabs.
Retrieve the tabs of the current control.
</summary>
<returns>Control tabs.</returns>
</member>
<member name="M:Elementor.Controls_Manager.add_tab(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Add tab.
This method adds a new tab to the current control.
</summary>
<param name="tab_name" type="string">Tab name.</param>
<param name="tab_label" type="string">Tab label.</param>
</member>
<member name="M:Elementor.Controls_Manager.register_controls">
<summary>
Register controls.
This method creates a list of all the supported controls by requiring the
control files and initializing each one of them.

The list of supported controls includes the regular controls and the group
controls.

External developers can register new controls by hooking to the
`elementor/controls/controls_registered` action.
</summary>
</member>
<member name="M:Elementor.Controls_Manager.register_control(Pchp.Core.PhpValue,Elementor.Base_Control)">
<summary>
Register control.
This method adds a new control to the controls list. It adds any given
control to any given control instance.
</summary>
<param name="control_id" type="string">Control ID.</param>
<param name="control_instance" type="Base_Control">Control instance, usually the
current instance.</param>
</member>
<member name="M:Elementor.Controls_Manager.unregister_control(Pchp.Core.PhpValue)">
<summary>
Unregister control.
This method removes control from the controls list.
</summary>
<param name="control_id" type="string">Control ID.</param>
<returns>True if the control was removed, False otherwise.</returns>
</member>
<member name="M:Elementor.Controls_Manager.get_controls">
<summary>
Get controls.
Retrieve the controls list from the current instance.
</summary>
<returns>Controls list.</returns>
</member>
<member name="M:Elementor.Controls_Manager.get_control(Pchp.Core.PhpValue)">
<summary>
Get control.
Retrieve a specific control from the current controls instance.
</summary>
<param name="control_id" type="string">Control ID.</param>
<returns>Control instance, or False otherwise.</returns>
</member>
<member name="M:Elementor.Controls_Manager.get_controls_data">
<summary>
Get controls data.
Retrieve all the registered controls and all the data for each control.
</summary>
<returns>{
Control data.

@type array $name Control data.
}</returns>
</member>
<member name="M:Elementor.Controls_Manager.render_controls">
<summary>
Render controls.
Generate the final HTML for all the registered controls using the element
template.
</summary>
</member>
<member name="M:Elementor.Controls_Manager.get_control_groups(Pchp.Core.PhpValue)">
<summary>
Get control groups.
Retrieve a specific group for a given ID, or a list of all the control
groups.

If the given group ID is wrong, it will return `null`. When the ID valid,
it will return the group control instance. When no ID was given, it will
return all the control groups.
</summary>
<param name="id" type="string">Optional. Group ID. Default is null.</param>
</member>
<member name="M:Elementor.Controls_Manager.add_group_control(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Add group control.
This method adds a new group control to the control groups list. It adds
any given group control to any given group control instance.
</summary>
<param name="id" type="string">Group control ID.</param>
<param name="instance" type="Group_Control_Base">Group control instance, usually the
current instance.</param>
<returns>Group control instance.</returns>
</member>
<member name="M:Elementor.Controls_Manager.enqueue_control_scripts">
<summary>
Enqueue control scripts and styles.
Used to register and enqueue custom scripts and styles used by the control.
</summary>
</member>
<member name="M:Elementor.Controls_Manager.open_stack(Elementor.Controls_Stack)">
<summary>
Open new stack.
This method adds a new stack to the control stacks list. It adds any
given stack to the current control instance.
</summary>
<param name="controls_stack" type="Controls_Stack">Controls stack.</param>
</member>
<member name="M:Elementor.Controls_Manager.add_control_to_stack(Elementor.Controls_Stack,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Add control to stack.
This method adds a new control to the stack.
</summary>
<param name="element" type="Controls_Stack">Element stack.</param>
<param name="control_id" type="string">Control ID.</param>
<param name="control_data" type="array">Control data.</param>
<param name="options" type="array">Optional. Control additional options.
Default is an empty array.</param>
<returns>True if control added, False otherwise.</returns>
</member>
<member name="M:Elementor.Controls_Manager.remove_control_from_stack(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Remove control from stack.
This method removes a control a the stack.
</summary>
<param name="stack_id" type="string">Stack ID.</param>
<param name="control_id" type="array|string">The ID of the control to remove.</param>
<returns>True if the stack was removed, False otherwise.</returns>
</member>
<member name="M:Elementor.Controls_Manager.get_control_from_stack(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Get control from stack.
Retrieve a specific control for a given a specific stack.

If the given control does not exist in the stack, or the stack does not
exist, it will return `WP_Error`. Otherwise, it will retrieve the control
from the stack.
</summary>
<param name="stack_id" type="string">Stack ID.</param>
<param name="control_id" type="string">Control ID.</param>
<returns>The control, or an error.</returns>
</member>
<member name="M:Elementor.Controls_Manager.update_control_in_stack(Elementor.Controls_Stack,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpArray)">
<summary>
Update control in stack.
This method updates the control data for a given stack.
</summary>
<param name="element" type="Controls_Stack">Element stack.</param>
<param name="control_id" type="string">Control ID.</param>
<param name="control_data" type="array">Control data.</param>
<param name="options" type="array">Optional. Control additional options.
Default is an empty array.</param>
<returns>True if control updated, False otherwise.</returns>
</member>
<member name="M:Elementor.Controls_Manager.get_stacks(Pchp.Core.PhpValue)">
<summary>
Get stacks.
Retrieve a specific stack for the list of stacks.

If the given stack is wrong, it will return `null`. When the stack valid,
it will return the the specific stack. When no stack was given, it will
return all the stacks.
</summary>
<param name="stack_id" type="string">Optional. stack ID. Default is null.</param>
<returns>A list of stacks.</returns>
</member>
<member name="M:Elementor.Controls_Manager.get_element_stack(Elementor.Controls_Stack)">
<summary>
Get element stack.
Retrieve a specific stack for the list of stacks from the current instance.
</summary>
<param name="controls_stack" type="Controls_Stack">Controls stack.</param>
<returns>Stack data if it exist, `null` otherwise.</returns>
</member>
<member name="M:Elementor.Controls_Manager.add_custom_css_controls(Elementor.Controls_Stack,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Add custom CSS controls.
This method adds a new control for the "Custom CSS" feature. The free
version of elementor uses this method to display an upgrade message to
Elementor Pro.
</summary>
<param name="controls_stack" type="Controls_Stack">.</param>
<param name="tab" type="string"></param>
<param name="additional_messages" type="array"></param>
</member>
<member name="M:Elementor.Controls_Manager.add_page_transitions_controls(Elementor.Controls_Stack,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Add Page Transitions controls.
This method adds a new control for the "Page Transitions" feature. The Core
version of elementor uses this method to display an upgrade message to
Elementor Pro.
</summary>
<param name="controls_stack" type="Controls_Stack">.</param>
<param name="tab" type="string"></param>
<param name="additional_messages" type="array"></param>
</member>
<member name="M:Elementor.Controls_Manager.add_custom_attributes_controls(Elementor.Controls_Stack)">
<summary>
Add custom attributes controls.
This method adds a new control for the "Custom Attributes" feature. The free
version of elementor uses this method to display an upgrade message to
Elementor Pro.
</summary>
<param name="controls_stack." type="Controls_Stack"></param>
</member>
<member name="M:Elementor.Elements_Manager.__construct">
<summary>
Elements constructor.
Initializing Elementor elements manager.
</summary>
</member>
<member name="M:Elementor.Elements_Manager.create_element_instance(Pchp.Core.PhpArray,Pchp.Core.PhpArray,Elementor.Element_Base)">
<summary>
Create element instance.
This method creates a new element instance for any given element.
</summary>
<param name="element_data" type="array">Element data.</param>
<param name="element_args" type="array">Optional. Element arguments. Default is
an empty array.</param>
<param name="element_type" type="Element_Base">Optional. Element type. Default is null.</param>
<returns>Element instance if element created, or null
otherwise.</returns>
</member>
<member name="M:Elementor.Elements_Manager.get_categories">
<summary>
Get element categories.
Retrieve the list of categories the element belongs to.
</summary>
<returns>Element categories.</returns>
</member>
<member name="M:Elementor.Elements_Manager.add_category(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Add element category.
Register new category for the element.
</summary>
<param name="category_name" type="string">Category name.</param>
<param name="category_properties" type="array">Category properties.</param>
</member>
<member name="M:Elementor.Elements_Manager.register_element_type(Elementor.Element_Base)">
<summary>
Register element type.
Add new type to the list of registered types.
</summary>
<param name="element" type="Element_Base">Element instance.</param>
<returns>Whether the element type was registered.</returns>
</member>
<member name="M:Elementor.Elements_Manager.unregister_element_type(Pchp.Core.PhpValue)">
<summary>
Unregister element type.
Remove element type from the list of registered types.
</summary>
<param name="name" type="string">Element name.</param>
<returns>Whether the element type was unregister, or not.</returns>
</member>
<member name="M:Elementor.Elements_Manager.get_element_types(Pchp.Core.PhpValue)">
<summary>
Get element types.
Retrieve the list of all the element types, or if a specific element name
was provided retrieve his element types.
</summary>
<param name="element_name" type="string">Optional. Element name. Default is null.</param>
<returns>Element types, or a list of all the element
types, or null if element does not exist.</returns>
</member>
<member name="M:Elementor.Elements_Manager.get_element_types_config">
<summary>
Get element types config.
Retrieve the config of all the element types.
</summary>
<returns>Element types config.</returns>
</member>
<member name="M:Elementor.Elements_Manager.render_elements_content">
<summary>
Render elements content.
Used to generate the elements templates on the editor.
</summary>
</member>
<member name="M:Elementor.Elements_Manager.init_elements">
<summary>
Init elements.
Initialize Elementor elements by registering the supported elements.
Elementor supports by default `section` element and `column` element.
</summary>
</member>
<member name="M:Elementor.Elements_Manager.init_categories">
<summary>
Init categories.
Initialize the element categories.
</summary>
</member>
<member name="M:Elementor.Elements_Manager.require_files">
<summary>
Require files.
Require Elementor element base class and column, section and repeater
elements.
</summary>
</member>
<member name="M:Elementor.Icons_Manager.register_styles">
<summary>
register styles
Used to register all icon types stylesheets so they could be enqueued later by widgets
</summary>
</member>
<member name="M:Elementor.Icons_Manager.init_tabs(Pchp.Core.Context)">
<summary>
Init Tabs
Initiate Icon Manager Tabs.
</summary>
</member>
<member name="M:Elementor.Icons_Manager.get_icon_manager_tabs(Pchp.Core.Context)">
<summary>
Get Icon Manager Tabs
</summary>
</member>
<member name="M:Elementor.Icons_Manager.is_font_icon_inline_svg(Pchp.Core.Context)">
<summary>
is_font_awesome_inline
</summary>
</member>
<member name="M:Elementor.Icons_Manager.render_svg_symbols(Pchp.Core.Context)">
<summary>
render_svg_symbols
</summary>
</member>
<member name="M:Elementor.Icons_Manager.get_font_icon_svg(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Get font awesome svg.
</summary>
<param name="icon" type="array">[ 'value' =&gt; string, 'library' =&gt; string ]</param>
</member>
<member name="M:Elementor.Icons_Manager.render_icon(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Render Icon
Used to render Icon for \Elementor\Controls_Manager::ICONS
</summary>
<param name="icon" type="array">Icon Type, Icon value</param>
<param name="attributes" type="array">Icon HTML Attributes</param>
<param name="tag" type="string">Icon HTML tag, defaults to &lt;i&gt;</param>
</member>
<member name="M:Elementor.Icons_Manager.fa4_to_fa5_value_migration(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Font Awesome 4 to font Awesome 5 Value Migration
used to convert string value of Icon control to array value of Icons control
ex: 'fa fa-star' =&gt; [ 'value' =&gt; 'fas fa-star', 'library' =&gt; 'fa-solid' ]
</summary>
</member>
<member name="M:Elementor.Icons_Manager.on_import_migration(Pchp.Core.Context,Pchp.Core.PhpArray,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
on_import_migration
</summary>
<param name="element" type="array">settings array</param>
<param name="old_control" type="string">old control id</param>
<param name="new_control" type="string">new control id</param>
<param name="remove_old" type="bool">boolean weather to remove old control or not</param>
</member>
<member name="M:Elementor.Icons_Manager.is_migration_allowed(Pchp.Core.Context)">
<summary>
is_migration_allowed
</summary>
</member>
<member name="M:Elementor.Icons_Manager.register_admin_settings(Elementor.Settings)">
<summary>
Register_Admin Settings
adds Font Awesome migration / update admin settings
</summary>
<param name="settings" type="Settings"></param>
</member>
<member name="M:Elementor.Icons_Manager.ajax_upgrade_to_fa5">
<summary>
Ajax Upgrade to FontAwesome 5
</summary>
</member>
<member name="M:Elementor.Icons_Manager.add_update_needed_flag(Pchp.Core.PhpValue)">
<summary>
Add Update Needed Flag
</summary>
<param name="settings" type="array"></param>
<returns>array;</returns>
</member>
<member name="M:Elementor.Icons_Manager.add_admin_strings">
</member>
<member name="M:Elementor.Icons_Manager.register_ajax_actions">
</member>
<member name="M:Elementor.Icons_Manager.ajax_enable_svg_uploads">
</member>
<member name="M:Elementor.Icons_Manager.__construct">
<summary>
Icons Manager constructor
</summary>
</member>
<member name="M:Elementor.Images_Manager.get_images_details">
<summary>
Get images details.
Retrieve details for all the images.

Fired by `wp_ajax_elementor_get_images_details` action.
</summary>
</member>
<member name="M:Elementor.Images_Manager.get_details(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Get image details.
Retrieve single image details.

Fired by `wp_ajax_elementor_get_image_details` action.
</summary>
<param name="id" type="string">Image attachment ID.</param>
<param name="size" type="string|array">Image size. Accepts any valid image
size, or an array of width and height
values in pixels (in that order).</param>
<param name="is_first_time" type="string">Set 'true' string to force reloading
all image sizes.</param>
<returns>URLs with different image sizes.</returns>
</member>
<member name="M:Elementor.Images_Manager.get_lightbox_image_attributes(Pchp.Core.PhpValue)">
<summary>
Get Light-Box Image Attributes
Used to retrieve an array of image attributes to be used for displaying an image in Elementor's Light Box module.
</summary>
<param name="id" type="int">The ID of the image</param>
<returns>An array of image attributes including `title` and `description`.</returns>
</member>
<member name="M:Elementor.Images_Manager.__construct">
<summary>
Images manager constructor.
Initializing Elementor images manager.
</summary>
</member>
<member name="M:Elementor.Skins_Manager.add_skin(Elementor.Widget_Base,Elementor.Skin_Base)">
<summary>
Add new skin.
Register a single new skin for a widget.
</summary>
<param name="widget" type="Widget_Base">Elementor widget.</param>
<param name="skin" type="Skin_Base">Elementor skin.</param>
<returns>True if skin added.</returns>
</member>
<member name="M:Elementor.Skins_Manager.remove_skin(Elementor.Widget_Base,Pchp.Core.PhpValue)">
<summary>
Remove a skin.
Unregister an existing skin from a widget.
</summary>
<param name="widget" type="Widget_Base">Elementor widget.</param>
<param name="skin_id" type="string">Elementor skin ID.</param>
<returns>True if skin removed, `WP_Error` otherwise.</returns>
</member>
<member name="M:Elementor.Skins_Manager.get_skins(Elementor.Widget_Base)">
<summary>
Get skins.
Retrieve all the skins assigned for a specific widget.
</summary>
<param name="widget" type="Widget_Base">Elementor widget.</param>
<returns>Skins if the widget has skins, False otherwise.</returns>
</member>
<member name="M:Elementor.Skins_Manager.__construct">
<summary>
Skins manager constructor.
Initializing Elementor skins manager by requiring the skin base class.
</summary>
</member>
<member name="M:Elementor.Widgets_Manager.init_widgets">
<summary>
Init widgets.
Initialize Elementor widgets manager. Include all the the widgets files
and register each Elementor and WordPress widget.
</summary>
</member>
<member name="M:Elementor.Widgets_Manager.register_wp_widgets">
<summary>
Register WordPress widgets.
Add native WordPress widget to the list of registered widget types.

Exclude the widgets that are in Elementor widgets black list. Theme and
plugin authors can filter the black list.
</summary>
</member>
<member name="M:Elementor.Widgets_Manager.require_files">
<summary>
Require files.
Require Elementor widget base class.
</summary>
</member>
<member name="M:Elementor.Widgets_Manager.register_widget_type(Elementor.Widget_Base)">
<summary>
Register widget type.
Add a new widget type to the list of registered widget types.
</summary>
<param name="widget" type="Widget_Base">Elementor widget.</param>
<returns>True if the widget was registered.</returns>
</member>
<member name="M:Elementor.Widgets_Manager.unregister_widget_type(Pchp.Core.PhpValue)">
<summary>
Unregister widget type.
Removes widget type from the list of registered widget types.
</summary>
<param name="name" type="string">Widget name.</param>
<returns>True if the widget was unregistered, False otherwise.</returns>
</member>
<member name="M:Elementor.Widgets_Manager.get_widget_types(Pchp.Core.PhpValue)">
<summary>
Get widget types.
Retrieve the registered widget types list.
</summary>
<param name="widget_name" type="string">Optional. Widget name. Default is null.</param>
<returns>Registered widget types.</returns>
</member>
<member name="M:Elementor.Widgets_Manager.get_widget_types_config">
<summary>
Get widget types config.
Retrieve all the registered widgets with config for each widgets.
</summary>
<returns>Registered widget types with each widget config.</returns>
</member>
<member name="M:Elementor.Widgets_Manager.ajax_render_widget(Pchp.Core.PhpValue)">
<summary>
Ajax render widget.
Ajax handler for Elementor render_widget.

Fired by `wp_ajax_elementor_render_widget` action.
</summary>
<exception cref="Exception">If current user don't have permissions to edit the post.</exception>
<param name="request" type="array">Ajax request.</param>
<returns>{
Rendered widget.

@type string $render The rendered HTML.
}</returns>
</member>
<member name="M:Elementor.Widgets_Manager.ajax_get_wp_widget_form(Pchp.Core.PhpValue)">
<summary>
Ajax get WordPress widget form.
Ajax handler for Elementor editor get_wp_widget_form.

Fired by `wp_ajax_elementor_editor_get_wp_widget_form` action.
</summary>
<param name="request" type="array">Ajax request.</param>
<returns>Rendered widget form.</returns>
</member>
<member name="M:Elementor.Widgets_Manager.render_widgets_content">
<summary>
Render widgets content.
Used to generate the widget templates on the editor using Underscore JS
template, for all the registered widget types.
</summary>
</member>
<member name="M:Elementor.Widgets_Manager.get_widgets_frontend_settings_keys">
<summary>
Get widgets frontend settings keys.
Retrieve frontend controls settings keys for all the registered widget
types.
</summary>
<returns>Registered widget types with settings keys for each widget.</returns>
</member>
<member name="M:Elementor.Widgets_Manager.enqueue_widgets_scripts">
<summary>
Enqueue widgets scripts.
Enqueue all the scripts defined as a dependency for each widget.
</summary>
</member>
<member name="M:Elementor.Widgets_Manager.enqueue_widgets_styles">
<summary>
Enqueue widgets styles
Enqueue all the styles defined as a dependency for each widget
</summary>
</member>
<member name="M:Elementor.Widgets_Manager.get_inline_editing_config">
<summary>
Retrieve inline editing configuration.
Returns general inline editing configurations like toolbar types etc.
</summary>
<returns>{
Inline editing configuration.

@type array $toolbar {
Toolbar types and the actions each toolbar includes.
Note: Wysiwyg controls uses the advanced toolbar, textarea controls
uses the basic toolbar and text controls has no toolbar.

@type array $basic    Basic actions included in the edit tool.
@type array $advanced Advanced actions included in the edit tool.
}
}</returns>
</member>
<member name="M:Elementor.Widgets_Manager.__construct">
<summary>
Widgets manager constructor.
Initializing Elementor widgets manager.
</summary>
</member>
<member name="M:Elementor.Widgets_Manager.register_ajax_actions(Elementor.Core.Common.Modules.Ajax.Module)">
<summary>
Register ajax actions.
Add new actions to handle data after an ajax requests returned.
</summary>
<param name="ajax_manager" type="Ajax"></param>
</member>
<member name="M:Elementor.WordPress_Widgets_Manager.__construct">
<summary>
WordPress widgets manager constructor.
Initializing the WordPress widgets manager in Elementor editor.
</summary>
</member>
<member name="M:Elementor.WordPress_Widgets_Manager.before_enqueue_scripts">
<summary>
Before enqueue scripts.
Prints custom scripts required to run WordPress widgets in Elementor
editor.

Fired by `elementor/editor/before_enqueue_scripts` action.
</summary>
</member>
<member name="M:Elementor.WordPress_Widgets_Manager.footer">
<summary>
WordPress widgets footer.
Prints WordPress widgets scripts in Elementor editor footer.

Fired by `elementor/editor/footer` action.
</summary>
</member>
<member name="M:Elementor.Plugin.__clone">
<summary>
Clone.
Disable class cloning and throw an error on object clone.

The whole idea of the singleton design pattern is that there is a single
object. Therefore, we don't want the object to be cloned.
</summary>
</member>
<member name="M:Elementor.Plugin.__wakeup">
<summary>
Wakeup.
Disable unserializing of the class.
</summary>
</member>
<member name="M:Elementor.Plugin.instance(Pchp.Core.Context)">
<summary>
Instance.
Ensures only one instance of the plugin class is loaded or can be loaded.
</summary>
<returns>An instance of the class.</returns>
</member>
<member name="M:Elementor.Plugin.init">
<summary>
Init.
Initialize Elementor Plugin. Register Elementor support for all the
supported post types and initialize Elementor components.
</summary>
</member>
<member name="M:Elementor.Plugin.get_install_time">
<summary>
Get install time.
Retrieve the time when Elementor was installed.
</summary>
<returns>Unix timestamp when Elementor was installed.</returns>
</member>
<member name="M:Elementor.Plugin.on_rest_api_init">
</member>
<member name="M:Elementor.Plugin.init_components">
<summary>
Init components.
Initialize Elementor components. Register actions, run setting manager,
initialize all the components that run elementor, and if in admin page
initialize admin components.
</summary>
</member>
<member name="M:Elementor.Plugin.init_common">
</member>
<member name="M:Elementor.Plugin.get_legacy_mode(Pchp.Core.PhpValue)">
<summary>
Get Legacy Mode
</summary>
<param name="mode_name" type="string">Optional. Default is null</param>
</member>
<member name="M:Elementor.Plugin.add_cpt_support">
<summary>
Add custom post type support.
Register Elementor support for all the supported post types defined by
the user in the admin screen and saved as `elementor_cpt_support` option
in WordPress `$wpdb-&gt;options` table.

If no custom post type selected, usually in new installs, this method
will return the two default post types: `page` and `post`.
</summary>
</member>
<member name="M:Elementor.Plugin.register_autoloader">
<summary>
Register autoloader.
Elementor autoloader loads all the classes needed to run the plugin.
</summary>
</member>
<member name="M:Elementor.Plugin.__get(Pchp.Core.PhpValue)">
<summary>
Plugin Magic Getter
</summary>
</member>
<member name="M:Elementor.Plugin.__construct">
<summary>
Plugin constructor.
Initializing Elementor plugin.
</summary>
</member>
<member name="M:Elementor.Preview.get_name">
<summary>
Get module name.
Retrieve the module name.
</summary>
<returns>Module name.</returns>
</member>
<member name="M:Elementor.Preview.init">
<summary>
Init.
Initialize Elementor preview mode.

Fired by `template_redirect` action.
</summary>
</member>
<member name="M:Elementor.Preview.get_post_id">
<summary>
Retrieve post ID.
Get the ID of the current post.
</summary>
<returns>Post ID.</returns>
</member>
<member name="M:Elementor.Preview.is_preview">
<summary>
Is Preview.
Whether current request is the elementor preview iframe.
The flag is not related to a specific post or edit permissions.
</summary>
</member>
<member name="M:Elementor.Preview.is_preview_mode(Pchp.Core.PhpValue)">
<summary>
Whether preview mode is active.
Used to determine whether we are in the preview mode (iframe).
</summary>
<param name="post_id" type="int">Optional. Post ID. Default is `0`.</param>
<returns>Whether preview mode is active.</returns>
</member>
<member name="M:Elementor.Preview.builder_wrapper(Pchp.Core.PhpValue)">
<summary>
Builder wrapper.
Used to add an empty HTML wrapper for the builder, the javascript will add
the content later.
</summary>
<param name="content" type="string">The content of the builder.</param>
<returns>HTML wrapper for the builder.</returns>
</member>
<member name="M:Elementor.Preview.enqueue_styles">
<summary>
Enqueue preview styles.
Registers all the preview styles and enqueues them.

Fired by `wp_enqueue_scripts` action.
</summary>
</member>
<member name="M:Elementor.Preview.enqueue_scripts">
<summary>
Enqueue preview scripts.
Registers all the preview scripts and enqueues them.

Fired by `wp_enqueue_scripts` action.
</summary>
</member>
<member name="M:Elementor.Preview.wp_footer">
<summary>
Elementor Preview footer scripts and styles.
Handle styles and scripts from frontend.

Fired by `wp_footer` action.
</summary>
</member>
<member name="M:Elementor.Preview.__construct">
<summary>
Preview constructor.
Initializing Elementor preview.
</summary>
</member>
<member name="M:Elementor.Rollback.__construct(Pchp.Core.PhpValue)">
<summary>
Rollback constructor.
Initializing Elementor rollback.
</summary>
<param name="args" type="array">Optional. Rollback arguments. Default is an empty array.</param>
</member>
<member name="M:Elementor.Rollback.print_inline_style">
<summary>
Print inline style.
Add an inline CSS to the rollback page.
</summary>
</member>
<member name="M:Elementor.Rollback.apply_package">
<summary>
Apply package.
Change the plugin data when WordPress checks for updates. This method
modifies package data to update the plugin from a specific URL containing
the version package.
</summary>
</member>
<member name="M:Elementor.Rollback.upgrade">
<summary>
Upgrade.
Run WordPress upgrade to rollback Elementor to previous version.
</summary>
</member>
<member name="M:Elementor.Rollback.run">
<summary>
Run.
Rollback Elementor to previous versions.
</summary>
</member>
<member name="M:Elementor.Settings_Controls.render(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Render settings control.
Generates the final HTML on the frontend for any given field based on
the field type (text, select, checkbox, raw HTML, etc.).
</summary>
<param name="field" type="array">Optional. Field data. Default is an empty array.</param>
</member>
<member name="M:Elementor.Settings_Controls.text(Pchp.Core.Context,Pchp.Core.PhpArray)">
<summary>
Render text control.
Generates the final HTML for text controls.
</summary>
<param name="field" type="array">Field data.</param>
</member>
<member name="M:Elementor.Settings_Controls.checkbox(Pchp.Core.Context,Pchp.Core.PhpArray)">
<summary>
Render checkbox control.
Generates the final HTML for checkbox controls.
</summary>
<param name="field" type="array">Field data.</param>
</member>
<member name="M:Elementor.Settings_Controls.checkbox_list(Pchp.Core.Context,Pchp.Core.PhpArray)">
<summary>
Render checkbox list control.
Generates the final HTML for checkbox list controls.
</summary>
<param name="field" type="array">Field data.</param>
</member>
<member name="M:Elementor.Settings_Controls.select(Pchp.Core.Context,Pchp.Core.PhpArray)">
<summary>
Render select control.
Generates the final HTML for select controls.
</summary>
<param name="field" type="array">Field data.</param>
</member>
<member name="M:Elementor.Settings_Controls.checkbox_list_cpt(Pchp.Core.Context,Pchp.Core.PhpArray)">
<summary>
Render checkbox list control for CPT.
Generates the final HTML for checkbox list controls populated with Custom Post Types.
</summary>
<param name="field" type="array">Field data.</param>
</member>
<member name="M:Elementor.Settings_Controls.checkbox_list_roles(Pchp.Core.Context,Pchp.Core.PhpArray)">
<summary>
Render checkbox list control for user roles.
Generates the final HTML for checkbox list controls populated with user roles.
</summary>
<param name="field" type="array">Field data.</param>
</member>
<member name="M:Elementor.Settings_Controls.raw_html(Pchp.Core.Context,Pchp.Core.PhpArray)">
<summary>
Render raw HTML control.
Generates the final HTML for raw HTML controls.
</summary>
<param name="field" type="array">Field data.</param>
</member>
<member name="M:Elementor.Settings_Page.create_tabs">
<summary>
Create tabs.
Return the settings page tabs, sections and fields.
</summary>
</member>
<member name="M:Elementor.Settings_Page.get_page_title">
<summary>
Get settings page title.
Retrieve the title for the settings page.
</summary>
</member>
<member name="M:Elementor.Settings_Page.get_url(Pchp.Core.Context,Pchp.Core.Reflection.PhpTypeInfo)">
<summary>
Get settings page URL.
Retrieve the URL of the settings page.
</summary>
<returns>Settings page URL.</returns>
</member>
<member name="M:Elementor.Settings_Page.__construct">
<summary>
Settings page constructor.
Initializing Elementor settings page.
</summary>
</member>
<member name="M:Elementor.Settings_Page.get_tabs">
<summary>
Get tabs.
Retrieve the settings page tabs, sections and fields.
</summary>
<returns>Settings page tabs, sections and fields.</returns>
</member>
<member name="M:Elementor.Settings_Page.add_tab(Pchp.Core.PhpValue,Pchp.Core.PhpArray)">
<summary>
Add tab.
Register a new tab to a settings page.
</summary>
<param name="tab_id" type="string">Tab ID.</param>
<param name="tab_args" type="array">Optional. Tab arguments. Default is an empty array.</param>
</member>
<member name="M:Elementor.Settings_Page.add_section(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpArray)">
<summary>
Add section.
Register a new section to a tab.
</summary>
<param name="tab_id" type="string">Tab ID.</param>
<param name="section_id" type="string">Section ID.</param>
<param name="section_args" type="array">Optional. Section arguments. Default is an
empty array.</param>
</member>
<member name="M:Elementor.Settings_Page.add_field(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpArray)">
<summary>
Add field.
Register a new field to a section.
</summary>
<param name="tab_id" type="string">Tab ID.</param>
<param name="section_id" type="string">Section ID.</param>
<param name="field_id" type="string">Field ID.</param>
<param name="field_args" type="array">Field arguments.</param>
</member>
<member name="M:Elementor.Settings_Page.add_fields(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpArray)">
<summary>
Add fields.
Register multiple fields to a section.
</summary>
<param name="tab_id" type="string">Tab ID.</param>
<param name="section_id" type="string">Section ID.</param>
<param name="fields" type="array">{
An array of fields.

@type string $field_id   Field ID.
@type array  $field_args Field arguments.
}</param>
</member>
<member name="M:Elementor.Settings_Page.register_settings_fields">
<summary>
Register settings fields.
In each tab register his inner sections, and in each section register his
inner fields.
</summary>
</member>
<member name="M:Elementor.Settings_Page.display_settings_page">
<summary>
Display settings page.
Output the content for the settings page.
</summary>
</member>
<member name="M:Elementor.Settings_Page.ensure_tabs">
<summary>
Ensure tabs.
Make sure the settings page has tabs before inserting any new sections or
fields.
</summary>
</member>
<member name="M:Elementor.Settings_Page.should_render_tab(Pchp.Core.PhpValue)">
<summary>
Should it render the settings tab
</summary>
</member>
<member name="M:Elementor.Settings.register_admin_menu">
<summary>
Register admin menu.
Add new Elementor Settings admin menu.

Fired by `admin_menu` action.
</summary>
</member>
<member name="M:Elementor.Settings.menu_order(Pchp.Core.PhpValue)">
<summary>
Reorder the Elementor menu items in admin.
Based on WC.
</summary>
<param name="menu_order" type="array">Menu order.</param>
</member>
<member name="M:Elementor.Settings.register_pro_menu">
<summary>
Register Elementor Pro sub-menu.
Add new Elementor Pro sub-menu under the main Elementor menu.

Fired by `admin_menu` action.
</summary>
</member>
<member name="M:Elementor.Settings.register_knowledge_base_menu">
<summary>
Register Elementor knowledge base sub-menu.
Add new Elementor knowledge base sub-menu under the main Elementor menu.

Fired by `admin_menu` action.
</summary>
</member>
<member name="M:Elementor.Settings.handle_external_redirects">
<summary>
Go Elementor Pro.
Redirect the Elementor Pro page the clicking the Elementor Pro menu link.

Fired by `admin_init` action.
</summary>
</member>
<member name="M:Elementor.Settings.elementor_getting_started">
<summary>
Display settings page.
Output the content for the getting started page.
</summary>
</member>
<member name="M:Elementor.Settings.elementor_custom_fonts">
<summary>
Display settings page.
Output the content for the custom fonts page.
</summary>
</member>
<member name="M:Elementor.Settings.elementor_custom_icons">
<summary>
Display settings page.
Output the content for the custom icons page.
</summary>
</member>
<member name="M:Elementor.Settings.elementor_popups">
<summary>
Display settings page.
Output the content for the Popups page.
</summary>
</member>
<member name="M:Elementor.Settings.on_admin_init">
<summary>
On admin init.
Preform actions on WordPress admin initialization.

Fired by `admin_init` action.
</summary>
</member>
<member name="M:Elementor.Settings.admin_menu_change_name">
<summary>
Change "Settings" menu name.
Update the name of the Settings admin menu from "Elementor" to "Settings".

Fired by `admin_menu` action.
</summary>
</member>
<member name="M:Elementor.Settings.update_css_print_method">
<summary>
Update CSS print method.
Clear post CSS cache.

Fired by `add_option_elementor_css_print_method` and
`update_option_elementor_css_print_method` actions.
</summary>
</member>
<member name="M:Elementor.Settings.create_tabs">
<summary>
Create tabs.
Return the settings page tabs, sections and fields.
</summary>
<returns>An array with the settings page tabs, sections and fields.</returns>
</member>
<member name="M:Elementor.Settings.get_page_title">
<summary>
Get settings page title.
Retrieve the title for the settings page.
</summary>
<returns>Settings page title.</returns>
</member>
<member name="M:Elementor.Settings.maybe_remove_all_admin_notices">
</member>
<member name="M:Elementor.Settings.__construct">
<summary>
Settings page constructor.
Initializing Elementor "Settings" page.
</summary>
</member>
<member name="M:Elementor.Tools.register_admin_menu">
<summary>
Register admin menu.
Add new Elementor Tools admin menu.

Fired by `admin_menu` action.
</summary>
</member>
<member name="M:Elementor.Tools.ajax_elementor_clear_cache">
<summary>
Clear cache.
Delete post meta containing the post CSS file data. And delete the actual
CSS files from the upload directory.

Fired by `wp_ajax_elementor_clear_cache` action.
</summary>
</member>
<member name="M:Elementor.Tools.ajax_elementor_recreate_kit">
<summary>
Recreate kit.
Recreate default kit (only when default kit does not exist).

Fired by `wp_ajax_elementor_recreate_kit` action.
</summary>
</member>
<member name="M:Elementor.Tools.ajax_elementor_replace_url">
<summary>
Replace URLs.
Sends an ajax request to replace old URLs to new URLs. This method also
updates all the Elementor data.

Fired by `wp_ajax_elementor_replace_url` action.
</summary>
</member>
<member name="M:Elementor.Tools.post_elementor_rollback">
<summary>
Elementor version rollback.
Rollback to previous Elementor version.

Fired by `admin_post_elementor_rollback` action.
</summary>
</member>
<member name="M:Elementor.Tools.__construct">
<summary>
Tools page constructor.
Initializing Elementor "Tools" page.
</summary>
</member>
<member name="M:Elementor.Tools.create_tabs">
<summary>
Create tabs.
Return the tools page tabs, sections and fields.
</summary>
<returns>An array with the page tabs, sections and fields.</returns>
</member>
<member name="M:Elementor.Tools.get_page_title">
<summary>
Get tools page title.
Retrieve the title for the tools page.
</summary>
<returns>Tools page title.</returns>
</member>
<member name="M:Elementor.Tools.can_user_rollback_versions(Pchp.Core.Context)">
<summary>
Check if the current user can access the version control tab and rollback versions.
</summary>
</member>
<member name="M:Elementor.Settings_Validations.html(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Validate HTML field.
Sanitize content for allowed HTML tags and remove backslashes before quotes.
</summary>
<param name="input" type="string">Input field.</param>
<returns>Input field.</returns>
</member>
<member name="M:Elementor.Settings_Validations.checkbox_list(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Validate checkbox list.
Make sure that an empty checkbox list field will return an array.
</summary>
<param name="input" type="mixed">Input field.</param>
<returns>Input field.</returns>
</member>
<member name="M:Elementor.Settings_Validations.current_time(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Current Time
Used to return current time
</summary>
<param name="input" type="mixed">Input field.</param>
</member>
<member name="M:Elementor.Settings_Validations.clear_cache(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Clear cache.
Delete post meta containing the post CSS file data. And delete the actual
CSS files from the upload directory.
</summary>
<param name="input" type="mixed">Input field.</param>
<returns>Input field.</returns>
</member>
<member name="M:Elementor.Shapes.get_shapes(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Get shapes.
Retrieve a shape from the lists of supported shapes. If no shape specified
it will return all the supported shapes.
</summary>
<param name="shape" type="array">Optional. Specific shape. Default is `null`.</param>
<returns>The specified shape or a list of all the supported shapes.</returns>
</member>
<member name="M:Elementor.Shapes.filter_shapes(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Filter shapes.
Retrieve shapes filtered by a specific condition, from the list of
supported shapes.
</summary>
<param name="by" type="string">Specific condition to filter by.</param>
<param name="filter" type="string">Optional. Comparison condition to filter by.
Default is `include`.</param>
<returns>A list of filtered shapes.</returns>
</member>
<member name="M:Elementor.Shapes.get_shape_path(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Get shape path.
For a given shape, retrieve the file path.
</summary>
<param name="shape" type="string">The shape.</param>
<param name="is_negative" type="bool">Optional. Whether the file name is negative or
not. Default is `false`.</param>
<returns>Shape file path.</returns>
</member>
<member name="M:Elementor.Shapes.init_shapes(Pchp.Core.Context)">
<summary>
Init shapes.
Set the supported shapes.
</summary>
</member>
<member name="M:Elementor.Shapes.get_additional_shapes(Pchp.Core.Context)">
<summary>
Get Additional Shapes
Used to add custom shapes to elementor.
</summary>
</member>
<member name="M:Elementor.Shapes.get_additional_shapes_for_config(Pchp.Core.Context)">
<summary>
Get Additional Shapes For Config
Used to set additional shape paths for editor
</summary>
</member>
<member name="M:Elementor.Stylesheet.parse_rules(Pchp.Core.Context,Pchp.Core.PhpArray)">
<summary>
Parse CSS rules.
Goes over the list of CSS rules and generates the final CSS.
</summary>
<param name="rules" type="array">CSS rules.</param>
<returns>Parsed rules.</returns>
</member>
<member name="M:Elementor.Stylesheet.parse_properties(Pchp.Core.Context,Pchp.Core.PhpArray)">
<summary>
Parse CSS properties.
Goes over the selector properties and generates the CSS of the selector.
</summary>
<param name="properties" type="array">CSS properties.</param>
<returns>Parsed properties.</returns>
</member>
<member name="M:Elementor.Stylesheet.add_device(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Add device.
Add a new device to the devices list.
</summary>
<param name="device_name" type="string">Device name.</param>
<param name="device_max_point" type="string">Device maximum point.</param>
<returns>The current stylesheet class instance.</returns>
</member>
<member name="M:Elementor.Stylesheet.add_rules(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Add rules.
Add a new CSS rule to the rules list.
</summary>
<param name="selector" type="string">CSS selector.</param>
<param name="style_rules" type="array|string">Optional. Style rules. Default is `null`.</param>
<param name="query" type="array">Optional. Media query. Default is `null`.</param>
<returns>The current stylesheet class instance.</returns>
</member>
<member name="M:Elementor.Stylesheet.add_raw_css(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Add raw CSS.
Add a raw CSS rule.
</summary>
<param name="css" type="string">The raw CSS.</param>
<param name="device" type="string">Optional. The device. Default is empty.</param>
<returns>The current stylesheet class instance.</returns>
</member>
<member name="M:Elementor.Stylesheet.get_rules(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Get CSS rules.
Retrieve the CSS rules.
</summary>
<param name="device" type="string">Optional. The device. Default is empty.</param>
<param name="selector" type="string">Optional. CSS selector. Default is empty.</param>
<param name="property" type="string">Optional. CSS property. Default is empty.</param>
<returns>CSS rules, or `null` if not rules found.</returns>
</member>
<member name="M:Elementor.Stylesheet.__toString">
<summary>
To string.
This magic method responsible for parsing the rules into one CSS string.
</summary>
<returns>CSS style.</returns>
</member>
<member name="M:Elementor.Stylesheet.query_to_hash(Pchp.Core.PhpArray)">
<summary>
Query to hash.
Turns the media query into a hashed string that represents the query
endpoint in the rules list.
</summary>
<param name="query" type="array">CSS media query.</param>
<returns>Hashed string of the query.</returns>
</member>
<member name="M:Elementor.Stylesheet.hash_to_query(Pchp.Core.PhpValue)">
<summary>
Hash to query.
Turns the hashed string to an array that contains the data of the query
endpoint.
</summary>
<param name="hash" type="string">Hashed string of the query.</param>
<returns>Media query data.</returns>
</member>
<member name="M:Elementor.Stylesheet.add_query_hash(Pchp.Core.PhpValue)">
<summary>
Add query hash.
Register new endpoint query and sort the rules the way they should be
displayed in the final stylesheet based on the device and the viewport
width.
</summary>
<param name="query_hash" type="string">Hashed string of the query.</param>
</member>
<member name="M:Elementor.Stylesheet.get_query_hash_style_format(Pchp.Core.PhpValue)">
<summary>
Get query hash style format.
Retrieve formated media query rule with the endpoint width settings.

The method returns the CSS `@media` rule and supported viewport width in
pixels. It can also handel multiple width endpoints.
</summary>
<param name="query_hash" type="string">The hash of the query.</param>
<returns>CSS media query.</returns>
</member>
<member name="M:Elementor.TemplateLibrary.Classes.Import_Images.get_hash_image(Pchp.Core.PhpValue)">
<summary>
Get image hash.
Retrieve the sha1 hash of the image URL.
</summary>
<param name="attachment_url" type="string">The attachment URL.</param>
<returns>Image hash.</returns>
</member>
<member name="M:Elementor.TemplateLibrary.Classes.Import_Images.get_saved_image(Pchp.Core.PhpValue)">
<summary>
Get saved image.
Retrieve new image ID, if the image has a new ID after the import.
</summary>
<param name="attachment" type="array">The attachment.</param>
<returns>New image ID  or false.</returns>
</member>
<member name="M:Elementor.TemplateLibrary.Classes.Import_Images.import(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Import image.
Import a single image from a remote server, upload the image WordPress
uploads folder, create a new attachment in the database and updates the
attachment metadata.
</summary>
<param name="attachment" type="array">The attachment.</param>
<param name="parent_post_id" type="int">Optional</param>
<returns>Imported image data, or false.</returns>
</member>
<member name="M:Elementor.TemplateLibrary.Classes.Import_Images.__construct">
<summary>
Template library import images constructor.
Initializing the images import class used by the template library through
the WordPress Filesystem API.
</summary>
</member>
<member name="M:Elementor.TemplateLibrary.Manager.__construct">
<summary>
Template library manager constructor.
Initializing the template library manager by registering default template
sources and initializing ajax calls.
</summary>
</member>
<member name="M:Elementor.TemplateLibrary.Manager.add_actions">
</member>
<member name="M:Elementor.TemplateLibrary.Manager.get_import_images_instance">
<summary>
Get `Import_Images` instance.
Retrieve the instance of the `Import_Images` class.
</summary>
<returns>Imported images instance.</returns>
</member>
<member name="M:Elementor.TemplateLibrary.Manager.register_source(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Register template source.
Used to register new template sources displayed in the template library.
</summary>
<param name="source_class" type="string">The name of source class.</param>
<param name="args" type="array">Optional. Class arguments. Default is an
empty array.</param>
<returns>True if the source was registered, `WP_Error`
otherwise.</returns>
</member>
<member name="M:Elementor.TemplateLibrary.Manager.unregister_source(Pchp.Core.PhpValue)">
<summary>
Unregister template source.
Remove an existing template sources from the list of registered template
sources.
</summary>
<param name="id" type="string">The source ID.</param>
<returns>Whether the source was unregistered.</returns>
</member>
<member name="M:Elementor.TemplateLibrary.Manager.get_registered_sources">
<summary>
Get registered template sources.
Retrieve registered template sources.
</summary>
<returns>Registered template sources.</returns>
</member>
<member name="M:Elementor.TemplateLibrary.Manager.get_source(Pchp.Core.PhpValue)">
<summary>
Get template source.
Retrieve single template sources for a given template ID.
</summary>
<param name="id" type="string">The source ID.</param>
<returns>Template sources if one exist, False otherwise.</returns>
</member>
<member name="M:Elementor.TemplateLibrary.Manager.get_templates">
<summary>
Get templates.
Retrieve all the templates from all the registered sources.
</summary>
<returns>Templates array.</returns>
</member>
<member name="M:Elementor.TemplateLibrary.Manager.get_library_data(Pchp.Core.PhpArray)">
<summary>
Get library data.
Retrieve the library data.
</summary>
<param name="args" type="array">Library arguments.</param>
<returns>Library data.</returns>
</member>
<member name="M:Elementor.TemplateLibrary.Manager.save_template(Pchp.Core.PhpArray)">
<summary>
Save template.
Save new or update existing template on the database.
</summary>
<param name="args" type="array">Template arguments.</param>
<returns>The ID of the saved/updated template.</returns>
</member>
<member name="M:Elementor.TemplateLibrary.Manager.update_template(Pchp.Core.PhpArray)">
<summary>
Update template.
Update template on the database.
</summary>
<param name="template_data" type="array">New template data.</param>
<returns>Template sources instance if the templates
was updated, `WP_Error` otherwise.</returns>
</member>
<member name="M:Elementor.TemplateLibrary.Manager.update_templates(Pchp.Core.PhpArray)">
<summary>
Update templates.
Update template on the database.
</summary>
<param name="args" type="array">Template arguments.</param>
<returns>True if templates updated, `WP_Error` otherwise.</returns>
</member>
<member name="M:Elementor.TemplateLibrary.Manager.get_template_data(Pchp.Core.PhpArray)">
<summary>
Get template data.
Retrieve the template data.
</summary>
<param name="args" type="array">Template arguments.</param>
<returns>??</returns>
</member>
<member name="M:Elementor.TemplateLibrary.Manager.delete_template(Pchp.Core.PhpArray)">
<summary>
Delete template.
Delete template from the database.
</summary>
<param name="args" type="array">Template arguments.</param>
<returns>Post data on success, false or null
or 'WP_Error' on failure.</returns>
</member>
<member name="M:Elementor.TemplateLibrary.Manager.export_template(Pchp.Core.PhpArray)">
<summary>
Export template.
Export template to a file.
</summary>
<param name="args" type="array">Template arguments.</param>
<returns>Whether the export succeeded or failed.</returns>
</member>
<member name="M:Elementor.TemplateLibrary.Manager.direct_import_template">
</member>
<member name="M:Elementor.TemplateLibrary.Manager.import_template(Pchp.Core.PhpArray)">
<summary>
Import template.
Import template from a file.
</summary>
<param name="data" type="array"></param>
<returns>Whether the export succeeded or failed.</returns>
</member>
<member name="M:Elementor.TemplateLibrary.Manager.mark_template_as_favorite(Pchp.Core.PhpValue)">
<summary>
Mark template as favorite.
Add the template to the user favorite templates.
</summary>
<param name="args" type="array">Template arguments.</param>
<returns>Whether the template marked as favorite.</returns>
</member>
<member name="M:Elementor.TemplateLibrary.Manager.register_default_sources">
<summary>
Register default template sources.
Register the 'local' and 'remote' template sources that Elementor use by
default.
</summary>
</member>
<member name="M:Elementor.TemplateLibrary.Manager.handle_ajax_request(Pchp.Core.PhpValue,Pchp.Core.PhpArray)">
<summary>
Handle ajax request.
Fire authenticated ajax actions for any given ajax request.
</summary>
<param name="ajax_request" type="string">Ajax request.</param>
<param name="data" type="array"></param>
</member>
<member name="M:Elementor.TemplateLibrary.Manager.register_ajax_actions(Elementor.Core.Common.Modules.Ajax.Module)">
<summary>
Init ajax calls.
Initialize template library ajax calls for allowed ajax requests.
</summary>
<param name="ajax" type="Ajax"></param>
</member>
<member name="M:Elementor.TemplateLibrary.Manager.handle_direct_actions">
</member>
<member name="M:Elementor.TemplateLibrary.Manager.on_direct_import_template_success">
<summary>
On successful template import.
Redirect the user to the template library after template import was
successful finished.
</summary>
</member>
<member name="M:Elementor.TemplateLibrary.Manager.handle_direct_action_error(Pchp.Core.PhpValue)">
</member>
<member name="M:Elementor.TemplateLibrary.Manager.ensure_args(Pchp.Core.PhpArray,Pchp.Core.PhpArray)">
<summary>
Ensure arguments exist.
Checks whether the required arguments exist in the specified arguments.
</summary>
<param name="required_args" type="array">Required arguments to check whether they
exist.</param>
<param name="specified_args" type="array">The list of all the specified arguments to
check against.</param>
<returns>True on success, 'WP_Error' otherwise.</returns>
</member>
<member name="M:Elementor.TemplateLibrary.Source_Base.get_id">
<summary>
Get template ID.
Retrieve the template ID.
</summary>
</member>
<member name="M:Elementor.TemplateLibrary.Source_Base.get_title">
<summary>
Get template title.
Retrieve the template title.
</summary>
</member>
<member name="M:Elementor.TemplateLibrary.Source_Base.register_data">
<summary>
Register template data.
Used to register custom template data like a post type, a taxonomy or any
other data.
</summary>
</member>
<member name="M:Elementor.TemplateLibrary.Source_Base.get_items(Pchp.Core.PhpValue)">
<summary>
Get templates.
Retrieve templates from the template library.
</summary>
<param name="args" type="array">Optional. Filter templates list based on a set of
arguments. Default is an empty array.</param>
</member>
<member name="M:Elementor.TemplateLibrary.Source_Base.get_item(Pchp.Core.PhpValue)">
<summary>
Get template.
Retrieve a single template from the template library.
</summary>
<param name="template_id" type="int">The template ID.</param>
</member>
<member name="M:Elementor.TemplateLibrary.Source_Base.get_data(Pchp.Core.PhpArray)">
<summary>
Get template data.
Retrieve a single template data from the template library.
</summary>
<param name="args" type="array">Custom template arguments.</param>
</member>
<member name="M:Elementor.TemplateLibrary.Source_Base.delete_template(Pchp.Core.PhpValue)">
<summary>
Delete template.
Delete template from the database.
</summary>
<param name="template_id" type="int">The template ID.</param>
</member>
<member name="M:Elementor.TemplateLibrary.Source_Base.save_item(Pchp.Core.PhpValue)">
<summary>
Save template.
Save new or update existing template on the database.
</summary>
<param name="template_data" type="array">The template data.</param>
</member>
<member name="M:Elementor.TemplateLibrary.Source_Base.update_item(Pchp.Core.PhpValue)">
<summary>
Update template.
Update template on the database.
</summary>
<param name="new_data" type="array">New template data.</param>
</member>
<member name="M:Elementor.TemplateLibrary.Source_Base.export_template(Pchp.Core.PhpValue)">
<summary>
Export template.
Export template to a file.
</summary>
<param name="template_id" type="int">The template ID.</param>
</member>
<member name="M:Elementor.TemplateLibrary.Source_Base.__construct">
<summary>
Template library source base constructor.
Initializing the template library source base by registering custom
template data.
</summary>
</member>
<member name="M:Elementor.TemplateLibrary.Source_Base.mark_as_favorite(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Mark template as favorite.
Update user meta containing his favorite templates. For a given template
ID, add the template to the favorite templates or remove it from the
favorites, based on the `favorite` parameter.
</summary>
<param name="template_id" type="int">The template ID.</param>
<param name="favorite" type="bool">Optional. Whether the template is marked as
favorite, or not. Default is true.</param>
<returns>User meta ID if the key didn't exist, true on successful
update, false on failure.</returns>
</member>
<member name="M:Elementor.TemplateLibrary.Source_Base.get_user_meta(Pchp.Core.PhpValue)">
<summary>
Get current user meta.
Retrieve Elementor meta data for the current user.
</summary>
<param name="item" type="string">Optional. User meta key. Default is null.</param>
<returns>An array of user meta data, or null otherwise.</returns>
</member>
<member name="M:Elementor.TemplateLibrary.Source_Base.update_user_meta(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Update current user meta.
Update user meta data based on meta key an value.
</summary>
<param name="key" type="string">Optional. User meta key.</param>
<param name="value" type="mixed">Optional. User meta value.</param>
<returns>User meta ID if the key didn't exist, true on successful
update, false on failure.</returns>
</member>
<member name="M:Elementor.TemplateLibrary.Source_Base.replace_elements_ids(Pchp.Core.PhpValue)">
<summary>
Replace elements IDs.
For any given Elementor content/data, replace the IDs with new randomly
generated IDs.
</summary>
<param name="content" type="array">Any type of Elementor data.</param>
<returns>Iterated data.</returns>
</member>
<member name="M:Elementor.TemplateLibrary.Source_Base.get_user_meta_prefix">
<summary>
Get Elementor library user meta prefix.
Retrieve user meta prefix used to save Elementor data.
</summary>
<returns>User meta prefix.</returns>
</member>
<member name="M:Elementor.TemplateLibrary.Source_Base.process_export_import_content(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Process content for export/import.
Process the content and all the inner elements, and prepare all the
elements data for export/import.
</summary>
<param name="content" type="array">A set of elements.</param>
<param name="method" type="string">Accepts either `on_export` to export data or
`on_import` to import data.</param>
<returns>Processed content data.</returns>
</member>
<member name="M:Elementor.TemplateLibrary.Source_Base.process_element_export_import_content(Elementor.Controls_Stack,Pchp.Core.PhpValue)">
<summary>
Process single element content for export/import.
Process any given element and prepare the element data for export/import.
</summary>
<param name="element" type="Controls_Stack"></param>
<param name="method" type="string"></param>
<returns>Processed element data.</returns>
</member>
<member name="M:Elementor.TemplateLibrary.Source_Local.get_template_types(Pchp.Core.Context)">
</member>
<member name="M:Elementor.TemplateLibrary.Source_Local.get_template_type(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Get local template type.
Retrieve the template type from the post meta.
</summary>
<param name="template_id" type="int">The template ID.</param>
<returns>The value of meta data field.</returns>
</member>
<member name="M:Elementor.TemplateLibrary.Source_Local.is_base_templates_screen(Pchp.Core.Context)">
<summary>
Is base templates screen.
Whether the current screen base is edit and the post type is template.
</summary>
<returns>True on base templates screen, False otherwise.</returns>
</member>
<member name="M:Elementor.TemplateLibrary.Source_Local.add_template_type(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Add template type.
Register new template type to the list of supported local template types.
</summary>
<param name="type" type="string">Template type.</param>
</member>
<member name="M:Elementor.TemplateLibrary.Source_Local.remove_template_type(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Remove template type.
Remove existing template type from the list of supported local template
types.
</summary>
<param name="type" type="string">Template type.</param>
</member>
<member name="M:Elementor.TemplateLibrary.Source_Local.get_id">
<summary>
Get local template ID.
Retrieve the local template ID.
</summary>
<returns>The local template ID.</returns>
</member>
<member name="M:Elementor.TemplateLibrary.Source_Local.get_title">
<summary>
Get local template title.
Retrieve the local template title.
</summary>
<returns>The local template title.</returns>
</member>
<member name="M:Elementor.TemplateLibrary.Source_Local.register_data">
<summary>
Register local template data.
Used to register custom template data like a post type, a taxonomy or any
other data.

The local template class registers a new `elementor_library` post type
and an `elementor_library_type` taxonomy. They are used to store data for
local templates saved by the user on his site.
</summary>
</member>
<member name="M:Elementor.TemplateLibrary.Source_Local.admin_menu_reorder">
<summary>
Remove Add New item from admin menu.
Fired by `admin_menu` action.
</summary>
</member>
<member name="M:Elementor.TemplateLibrary.Source_Local.get_items(Pchp.Core.PhpValue)">
<summary>
Get local templates.
Retrieve local templates saved by the user on his site.
</summary>
<param name="args" type="array">Optional. Filter templates based on a set of
arguments. Default is an empty array.</param>
<returns>Local templates.</returns>
</member>
<member name="M:Elementor.TemplateLibrary.Source_Local.save_item(Pchp.Core.PhpValue)">
<summary>
Save local template.
Save new or update existing template on the database.
</summary>
<param name="template_data" type="array">Local template data.</param>
<returns>The ID of the saved/updated template, `WP_Error` otherwise.</returns>
</member>
<member name="M:Elementor.TemplateLibrary.Source_Local.update_item(Pchp.Core.PhpValue)">
<summary>
Update local template.
Update template on the database.
</summary>
<param name="new_data" type="array">New template data.</param>
<returns>True if template updated, `WP_Error` otherwise.</returns>
</member>
<member name="M:Elementor.TemplateLibrary.Source_Local.get_item(Pchp.Core.PhpValue)">
<summary>
Get local template.
Retrieve a single local template saved by the user on his site.
</summary>
<param name="template_id" type="int">The template ID.</param>
<returns>Local template.</returns>
</member>
<member name="M:Elementor.TemplateLibrary.Source_Local.get_data(Pchp.Core.PhpArray)">
<summary>
Get template data.
Retrieve the data of a single local template saved by the user on his site.
</summary>
<param name="args" type="array">Custom template arguments.</param>
<returns>Local template data.</returns>
</member>
<member name="M:Elementor.TemplateLibrary.Source_Local.delete_template(Pchp.Core.PhpValue)">
<summary>
Delete local template.
Delete template from the database.
</summary>
<param name="template_id" type="int">The template ID.</param>
<returns>Post data on success, false or null
or 'WP_Error' on failure.</returns>
</member>
<member name="M:Elementor.TemplateLibrary.Source_Local.export_template(Pchp.Core.PhpValue)">
<summary>
Export local template.
Export template to a file.
</summary>
<param name="template_id" type="int">The template ID.</param>
<returns>WordPress error if template export failed.</returns>
</member>
<member name="M:Elementor.TemplateLibrary.Source_Local.export_multiple_templates(Pchp.Core.PhpArray)">
<summary>
Export multiple local templates.
Export multiple template to a ZIP file.
</summary>
<param name="template_ids" type="array">An array of template IDs.</param>
<returns>WordPress error if export failed.</returns>
</member>
<member name="M:Elementor.TemplateLibrary.Source_Local.import_template(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Import local template.
Import template from a file.
</summary>
<param name="name" type="string">- The file name</param>
<param name="path" type="string">- The file path</param>
<returns>An array of items on success, 'WP_Error' on failure.</returns>
</member>
<member name="M:Elementor.TemplateLibrary.Source_Local.post_row_actions(Pchp.Core.PhpValue,WP_Post)">
<summary>
Post row actions.
Add an export link to the template library action links table list.

Fired by `post_row_actions` filter.
</summary>
<param name="actions" type="array">An array of row action links.</param>
<param name="post" type="\WP_Post">The post object.</param>
<returns>An updated array of row action links.</returns>
</member>
<member name="M:Elementor.TemplateLibrary.Source_Local.admin_import_template_form">
<summary>
Admin import template form.
The import form displayed in "My Library" screen in WordPress dashboard.

The form allows the user to import template in json/zip format to the site.

Fired by `admin_footer` action.
</summary>
</member>
<member name="M:Elementor.TemplateLibrary.Source_Local.block_template_frontend">
<summary>
Block template frontend
Don't display the single view of the template library post type in the
frontend, for users that don't have the proper permissions.

Fired by `template_redirect` action.
</summary>
</member>
<member name="M:Elementor.TemplateLibrary.Source_Local.is_template_supports_export(Pchp.Core.PhpValue)">
<summary>
Is template library supports export.
whether the template library supports export.

Template saved by the user locally on his site, support export by default
but this can be changed using a filter.
</summary>
<param name="template_id" type="int">The template ID.</param>
<returns>Whether the template library supports export.</returns>
</member>
<member name="M:Elementor.TemplateLibrary.Source_Local.remove_elementor_post_state_from_library(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Remove Elementor post state.
Remove the 'elementor' post state from the display states of the post.

Used to remove the 'elementor' post state from the template library items.

Fired by `display_post_states` filter.
</summary>
<param name="post_states" type="array">An array of post display states.</param>
<param name="post" type="\WP_Post">The current post object.</param>
<returns>Updated array of post display states.</returns>
</member>
<member name="M:Elementor.TemplateLibrary.Source_Local.get_export_link(Pchp.Core.PhpValue)">
<summary>
Get template export link.
Retrieve the link used to export a single template based on the template
ID.
</summary>
<param name="template_id" type="int">The template ID.</param>
<returns>Template export URL.</returns>
</member>
<member name="M:Elementor.TemplateLibrary.Source_Local.on_save_post(Pchp.Core.PhpValue,WP_Post)">
<summary>
On template save.
Run this method when template is being saved.

Fired by `save_post` action.
</summary>
<param name="post_id" type="int">Post ID.</param>
<param name="post" type="\WP_Post">The current post object.</param>
</member>
<member name="M:Elementor.TemplateLibrary.Source_Local.save_item_type(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Save item type.
When saving/updating templates, this method is used to update the post
meta data and the taxonomy.
</summary>
<param name="post_id" type="int">Post ID.</param>
<param name="type" type="string">Item type.</param>
</member>
<member name="M:Elementor.TemplateLibrary.Source_Local.admin_add_bulk_export_action(Pchp.Core.PhpValue)">
<summary>
Bulk export action.
Adds an 'Export' action to the Bulk Actions drop-down in the template
library.

Fired by `bulk_actions-edit-elementor_library` filter.
</summary>
<param name="actions" type="array">An array of the available bulk actions.</param>
<returns>An array of the available bulk actions.</returns>
</member>
<member name="M:Elementor.TemplateLibrary.Source_Local.admin_export_multiple_templates(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Add bulk export action.
Handles the template library bulk export action.

Fired by `handle_bulk_actions-edit-elementor_library` filter.
</summary>
<param name="redirect_to" type="string">The redirect URL.</param>
<param name="action" type="string">The action being taken.</param>
<param name="post_ids" type="array">The items to take the action on.</param>
</member>
<member name="M:Elementor.TemplateLibrary.Source_Local.admin_print_tabs(Pchp.Core.PhpValue)">
<summary>
Print admin tabs.
Used to output the template library tabs with their labels.

Fired by `views_edit-elementor_library` filter.
</summary>
<param name="views" type="array">An array of available list table views.</param>
<returns>An updated array of available list table views.</returns>
</member>
<member name="M:Elementor.TemplateLibrary.Source_Local.maybe_render_blank_state(Pchp.Core.PhpValue,Pchp.Core.PhpArray)">
<summary>
Maybe render blank state.
When the template library has no saved templates, display a blank admin page offering
to create the very first template.

Fired by `manage_posts_extra_tablenav` action.
</summary>
<param name="which" type="string">The location of the extra table nav markup: 'top' or 'bottom'.</param>
<param name="args" type="array"></param>
</member>
<member name="M:Elementor.TemplateLibrary.Source_Local.print_blank_state_template(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Print Blank State Template
When the an entity (CPT, Taxonomy...etc) has no saved items, print a blank admin page offering
to create the very first item.

This method is public because it needs to be accessed from outside the Source_Local
</summary>
<param name="current_type_label" type="string">The Entity title</param>
<param name="href" type="string">The URL for the 'Add New' button</param>
<param name="description" type="string">The sub title describing the Entity (Post Type, Taxonomy, etc.)</param>
</member>
<member name="M:Elementor.TemplateLibrary.Source_Local.import_single_template(Pchp.Core.PhpValue)">
<summary>
Import single template.
Import template from a file to the database.
</summary>
<param name="file_path" type="string">File name.</param>
<returns>Local template array, or template ID, or
`WP_Error`.</returns>
</member>
<member name="M:Elementor.TemplateLibrary.Source_Local.prepare_template_export(Pchp.Core.PhpValue)">
<summary>
Prepare template to export.
Retrieve the relevant template data and return them as an array.
</summary>
<param name="template_id" type="int">The template ID.</param>
<returns>Exported template data.</returns>
</member>
<member name="M:Elementor.TemplateLibrary.Source_Local.send_file_headers(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Send file headers.
Set the file header when export template data to a file.
</summary>
<param name="file_name" type="string">File name.</param>
<param name="file_size" type="int">File size.</param>
</member>
<member name="M:Elementor.TemplateLibrary.Source_Local.get_template_label_by_type(Pchp.Core.PhpValue)">
<summary>
Get template label by type.
Retrieve the template label for any given template type.
</summary>
<param name="template_type" type="string">Template type.</param>
<returns>Template label.</returns>
</member>
<member name="M:Elementor.TemplateLibrary.Source_Local.admin_query_filter_types(WP_Query)">
<summary>
Filter template types in admin query.
Update the template types in the main admin query.

Fired by `parse_query` action.
</summary>
<param name="query" type="\WP_Query">The `WP_Query` instance.</param>
</member>
<member name="M:Elementor.TemplateLibrary.Source_Local.add_actions">
<summary>
Add template library actions.
Register filters and actions for the template library.
</summary>
</member>
<member name="M:Elementor.TemplateLibrary.Source_Local.admin_columns_content(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:Elementor.TemplateLibrary.Source_Local.admin_columns_headers(Pchp.Core.PhpValue)">
</member>
<member name="M:Elementor.TemplateLibrary.Source_Local.remove_elementor_cpt_from_sitemap(Pchp.Core.PhpArray)">
<param name="post_types" type="array"></param>
</member>
<member name="M:Elementor.TemplateLibrary.Source_Local.__construct">
<summary>
Template library local source constructor.
Initializing the template library local source base by registering custom
template data and running custom actions.
</summary>
</member>
<member name="M:Elementor.TemplateLibrary.Source_Remote.get_id">
<summary>
Get remote template ID.
Retrieve the remote template ID.
</summary>
<returns>The remote template ID.</returns>
</member>
<member name="M:Elementor.TemplateLibrary.Source_Remote.get_title">
<summary>
Get remote template title.
Retrieve the remote template title.
</summary>
<returns>The remote template title.</returns>
</member>
<member name="M:Elementor.TemplateLibrary.Source_Remote.register_data">
<summary>
Register remote template data.
Used to register custom template data like a post type, a taxonomy or any
other data.
</summary>
</member>
<member name="M:Elementor.TemplateLibrary.Source_Remote.get_items(Pchp.Core.PhpValue)">
<summary>
Get remote templates.
Retrieve remote templates from Elementor.com servers.
</summary>
<param name="args" type="array">Optional. Nou used in remote source.</param>
<returns>Remote templates.</returns>
</member>
<member name="M:Elementor.TemplateLibrary.Source_Remote.get_item(Pchp.Core.PhpValue)">
<summary>
Get remote template.
Retrieve a single remote template from Elementor.com servers.
</summary>
<param name="template_id" type="int">The template ID.</param>
<returns>Remote template.</returns>
</member>
<member name="M:Elementor.TemplateLibrary.Source_Remote.save_item(Pchp.Core.PhpValue)">
<summary>
Save remote template.
Remote template from Elementor.com servers cannot be saved on the
database as they are retrieved from remote servers.
</summary>
<param name="template_data" type="array">Remote template data.</param>
</member>
<member name="M:Elementor.TemplateLibrary.Source_Remote.update_item(Pchp.Core.PhpValue)">
<summary>
Update remote template.
Remote template from Elementor.com servers cannot be updated on the
database as they are retrieved from remote servers.
</summary>
<param name="new_data" type="array">New template data.</param>
</member>
<member name="M:Elementor.TemplateLibrary.Source_Remote.delete_template(Pchp.Core.PhpValue)">
<summary>
Delete remote template.
Remote template from Elementor.com servers cannot be deleted from the
database as they are retrieved from remote servers.
</summary>
<param name="template_id" type="int">The template ID.</param>
</member>
<member name="M:Elementor.TemplateLibrary.Source_Remote.export_template(Pchp.Core.PhpValue)">
<summary>
Export remote template.
Remote template from Elementor.com servers cannot be exported from the
database as they are retrieved from remote servers.
</summary>
<param name="template_id" type="int">The template ID.</param>
</member>
<member name="M:Elementor.TemplateLibrary.Source_Remote.get_data(Pchp.Core.PhpArray,Pchp.Core.PhpValue)">
<summary>
Get remote template data.
Retrieve the data of a single remote template from Elementor.com servers.
</summary>
<param name="args" type="array">Custom template arguments.</param>
<param name="context" type="string">Optional. The context. Default is `display`.</param>
<returns>Remote Template data.</returns>
</member>
<member name="M:Elementor.TemplateLibrary.Source_Remote.prepare_template(Pchp.Core.PhpArray)">
</member>
<member name="M:Elementor.Tracker.init(Pchp.Core.Context)">
<summary>
Init.
Initialize Elementor tracker.
</summary>
</member>
<member name="M:Elementor.Tracker.check_for_settings_optin(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Check for settings opt-in.
Checks whether the site admin has opted-in for data tracking, or not.
</summary>
<param name="new_value" type="string">Allowed tracking value.</param>
<returns>Return `yes` if tracking allowed, `no` otherwise.</returns>
</member>
<member name="M:Elementor.Tracker.send_tracking_data(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Send tracking data.
Decide whether to send tracking data, or not.
</summary>
<param name="override" type="bool"></param>
</member>
<member name="M:Elementor.Tracker.is_allow_track(Pchp.Core.Context)">
<summary>
Is allow track.
Checks whether the site admin has opted-in for data tracking, or not.
</summary>
</member>
<member name="M:Elementor.Tracker.handle_tracker_actions(Pchp.Core.Context)">
<summary>
Handle tracker actions.
Check if the user opted-in or opted-out and update the database.

Fired by `admin_init` action.
</summary>
</member>
<member name="M:Elementor.Tracker.is_notice_shown(Pchp.Core.Context)">
</member>
<member name="M:Elementor.Tracker.get_system_reports_data(Pchp.Core.Context)">
<summary>
Get system reports data.
Retrieve the data from system reports.
</summary>
<returns>The data from system reports.</returns>
</member>
<member name="M:Elementor.Tracker.get_last_send_time(Pchp.Core.Context)">
<summary>
Get last send time.
Retrieve the last time tracking data was sent.
</summary>
<returns>The last time tracking data was sent, or false if
tracking data never sent.</returns>
</member>
<member name="M:Elementor.Tracker.get_non_elementor_posts_usage(Pchp.Core.Context)">
<summary>
Get non elementor post usages.
Retrieve the number of posts that not using elementor.
</summary>
<returns>The number of posts using not used by Elementor grouped by post types
and post status.</returns>
</member>
<member name="M:Elementor.Tracker.get_posts_usage(Pchp.Core.Context)">
<summary>
Get posts usage.
Retrieve the number of posts using Elementor.
</summary>
<returns>The number of posts using Elementor grouped by post types
and post status.</returns>
</member>
<member name="M:Elementor.Tracker.get_library_usage(Pchp.Core.Context)">
<summary>
Get library usage.
Retrieve the number of Elementor library items saved.
</summary>
<returns>The number of Elementor library items grouped by post types
and meta value.</returns>
</member>
<member name="M:Elementor.Tracker.get_settings_general_usage(Pchp.Core.Context)">
<summary>
Get usage of general settings.
'Elementor-&gt;Settings-&gt;General'.
</summary>
</member>
<member name="M:Elementor.Tracker.get_settings_advanced_usage(Pchp.Core.Context)">
<summary>
Get usage of advanced settings.
'Elementor-&gt;Settings-&gt;Advanced'.
</summary>
</member>
<member name="M:Elementor.Tracker.get_settings_experiments_usage(Pchp.Core.Context)">
<summary>
Get usage of experiments settings.
'Elementor-&gt;Settings-&gt;Experiments'.
</summary>
</member>
<member name="M:Elementor.Tracker.get_tools_general_usage(Pchp.Core.Context)">
<summary>
Get usage of general tools.
'Elementor-&gt;Tools-&gt;General'.
</summary>
</member>
<member name="M:Elementor.Tracker.get_tools_version_control_usage(Pchp.Core.Context)">
<summary>
Get usage of 'version control' tools.
'Elementor-&gt;Tools-&gt;Version Control'.
</summary>
</member>
<member name="M:Elementor.Tracker.get_tools_maintenance_usage(Pchp.Core.Context)">
<summary>
Get usage of 'maintenance' tools.
'Elementor-&gt;Tools-&gt;Maintenance'.
</summary>
</member>
<member name="M:Elementor.Tracker.get_tracking_data(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Get the tracking data
Retrieve tracking data and apply filter
</summary>
<param name="is_first_time" type="bool"></param>
</member>
<member name="M:Elementor.Tracker.get_tracking_data_from_settings(Pchp.Core.Context,Pchp.Core.PhpValue)">
<param name="tab_name" type="string"></param>
</member>
<member name="M:Elementor.Tracker.get_tracking_data_from_tools(Pchp.Core.Context,Pchp.Core.PhpValue)">
<param name="tab_name" type="string"></param>
</member>
<member name="M:Elementor.User.init(Pchp.Core.Context)">
<summary>
Init.
Initialize Elementor user.
</summary>
</member>
<member name="M:Elementor.User.register_ajax_actions(Pchp.Core.Context,Elementor.Core.Common.Modules.Ajax.Module)">
</member>
<member name="M:Elementor.User.is_current_user_can_edit(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Is current user can edit.
Whether the current user can edit the post.
</summary>
<param name="post_id" type="int">Optional. The post ID. Default is `0`.</param>
<returns>Whether the current user can edit the post.</returns>
</member>
<member name="M:Elementor.User.is_current_user_in_editing_black_list(Pchp.Core.Context)">
<summary>
Is current user can access elementor.
Whether the current user role is not excluded by Elementor Settings.
</summary>
<returns>True if can access, False otherwise.</returns>
</member>
<member name="M:Elementor.User.is_current_user_can_edit_post_type(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Is current user can edit post type.
Whether the current user can edit the given post type.
</summary>
<param name="post_type" type="string">the post type slug to check.</param>
<returns>True if can edit, False otherwise.</returns>
</member>
<member name="M:Elementor.User.get_user_notices(Pchp.Core.Context)">
<summary>
Get user notices.
Retrieve the list of notices for the current user.
</summary>
<returns>A list of user notices.</returns>
</member>
<member name="M:Elementor.User.is_user_notice_viewed(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Is user notice viewed.
Whether the notice was viewed by the user.
</summary>
<param name="notice_id" type="int">The notice ID.</param>
<returns>Whether the notice was viewed by the user.</returns>
</member>
<member name="M:Elementor.User.ajax_set_admin_notice_viewed(Pchp.Core.Context)">
<summary>
Set admin notice as viewed.
Flag the user admin notice as viewed using an authenticated ajax request.

Fired by `wp_ajax_elementor_set_admin_notice_viewed` action.
</summary>
</member>
<member name="M:Elementor.User.set_introduction_viewed(Pchp.Core.Context,Pchp.Core.PhpArray)">
</member>
<member name="M:Elementor.User.get_introduction_meta(Pchp.Core.Context,Pchp.Core.PhpValue)">
<param name="key" type="string"></param>
</member>
<member name="M:Elementor.Utils.is_ajax(Pchp.Core.Context)">
<summary>
Is ajax.
Whether the current request is a WordPress ajax request.
</summary>
<returns>True if it's a WordPress ajax request, false otherwise.</returns>
</member>
<member name="M:Elementor.Utils.is_wp_cli(Pchp.Core.Context)">
<summary>
Is WP CLI.
</summary>
</member>
<member name="M:Elementor.Utils.is_script_debug(Pchp.Core.Context)">
<summary>
Is script debug.
Whether script debug is enabled or not.
</summary>
<returns>True if it's a script debug is active, false otherwise.</returns>
</member>
<member name="M:Elementor.Utils.get_pro_link(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Get pro link.
Retrieve the link to Elementor Pro.
</summary>
<param name="link" type="string">URL to Elementor pro.</param>
<returns>Elementor pro link.</returns>
</member>
<member name="M:Elementor.Utils.replace_urls(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Replace URLs.
Replace old URLs to new URLs. This method also updates all the Elementor data.
</summary>
</member>
<member name="M:Elementor.Utils.is_post_support(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Is post supports Elementor.
Whether the post supports editing with Elementor.
</summary>
<param name="post_id" type="int">Optional. Post ID. Default is `0`.</param>
<returns>True if post supports editing with Elementor, false otherwise.</returns>
</member>
<member name="M:Elementor.Utils.is_post_type_support(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Is post type supports Elementor.
Whether the post type supports editing with Elementor.
</summary>
<param name="post_type" type="string">Post Type.</param>
<returns>True if post type supports editing with Elementor, false otherwise.</returns>
</member>
<member name="M:Elementor.Utils.get_placeholder_image_src(Pchp.Core.Context)">
<summary>
Get placeholder image source.
Retrieve the source of the placeholder image.
</summary>
<returns>The source of the default placeholder image used by Elementor.</returns>
</member>
<member name="M:Elementor.Utils.generate_random_string(Pchp.Core.Context)">
<summary>
Generate random string.
Returns a string containing a hexadecimal representation of random number.
</summary>
<returns>Random string.</returns>
</member>
<member name="M:Elementor.Utils.do_not_cache(Pchp.Core.Context)">
<summary>
Do not cache.
Tell WordPress cache plugins not to cache this request.
</summary>
</member>
<member name="M:Elementor.Utils.get_timezone_string(Pchp.Core.Context)">
<summary>
Get timezone string.
Retrieve timezone string from the WordPress database.
</summary>
<returns>Timezone string.</returns>
</member>
<member name="M:Elementor.Utils.get_create_new_post_url(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Get create new post URL.
Retrieve a custom URL for creating a new post/page using Elementor.
</summary>
<param name="post_type" type="string">Optional. Post type slug. Default is 'page'.</param>
<param name="template_type" type="string|null">Optional. Query arg 'template_type'. Default is null.</param>
<returns>A URL for creating new post using Elementor.</returns>
</member>
<member name="M:Elementor.Utils.get_post_autosave(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Get post autosave.
Retrieve an autosave for any given post.
</summary>
<param name="post_id" type="int">Post ID.</param>
<param name="user_id" type="int">Optional. User ID. Default is `0`.</param>
<returns>Post autosave or false.</returns>
</member>
<member name="M:Elementor.Utils.is_cpt_custom_templates_supported(Pchp.Core.Context)">
<summary>
Is CPT supports custom templates.
Whether the Custom Post Type supports templates.
</summary>
<returns>True is templates are supported, False otherwise.</returns>
</member>
<member name="M:Elementor.Utils.array_inject(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:Elementor.Utils.render_html_attributes(Pchp.Core.Context,Pchp.Core.PhpArray)">
<summary>
Render html attributes
</summary>
<param name="attributes" type="array"></param>
</member>
<member name="M:Elementor.Utils.print_html_attributes(Pchp.Core.Context,Pchp.Core.PhpArray)">
<summary>
Safe print html attributes
</summary>
<param name="attributes" type="array"></param>
</member>
<member name="M:Elementor.Utils.print_js_config(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Add Elementor Config js vars to the relevant script handle,
WP will wrap it with &lt;script&gt; tag.
To make sure this script runs thru the `script_loader_tag` hook, use a known handle value.
</summary>
<param name="handle" type="string"></param>
<param name="js_var" type="string"></param>
<param name="config" type="mixed"></param>
</member>
<member name="M:Elementor.Utils.is_empty(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Checks a control value for being empty, including a string of '0' not covered by PHP's empty().
</summary>
<param name="source" type="mixed"></param>
<param name="key" type="bool|string"></param>
</member>
<member name="M:Elementor.Utils.urlencode_html_entities(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Convert HTMLEntities to UTF-8 characters
</summary>
</member>
<member name="M:Elementor.Utils.parse_custom_attributes(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Parse attributes that come as a string of comma-delimited key|value pairs.
Removes Javascript events and unescaped `href` attributes.
</summary>
<param name="attributes_string" type="string"></param>
<param name="delimiter" type="string">Default comma `,`.</param>
</member>
<member name="M:Elementor.Utils.change_submenu_first_item_label(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Change Submenu First Item Label
Overwrite the label of the first submenu item of an admin menu item.

Fired by `admin_menu` action.
</summary>
</member>
<member name="M:Elementor.Utils.validate_html_tag(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Validate an HTML tag against a safe allowed list.
</summary>
<param name="tag" type="string"></param>
</member>
<member name="M:Elementor.Utils.print_validated_html_tag(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Safe print a validated HTML tag.
</summary>
<param name="tag" type="string"></param>
</member>
<member name="M:Elementor.Utils.print_unescaped_internal_string(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Print internal content (not user input) without escaping.
</summary>
</member>
<member name="M:Elementor.Utils.get_recently_edited_posts_query(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Get recently edited posts query.
Returns `WP_Query` of the recent edited posts.
By default max posts ( $args['posts_per_page'] ) is 3.
</summary>
<param name="args" type="array"></param>
</member>
<member name="M:Elementor.Widget_Accordion.get_name">
<summary>
Get widget name.
Retrieve accordion widget name.
</summary>
<returns>Widget name.</returns>
</member>
<member name="M:Elementor.Widget_Accordion.get_title">
<summary>
Get widget title.
Retrieve accordion widget title.
</summary>
<returns>Widget title.</returns>
</member>
<member name="M:Elementor.Widget_Accordion.get_icon">
<summary>
Get widget icon.
Retrieve accordion widget icon.
</summary>
<returns>Widget icon.</returns>
</member>
<member name="M:Elementor.Widget_Accordion.get_keywords">
<summary>
Get widget keywords.
Retrieve the list of keywords the widget belongs to.
</summary>
<returns>Widget keywords.</returns>
</member>
<member name="M:Elementor.Widget_Accordion.register_controls">
<summary>
Register accordion widget controls.
Adds different input fields to allow the user to change and customize the widget settings.
</summary>
</member>
<member name="M:Elementor.Widget_Accordion.render">
<summary>
Render accordion widget output on the frontend.
Written in PHP and used to generate the final HTML.
</summary>
</member>
<member name="M:Elementor.Widget_Accordion.content_template">
<summary>
Render accordion widget output in the editor.
Written as a Backbone JavaScript template and used to generate the live preview.
</summary>
</member>
<member name="M:Elementor.Widget_Alert.get_name">
<summary>
Get widget name.
Retrieve alert widget name.
</summary>
<returns>Widget name.</returns>
</member>
<member name="M:Elementor.Widget_Alert.get_title">
<summary>
Get widget title.
Retrieve alert widget title.
</summary>
<returns>Widget title.</returns>
</member>
<member name="M:Elementor.Widget_Alert.get_icon">
<summary>
Get widget icon.
Retrieve alert widget icon.
</summary>
<returns>Widget icon.</returns>
</member>
<member name="M:Elementor.Widget_Alert.get_keywords">
<summary>
Get widget keywords.
Retrieve the list of keywords the widget belongs to.
</summary>
<returns>Widget keywords.</returns>
</member>
<member name="M:Elementor.Widget_Alert.register_controls">
<summary>
Register alert widget controls.
Adds different input fields to allow the user to change and customize the widget settings.
</summary>
</member>
<member name="M:Elementor.Widget_Alert.render">
<summary>
Render alert widget output on the frontend.
Written in PHP and used to generate the final HTML.
</summary>
</member>
<member name="M:Elementor.Widget_Alert.content_template">
<summary>
Render alert widget output in the editor.
Written as a Backbone JavaScript template and used to generate the live preview.
</summary>
</member>
<member name="M:Elementor.Widget_Audio.get_name">
<summary>
Get widget name.
Retrieve audio widget name.
</summary>
<returns>Widget name.</returns>
</member>
<member name="M:Elementor.Widget_Audio.get_title">
<summary>
Get widget title.
Retrieve audio widget title.
</summary>
<returns>Widget title.</returns>
</member>
<member name="M:Elementor.Widget_Audio.get_icon">
<summary>
Get widget icon.
Retrieve audio widget icon.
</summary>
<returns>Widget icon.</returns>
</member>
<member name="M:Elementor.Widget_Audio.get_keywords">
<summary>
Get widget keywords.
Retrieve the list of keywords the widget belongs to.
</summary>
<returns>Widget keywords.</returns>
</member>
<member name="M:Elementor.Widget_Audio.register_controls">
<summary>
Register audio widget controls.
Adds different input fields to allow the user to change and customize the widget settings.
</summary>
</member>
<member name="M:Elementor.Widget_Audio.render">
<summary>
Render audio widget output on the frontend.
Written in PHP and used to generate the final HTML.
</summary>
</member>
<member name="M:Elementor.Widget_Audio.filter_oembed_result(Pchp.Core.PhpValue)">
<summary>
Filter audio widget oEmbed results.
Written in PHP and used to generate the final HTML.
</summary>
<param name="html" type="string">The HTML returned by the oEmbed provider.</param>
<returns>Filtered audio widget oEmbed HTML.</returns>
</member>
<member name="M:Elementor.Widget_Audio.content_template">
<summary>
Render audio widget output in the editor.
Written as a Backbone JavaScript template and used to generate the live preview.
</summary>
</member>
<member name="M:Elementor.Widget_Button.get_name">
<summary>
Get widget name.
Retrieve button widget name.
</summary>
<returns>Widget name.</returns>
</member>
<member name="M:Elementor.Widget_Button.get_title">
<summary>
Get widget title.
Retrieve button widget title.
</summary>
<returns>Widget title.</returns>
</member>
<member name="M:Elementor.Widget_Button.get_icon">
<summary>
Get widget icon.
Retrieve button widget icon.
</summary>
<returns>Widget icon.</returns>
</member>
<member name="M:Elementor.Widget_Button.get_categories">
<summary>
Get widget categories.
Retrieve the list of categories the button widget belongs to.

Used to determine where to display the widget in the editor.
</summary>
<returns>Widget categories.</returns>
</member>
<member name="M:Elementor.Widget_Button.get_button_sizes(Pchp.Core.Context)">
<summary>
Get button sizes.
Retrieve an array of button sizes for the button widget.
</summary>
<returns>An array containing button sizes.</returns>
</member>
<member name="M:Elementor.Widget_Button.register_controls">
<summary>
Register button widget controls.
Adds different input fields to allow the user to change and customize the widget settings.
</summary>
</member>
<member name="M:Elementor.Widget_Button.render">
<summary>
Render button widget output on the frontend.
Written in PHP and used to generate the final HTML.
</summary>
</member>
<member name="M:Elementor.Widget_Button.content_template">
<summary>
Render button widget output in the editor.
Written as a Backbone JavaScript template and used to generate the live preview.
</summary>
</member>
<member name="M:Elementor.Widget_Button.render_text">
<summary>
Render button text.
Render button widget text.
</summary>
</member>
<member name="M:Elementor.Widget_Common.get_name">
<summary>
Get widget name.
Retrieve common widget name.
</summary>
<returns>Widget name.</returns>
</member>
<member name="M:Elementor.Widget_Common.show_in_panel">
<summary>
Show in panel.
Whether to show the common widget in the panel or not.
</summary>
<returns>Whether to show the widget in the panel.</returns>
</member>
<member name="M:Elementor.Widget_Common.get_responsive_device_args(Pchp.Core.PhpArray,Pchp.Core.PhpArray)">
<summary>
Get Responsive Device Args
Receives an array of device args, and duplicates it for each active breakpoint.
Returns an array of device args.
</summary>
<param name="args" type="array">arguments to duplicate per breakpoint</param>
<param name="devices_to_exclude" type="array"></param>
<returns>responsive device args</returns>
</member>
<member name="M:Elementor.Widget_Common.parse_device_args_placeholders(Pchp.Core.PhpArray,Pchp.Core.PhpValue)">
<summary>
Parse Device Args Placeholders
Receives an array of args. Iterates over the args, and replaces the {{DEVICE}} placeholder, if exists, with the
passed breakpoint key.
</summary>
<param name="args" type="array"></param>
<param name="breakpoint_key" type="string"></param>
<returns>parsed device args</returns>
</member>
<member name="M:Elementor.Widget_Common.get_shape_url(Pchp.Core.PhpValue)">
<param name="shape" type="String">Shape name.</param>
<returns>The shape path in the assets folder.</returns>
</member>
<member name="M:Elementor.Widget_Common.get_shapes(Pchp.Core.PhpValue)">
<summary>
Return a translated user-friendly list of the available masking shapes.
</summary>
<param name="add_custom" type="bool">Determine if the output should contain `Custom` options.</param>
<returns>Array of shapes with their URL as key.</returns>
</member>
<member name="M:Elementor.Widget_Common.get_mask_selectors(Pchp.Core.PhpValue)">
<summary>
Gets a string of CSS rules to apply, and returns an array of selectors with those rules.
This function has been created in order to deal with masking for image widget.
For most of the widgets the mask is being applied to the wrapper itself, but in the case of an image widget,
the `img` tag should be masked directly. So instead of writing a lot of selectors every time,
this function builds both of those selectors easily.
</summary>
<param name="rules" type="string">The CSS rules to apply.</param>
<returns>Selectors with the rules applied.</returns>
</member>
<member name="M:Elementor.Widget_Common.register_controls">
<summary>
Register common widget controls.
Adds different input fields to allow the user to change and customize the widget settings.
</summary>
</member>
<member name="M:Elementor.Widget_Counter.get_name">
<summary>
Get widget name.
Retrieve counter widget name.
</summary>
<returns>Widget name.</returns>
</member>
<member name="M:Elementor.Widget_Counter.get_title">
<summary>
Get widget title.
Retrieve counter widget title.
</summary>
<returns>Widget title.</returns>
</member>
<member name="M:Elementor.Widget_Counter.get_icon">
<summary>
Get widget icon.
Retrieve counter widget icon.
</summary>
<returns>Widget icon.</returns>
</member>
<member name="M:Elementor.Widget_Counter.get_script_depends">
<summary>
Retrieve the list of scripts the counter widget depended on.
Used to set scripts dependencies required to run the widget.
</summary>
<returns>Widget scripts dependencies.</returns>
</member>
<member name="M:Elementor.Widget_Counter.get_keywords">
<summary>
Get widget keywords.
Retrieve the list of keywords the widget belongs to.
</summary>
<returns>Widget keywords.</returns>
</member>
<member name="M:Elementor.Widget_Counter.register_controls">
<summary>
Register counter widget controls.
Adds different input fields to allow the user to change and customize the widget settings.
</summary>
</member>
<member name="M:Elementor.Widget_Counter.content_template">
<summary>
Render counter widget output in the editor.
Written as a Backbone JavaScript template and used to generate the live preview.
</summary>
</member>
<member name="M:Elementor.Widget_Counter.render">
<summary>
Render counter widget output on the frontend.
Written in PHP and used to generate the final HTML.
</summary>
</member>
<member name="M:Elementor.Widget_Divider.get_name">
<summary>
Get widget name.
Retrieve divider widget name.
</summary>
<returns>Widget name.</returns>
</member>
<member name="M:Elementor.Widget_Divider.get_title">
<summary>
Get widget title.
Retrieve divider widget title.
</summary>
<returns>Widget title.</returns>
</member>
<member name="M:Elementor.Widget_Divider.get_icon">
<summary>
Get widget icon.
Retrieve divider widget icon.
</summary>
<returns>Widget icon.</returns>
</member>
<member name="M:Elementor.Widget_Divider.get_categories">
<summary>
Get widget categories.
Retrieve the list of categories the divider widget belongs to.

Used to determine where to display the widget in the editor.
</summary>
<returns>Widget categories.</returns>
</member>
<member name="M:Elementor.Widget_Divider.get_keywords">
<summary>
Get widget keywords.
Retrieve the list of keywords the widget belongs to.
</summary>
<returns>Widget keywords.</returns>
</member>
<member name="M:Elementor.Widget_Divider.register_controls">
<summary>
Register divider widget controls.
Adds different input fields to allow the user to change and customize the widget settings.
</summary>
</member>
<member name="M:Elementor.Widget_Divider.build_svg">
<summary>
Build SVG
Build SVG element markup based on the widgets settings.
</summary>
<returns>- An SVG element.</returns>
</member>
<member name="M:Elementor.Widget_Divider.render">
<summary>
Render divider widget output on the frontend.
Written in PHP and used to generate the final HTML.
</summary>
</member>
<member name="M:Elementor.Widget_Google_Maps.get_name">
<summary>
Get widget name.
Retrieve google maps widget name.
</summary>
<returns>Widget name.</returns>
</member>
<member name="M:Elementor.Widget_Google_Maps.get_title">
<summary>
Get widget title.
Retrieve google maps widget title.
</summary>
<returns>Widget title.</returns>
</member>
<member name="M:Elementor.Widget_Google_Maps.get_icon">
<summary>
Get widget icon.
Retrieve google maps widget icon.
</summary>
<returns>Widget icon.</returns>
</member>
<member name="M:Elementor.Widget_Google_Maps.get_categories">
<summary>
Get widget categories.
Retrieve the list of categories the google maps widget belongs to.

Used to determine where to display the widget in the editor.
</summary>
<returns>Widget categories.</returns>
</member>
<member name="M:Elementor.Widget_Google_Maps.get_keywords">
<summary>
Get widget keywords.
Retrieve the list of keywords the widget belongs to.
</summary>
<returns>Widget keywords.</returns>
</member>
<member name="M:Elementor.Widget_Google_Maps.register_controls">
<summary>
Register google maps widget controls.
Adds different input fields to allow the user to change and customize the widget settings.
</summary>
</member>
<member name="M:Elementor.Widget_Google_Maps.render">
<summary>
Render google maps widget output on the frontend.
Written in PHP and used to generate the final HTML.
</summary>
</member>
<member name="M:Elementor.Widget_Google_Maps.content_template">
<summary>
Render google maps widget output in the editor.
Written as a Backbone JavaScript template and used to generate the live preview.
</summary>
</member>
<member name="M:Elementor.Widget_Heading.get_name">
<summary>
Get widget name.
Retrieve heading widget name.
</summary>
<returns>Widget name.</returns>
</member>
<member name="M:Elementor.Widget_Heading.get_title">
<summary>
Get widget title.
Retrieve heading widget title.
</summary>
<returns>Widget title.</returns>
</member>
<member name="M:Elementor.Widget_Heading.get_icon">
<summary>
Get widget icon.
Retrieve heading widget icon.
</summary>
<returns>Widget icon.</returns>
</member>
<member name="M:Elementor.Widget_Heading.get_categories">
<summary>
Get widget categories.
Retrieve the list of categories the heading widget belongs to.

Used to determine where to display the widget in the editor.
</summary>
<returns>Widget categories.</returns>
</member>
<member name="M:Elementor.Widget_Heading.get_keywords">
<summary>
Get widget keywords.
Retrieve the list of keywords the widget belongs to.
</summary>
<returns>Widget keywords.</returns>
</member>
<member name="M:Elementor.Widget_Heading.register_controls">
<summary>
Register heading widget controls.
Adds different input fields to allow the user to change and customize the widget settings.
</summary>
</member>
<member name="M:Elementor.Widget_Heading.render">
<summary>
Render heading widget output on the frontend.
Written in PHP and used to generate the final HTML.
</summary>
</member>
<member name="M:Elementor.Widget_Heading.content_template">
<summary>
Render heading widget output in the editor.
Written as a Backbone JavaScript template and used to generate the live preview.
</summary>
</member>
<member name="M:Elementor.Widget_Html.get_name">
<summary>
Get widget name.
Retrieve HTML widget name.
</summary>
<returns>Widget name.</returns>
</member>
<member name="M:Elementor.Widget_Html.get_title">
<summary>
Get widget title.
Retrieve HTML widget title.
</summary>
<returns>Widget title.</returns>
</member>
<member name="M:Elementor.Widget_Html.get_icon">
<summary>
Get widget icon.
Retrieve HTML widget icon.
</summary>
<returns>Widget icon.</returns>
</member>
<member name="M:Elementor.Widget_Html.get_keywords">
<summary>
Get widget keywords.
Retrieve the list of keywords the widget belongs to.
</summary>
<returns>Widget keywords.</returns>
</member>
<member name="M:Elementor.Widget_Html.register_controls">
<summary>
Register HTML widget controls.
Adds different input fields to allow the user to change and customize the widget settings.
</summary>
</member>
<member name="M:Elementor.Widget_Html.render">
<summary>
Render HTML widget output on the frontend.
Written in PHP and used to generate the final HTML.
</summary>
</member>
<member name="M:Elementor.Widget_Html.content_template">
<summary>
Render HTML widget output in the editor.
Written as a Backbone JavaScript template and used to generate the live preview.
</summary>
</member>
<member name="M:Elementor.Widget_Icon_Box.get_name">
<summary>
Get widget name.
Retrieve icon box widget name.
</summary>
<returns>Widget name.</returns>
</member>
<member name="M:Elementor.Widget_Icon_Box.get_title">
<summary>
Get widget title.
Retrieve icon box widget title.
</summary>
<returns>Widget title.</returns>
</member>
<member name="M:Elementor.Widget_Icon_Box.get_icon">
<summary>
Get widget icon.
Retrieve icon box widget icon.
</summary>
<returns>Widget icon.</returns>
</member>
<member name="M:Elementor.Widget_Icon_Box.get_keywords">
<summary>
Get widget keywords.
Retrieve the list of keywords the widget belongs to.
</summary>
<returns>Widget keywords.</returns>
</member>
<member name="M:Elementor.Widget_Icon_Box.register_controls">
<summary>
Register icon box widget controls.
Adds different input fields to allow the user to change and customize the widget settings.
</summary>
</member>
<member name="M:Elementor.Widget_Icon_Box.render">
<summary>
Render icon box widget output on the frontend.
Written in PHP and used to generate the final HTML.
</summary>
</member>
<member name="M:Elementor.Widget_Icon_Box.content_template">
<summary>
Render icon box widget output in the editor.
Written as a Backbone JavaScript template and used to generate the live preview.
</summary>
</member>
<member name="M:Elementor.Widget_Icon_List.get_name">
<summary>
Get widget name.
Retrieve icon list widget name.
</summary>
<returns>Widget name.</returns>
</member>
<member name="M:Elementor.Widget_Icon_List.get_title">
<summary>
Get widget title.
Retrieve icon list widget title.
</summary>
<returns>Widget title.</returns>
</member>
<member name="M:Elementor.Widget_Icon_List.get_icon">
<summary>
Get widget icon.
Retrieve icon list widget icon.
</summary>
<returns>Widget icon.</returns>
</member>
<member name="M:Elementor.Widget_Icon_List.get_keywords">
<summary>
Get widget keywords.
Retrieve the list of keywords the widget belongs to.
</summary>
<returns>Widget keywords.</returns>
</member>
<member name="M:Elementor.Widget_Icon_List.register_controls">
<summary>
Register icon list widget controls.
Adds different input fields to allow the user to change and customize the widget settings.
</summary>
</member>
<member name="M:Elementor.Widget_Icon_List.render">
<summary>
Render icon list widget output on the frontend.
Written in PHP and used to generate the final HTML.
</summary>
</member>
<member name="M:Elementor.Widget_Icon_List.content_template">
<summary>
Render icon list widget output in the editor.
Written as a Backbone JavaScript template and used to generate the live preview.
</summary>
</member>
<member name="M:Elementor.Widget_Icon.get_name">
<summary>
Get widget name.
Retrieve icon widget name.
</summary>
<returns>Widget name.</returns>
</member>
<member name="M:Elementor.Widget_Icon.get_title">
<summary>
Get widget title.
Retrieve icon widget title.
</summary>
<returns>Widget title.</returns>
</member>
<member name="M:Elementor.Widget_Icon.get_icon">
<summary>
Get widget icon.
Retrieve icon widget icon.
</summary>
<returns>Widget icon.</returns>
</member>
<member name="M:Elementor.Widget_Icon.get_categories">
<summary>
Get widget categories.
Retrieve the list of categories the icon widget belongs to.

Used to determine where to display the widget in the editor.
</summary>
<returns>Widget categories.</returns>
</member>
<member name="M:Elementor.Widget_Icon.get_keywords">
<summary>
Get widget keywords.
Retrieve the list of keywords the widget belongs to.
</summary>
<returns>Widget keywords.</returns>
</member>
<member name="M:Elementor.Widget_Icon.register_controls">
<summary>
Register icon widget controls.
Adds different input fields to allow the user to change and customize the widget settings.
</summary>
</member>
<member name="M:Elementor.Widget_Icon.render">
<summary>
Render icon widget output on the frontend.
Written in PHP and used to generate the final HTML.
</summary>
</member>
<member name="M:Elementor.Widget_Icon.content_template">
<summary>
Render icon widget output in the editor.
Written as a Backbone JavaScript template and used to generate the live preview.
</summary>
</member>
<member name="M:Elementor.Widget_Image_Box.get_name">
<summary>
Get widget name.
Retrieve image box widget name.
</summary>
<returns>Widget name.</returns>
</member>
<member name="M:Elementor.Widget_Image_Box.get_title">
<summary>
Get widget title.
Retrieve image box widget title.
</summary>
<returns>Widget title.</returns>
</member>
<member name="M:Elementor.Widget_Image_Box.get_icon">
<summary>
Get widget icon.
Retrieve image box widget icon.
</summary>
<returns>Widget icon.</returns>
</member>
<member name="M:Elementor.Widget_Image_Box.get_keywords">
<summary>
Get widget keywords.
Retrieve the list of keywords the widget belongs to.
</summary>
<returns>Widget keywords.</returns>
</member>
<member name="M:Elementor.Widget_Image_Box.register_controls">
<summary>
Register image box widget controls.
Adds different input fields to allow the user to change and customize the widget settings.
</summary>
</member>
<member name="M:Elementor.Widget_Image_Box.render">
<summary>
Render image box widget output on the frontend.
Written in PHP and used to generate the final HTML.
</summary>
</member>
<member name="M:Elementor.Widget_Image_Box.content_template">
<summary>
Render image box widget output in the editor.
Written as a Backbone JavaScript template and used to generate the live preview.
</summary>
</member>
<member name="M:Elementor.Widget_Image_Carousel.get_name">
<summary>
Get widget name.
Retrieve image carousel widget name.
</summary>
<returns>Widget name.</returns>
</member>
<member name="M:Elementor.Widget_Image_Carousel.get_title">
<summary>
Get widget title.
Retrieve image carousel widget title.
</summary>
<returns>Widget title.</returns>
</member>
<member name="M:Elementor.Widget_Image_Carousel.get_icon">
<summary>
Get widget icon.
Retrieve image carousel widget icon.
</summary>
<returns>Widget icon.</returns>
</member>
<member name="M:Elementor.Widget_Image_Carousel.get_keywords">
<summary>
Get widget keywords.
Retrieve the list of keywords the widget belongs to.
</summary>
<returns>Widget keywords.</returns>
</member>
<member name="M:Elementor.Widget_Image_Carousel.register_controls">
<summary>
Register image carousel widget controls.
Adds different input fields to allow the user to change and customize the widget settings.
</summary>
</member>
<member name="M:Elementor.Widget_Image_Carousel.render">
<summary>
Render image carousel widget output on the frontend.
Written in PHP and used to generate the final HTML.
</summary>
</member>
<member name="M:Elementor.Widget_Image_Carousel.get_link_url(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Retrieve image carousel link URL.
</summary>
<param name="attachment" type="array"></param>
<param name="instance" type="object"></param>
<returns>An array/string containing the attachment URL, or false if no link.</returns>
</member>
<member name="M:Elementor.Widget_Image_Carousel.get_image_caption(Pchp.Core.PhpValue)">
<summary>
Retrieve image carousel caption.
</summary>
<param name="attachment" type="array"></param>
<returns>The caption of the image.</returns>
</member>
<member name="M:Elementor.Widget_Image_Gallery.get_name">
<summary>
Get widget name.
Retrieve image gallery widget name.
</summary>
<returns>Widget name.</returns>
</member>
<member name="M:Elementor.Widget_Image_Gallery.get_title">
<summary>
Get widget title.
Retrieve image gallery widget title.
</summary>
<returns>Widget title.</returns>
</member>
<member name="M:Elementor.Widget_Image_Gallery.get_icon">
<summary>
Get widget icon.
Retrieve image gallery widget icon.
</summary>
<returns>Widget icon.</returns>
</member>
<member name="M:Elementor.Widget_Image_Gallery.get_keywords">
<summary>
Get widget keywords.
Retrieve the list of keywords the widget belongs to.
</summary>
<returns>Widget keywords.</returns>
</member>
<member name="M:Elementor.Widget_Image_Gallery.register_controls">
<summary>
Register image gallery widget controls.
Adds different input fields to allow the user to change and customize the widget settings.
</summary>
</member>
<member name="M:Elementor.Widget_Image_Gallery.render">
<summary>
Render image gallery widget output on the frontend.
Written in PHP and used to generate the final HTML.
</summary>
</member>
<member name="M:Elementor.Widget_Image.get_name">
<summary>
Get widget name.
Retrieve image widget name.
</summary>
<returns>Widget name.</returns>
</member>
<member name="M:Elementor.Widget_Image.get_title">
<summary>
Get widget title.
Retrieve image widget title.
</summary>
<returns>Widget title.</returns>
</member>
<member name="M:Elementor.Widget_Image.get_icon">
<summary>
Get widget icon.
Retrieve image widget icon.
</summary>
<returns>Widget icon.</returns>
</member>
<member name="M:Elementor.Widget_Image.get_categories">
<summary>
Get widget categories.
Retrieve the list of categories the image widget belongs to.

Used to determine where to display the widget in the editor.
</summary>
<returns>Widget categories.</returns>
</member>
<member name="M:Elementor.Widget_Image.get_keywords">
<summary>
Get widget keywords.
Retrieve the list of keywords the widget belongs to.
</summary>
<returns>Widget keywords.</returns>
</member>
<member name="M:Elementor.Widget_Image.register_controls">
<summary>
Register image widget controls.
Adds different input fields to allow the user to change and customize the widget settings.
</summary>
</member>
<member name="M:Elementor.Widget_Image.has_caption(Pchp.Core.PhpValue)">
<summary>
Check if the current widget has caption
</summary>
<param name="settings" type="array"></param>
</member>
<member name="M:Elementor.Widget_Image.get_caption(Pchp.Core.PhpValue)">
<summary>
Get the caption for current widget.
</summary>
</member>
<member name="M:Elementor.Widget_Image.render">
<summary>
Render image widget output on the frontend.
Written in PHP and used to generate the final HTML.
</summary>
</member>
<member name="M:Elementor.Widget_Image.content_template">
<summary>
Render image widget output in the editor.
Written as a Backbone JavaScript template and used to generate the live preview.
</summary>
</member>
<member name="M:Elementor.Widget_Image.get_link_url(Pchp.Core.PhpValue)">
<summary>
Retrieve image widget link URL.
</summary>
<param name="settings" type="array"></param>
<returns>An array/string containing the link URL, or false if no link.</returns>
</member>
<member name="M:Elementor.Widget_Menu_Anchor.get_name">
<summary>
Get widget name.
Retrieve menu anchor widget name.
</summary>
<returns>Widget name.</returns>
</member>
<member name="M:Elementor.Widget_Menu_Anchor.get_title">
<summary>
Get widget title.
Retrieve menu anchor widget title.
</summary>
<returns>Widget title.</returns>
</member>
<member name="M:Elementor.Widget_Menu_Anchor.get_icon">
<summary>
Get widget icon.
Retrieve menu anchor widget icon.
</summary>
<returns>Widget icon.</returns>
</member>
<member name="M:Elementor.Widget_Menu_Anchor.get_keywords">
<summary>
Get widget keywords.
Retrieve the list of keywords the widget belongs to.
</summary>
<returns>Widget keywords.</returns>
</member>
<member name="M:Elementor.Widget_Menu_Anchor.register_controls">
<summary>
Register menu anchor widget controls.
Adds different input fields to allow the user to change and customize the widget settings.
</summary>
</member>
<member name="M:Elementor.Widget_Menu_Anchor.render">
<summary>
Render menu anchor widget output on the frontend.
Written in PHP and used to generate the final HTML.
</summary>
</member>
<member name="M:Elementor.Widget_Menu_Anchor.content_template">
<summary>
Render menu anchor widget output in the editor.
Written as a Backbone JavaScript template and used to generate the live preview.
</summary>
</member>
<member name="M:Elementor.Widget_Progress.get_name">
<summary>
Get widget name.
Retrieve progress widget name.
</summary>
<returns>Widget name.</returns>
</member>
<member name="M:Elementor.Widget_Progress.get_title">
<summary>
Get widget title.
Retrieve progress widget title.
</summary>
<returns>Widget title.</returns>
</member>
<member name="M:Elementor.Widget_Progress.get_icon">
<summary>
Get widget icon.
Retrieve progress widget icon.
</summary>
<returns>Widget icon.</returns>
</member>
<member name="M:Elementor.Widget_Progress.get_keywords">
<summary>
Get widget keywords.
Retrieve the list of keywords the widget belongs to.
</summary>
<returns>Widget keywords.</returns>
</member>
<member name="M:Elementor.Widget_Progress.register_controls">
<summary>
Register progress widget controls.
Adds different input fields to allow the user to change and customize the widget settings.
</summary>
</member>
<member name="M:Elementor.Widget_Progress.render">
<summary>
Render progress widget output on the frontend.
Make sure value does no exceed 100%.

Written in PHP and used to generate the final HTML.
</summary>
</member>
<member name="M:Elementor.Widget_Progress.content_template">
<summary>
Render progress widget output in the editor.
Written as a Backbone JavaScript template and used to generate the live preview.
</summary>
</member>
<member name="M:Elementor.Widget_Read_More.get_name">
<summary>
Get widget name.
Retrieve Read More widget name.
</summary>
<returns>Widget name.</returns>
</member>
<member name="M:Elementor.Widget_Read_More.get_title">
<summary>
Get widget title.
Retrieve Read More widget title.
</summary>
<returns>Widget title.</returns>
</member>
<member name="M:Elementor.Widget_Read_More.get_icon">
<summary>
Get widget icon.
Retrieve Read More widget icon.
</summary>
<returns>Widget icon.</returns>
</member>
<member name="M:Elementor.Widget_Read_More.get_keywords">
<summary>
Get widget keywords.
Retrieve the list of keywords the widget belongs to.
</summary>
<returns>Widget keywords.</returns>
</member>
<member name="M:Elementor.Widget_Read_More.register_controls">
<summary>
Register HTML widget controls.
Adds different input fields to allow the user to change and customize the widget settings.
</summary>
</member>
<member name="M:Elementor.Widget_Read_More.render">
<summary>
Render Read More widget output on the frontend.
Written in PHP and used to generate the final HTML.
</summary>
</member>
<member name="M:Elementor.Widget_Read_More.content_template">
<summary>
Render Read More widget output in the editor.
Written as a Backbone JavaScript template and used to generate the live preview.
</summary>
</member>
<member name="M:Elementor.Widget_Shortcode.get_name">
<summary>
Get widget name.
Retrieve shortcode widget name.
</summary>
<returns>Widget name.</returns>
</member>
<member name="M:Elementor.Widget_Shortcode.get_title">
<summary>
Get widget title.
Retrieve shortcode widget title.
</summary>
<returns>Widget title.</returns>
</member>
<member name="M:Elementor.Widget_Shortcode.get_icon">
<summary>
Get widget icon.
Retrieve shortcode widget icon.
</summary>
<returns>Widget icon.</returns>
</member>
<member name="M:Elementor.Widget_Shortcode.get_keywords">
<summary>
Get widget keywords.
Retrieve the list of keywords the widget belongs to.
</summary>
<returns>Widget keywords.</returns>
</member>
<member name="M:Elementor.Widget_Shortcode.is_reload_preview_required">
<summary>
Whether the reload preview is required or not.
Used to determine whether the reload preview is required.
</summary>
<returns>Whether the reload preview is required.</returns>
</member>
<member name="M:Elementor.Widget_Shortcode.register_controls">
<summary>
Register shortcode widget controls.
Adds different input fields to allow the user to change and customize the widget settings.
</summary>
</member>
<member name="M:Elementor.Widget_Shortcode.render">
<summary>
Render shortcode widget output on the frontend.
Written in PHP and used to generate the final HTML.
</summary>
</member>
<member name="M:Elementor.Widget_Shortcode.render_plain_content">
<summary>
Render shortcode widget as plain content.
Override the default behavior by printing the shortcode instead of rendering it.
</summary>
</member>
<member name="M:Elementor.Widget_Shortcode.content_template">
<summary>
Render shortcode widget output in the editor.
Written as a Backbone JavaScript template and used to generate the live preview.
</summary>
</member>
<member name="M:Elementor.Widget_Sidebar.get_name">
<summary>
Get widget name.
Retrieve sidebar widget name.
</summary>
<returns>Widget name.</returns>
</member>
<member name="M:Elementor.Widget_Sidebar.get_title">
<summary>
Get widget title.
Retrieve sidebar widget title.
</summary>
<returns>Widget title.</returns>
</member>
<member name="M:Elementor.Widget_Sidebar.get_icon">
<summary>
Get widget icon.
Retrieve sidebar widget icon.
</summary>
<returns>Widget icon.</returns>
</member>
<member name="M:Elementor.Widget_Sidebar.get_keywords">
<summary>
Get widget keywords.
Retrieve the list of keywords the widget belongs to.
</summary>
<returns>Widget keywords.</returns>
</member>
<member name="M:Elementor.Widget_Sidebar.register_controls">
<summary>
Register sidebar widget controls.
Adds different input fields to allow the user to change and customize the widget settings.
</summary>
</member>
<member name="M:Elementor.Widget_Sidebar.render">
<summary>
Render sidebar widget output on the frontend.
Written in PHP and used to generate the final HTML.
</summary>
</member>
<member name="M:Elementor.Widget_Sidebar.content_template">
<summary>
Render sidebar widget output in the editor.
Written as a Backbone JavaScript template and used to generate the live preview.
</summary>
</member>
<member name="M:Elementor.Widget_Sidebar.render_plain_content">
<summary>
Render sidebar widget as plain content.
Override the default render behavior, don't render sidebar content.
</summary>
</member>
<member name="M:Elementor.Widget_Social_Icons.get_name">
<summary>
Get widget name.
Retrieve social icons widget name.
</summary>
<returns>Widget name.</returns>
</member>
<member name="M:Elementor.Widget_Social_Icons.get_title">
<summary>
Get widget title.
Retrieve social icons widget title.
</summary>
<returns>Widget title.</returns>
</member>
<member name="M:Elementor.Widget_Social_Icons.get_icon">
<summary>
Get widget icon.
Retrieve social icons widget icon.
</summary>
<returns>Widget icon.</returns>
</member>
<member name="M:Elementor.Widget_Social_Icons.get_keywords">
<summary>
Get widget keywords.
Retrieve the list of keywords the widget belongs to.
</summary>
<returns>Widget keywords.</returns>
</member>
<member name="M:Elementor.Widget_Social_Icons.register_controls">
<summary>
Register social icons widget controls.
Adds different input fields to allow the user to change and customize the widget settings.
</summary>
</member>
<member name="M:Elementor.Widget_Social_Icons.render">
<summary>
Render social icons widget output on the frontend.
Written in PHP and used to generate the final HTML.
</summary>
</member>
<member name="M:Elementor.Widget_Social_Icons.content_template">
<summary>
Render social icons widget output in the editor.
Written as a Backbone JavaScript template and used to generate the live preview.
</summary>
</member>
<member name="M:Elementor.Widget_Spacer.get_name">
<summary>
Get widget name.
Retrieve spacer widget name.
</summary>
<returns>Widget name.</returns>
</member>
<member name="M:Elementor.Widget_Spacer.get_title">
<summary>
Get widget title.
Retrieve spacer widget title.
</summary>
<returns>Widget title.</returns>
</member>
<member name="M:Elementor.Widget_Spacer.get_icon">
<summary>
Get widget icon.
Retrieve spacer widget icon.
</summary>
<returns>Widget icon.</returns>
</member>
<member name="M:Elementor.Widget_Spacer.get_categories">
<summary>
Get widget categories.
Retrieve the list of categories the spacer widget belongs to.

Used to determine where to display the widget in the editor.
</summary>
<returns>Widget categories.</returns>
</member>
<member name="M:Elementor.Widget_Spacer.get_keywords">
<summary>
Get widget keywords.
Retrieve the list of keywords the widget belongs to.
</summary>
<returns>Widget keywords.</returns>
</member>
<member name="M:Elementor.Widget_Spacer.register_controls">
<summary>
Register spacer widget controls.
Adds different input fields to allow the user to change and customize the widget settings.
</summary>
</member>
<member name="M:Elementor.Widget_Spacer.render">
<summary>
Render spacer widget output on the frontend.
Written in PHP and used to generate the final HTML.
</summary>
</member>
<member name="M:Elementor.Widget_Spacer.content_template">
<summary>
Render spacer widget output in the editor.
Written as a Backbone JavaScript template and used to generate the live preview.
</summary>
</member>
<member name="M:Elementor.Widget_Star_Rating.get_name">
<summary>
Get widget name.
Retrieve star rating widget name.
</summary>
<returns>Widget name.</returns>
</member>
<member name="M:Elementor.Widget_Star_Rating.get_title">
<summary>
Get widget title.
Retrieve star rating widget title.
</summary>
<returns>Widget title.</returns>
</member>
<member name="M:Elementor.Widget_Star_Rating.get_icon">
<summary>
Get widget icon.
Retrieve star rating widget icon.
</summary>
<returns>Widget icon.</returns>
</member>
<member name="M:Elementor.Widget_Star_Rating.get_keywords">
<summary>
Get widget keywords.
Retrieve the list of keywords the widget belongs to.
</summary>
<returns>Widget keywords.</returns>
</member>
<member name="M:Elementor.Widget_Star_Rating.register_controls">
<summary>
Register star rating widget controls.
Adds different input fields to allow the user to change and customize the widget settings.
</summary>
</member>
<member name="M:Elementor.Widget_Star_Rating.get_rating">
</member>
<member name="M:Elementor.Widget_Star_Rating.render_stars(Pchp.Core.PhpValue)">
<summary>
Print the actual stars and calculate their filling.
Rating type is float to allow stars-count to be a fraction.
Floored-rating type is int, to represent the rounded-down stars count.
In the `for` loop, the index type is float to allow comparing with the rating value.
</summary>
</member>
<member name="M:Elementor.Widget_Star_Rating.render">
</member>
<member name="M:Elementor.Widget_Star_Rating.content_template">
</member>
<member name="M:Elementor.Widget_Tabs.get_name">
<summary>
Get widget name.
Retrieve tabs widget name.
</summary>
<returns>Widget name.</returns>
</member>
<member name="M:Elementor.Widget_Tabs.get_title">
<summary>
Get widget title.
Retrieve tabs widget title.
</summary>
<returns>Widget title.</returns>
</member>
<member name="M:Elementor.Widget_Tabs.get_icon">
<summary>
Get widget icon.
Retrieve tabs widget icon.
</summary>
<returns>Widget icon.</returns>
</member>
<member name="M:Elementor.Widget_Tabs.get_keywords">
<summary>
Get widget keywords.
Retrieve the list of keywords the widget belongs to.
</summary>
<returns>Widget keywords.</returns>
</member>
<member name="M:Elementor.Widget_Tabs.register_controls">
<summary>
Register tabs widget controls.
Adds different input fields to allow the user to change and customize the widget settings.
</summary>
</member>
<member name="M:Elementor.Widget_Tabs.render">
<summary>
Render tabs widget output on the frontend.
Written in PHP and used to generate the final HTML.
</summary>
</member>
<member name="M:Elementor.Widget_Tabs.content_template">
<summary>
Render tabs widget output in the editor.
Written as a Backbone JavaScript template and used to generate the live preview.
</summary>
</member>
<member name="M:Elementor.Widget_Testimonial.get_name">
<summary>
Get widget name.
Retrieve testimonial widget name.
</summary>
<returns>Widget name.</returns>
</member>
<member name="M:Elementor.Widget_Testimonial.get_title">
<summary>
Get widget title.
Retrieve testimonial widget title.
</summary>
<returns>Widget title.</returns>
</member>
<member name="M:Elementor.Widget_Testimonial.get_icon">
<summary>
Get widget icon.
Retrieve testimonial widget icon.
</summary>
<returns>Widget icon.</returns>
</member>
<member name="M:Elementor.Widget_Testimonial.get_keywords">
<summary>
Get widget keywords.
Retrieve the list of keywords the widget belongs to.
</summary>
<returns>Widget keywords.</returns>
</member>
<member name="M:Elementor.Widget_Testimonial.register_controls">
<summary>
Register testimonial widget controls.
Adds different input fields to allow the user to change and customize the widget settings.
</summary>
</member>
<member name="M:Elementor.Widget_Testimonial.render">
<summary>
Render testimonial widget output on the frontend.
Written in PHP and used to generate the final HTML.
</summary>
</member>
<member name="M:Elementor.Widget_Testimonial.content_template">
<summary>
Render testimonial widget output in the editor.
Written as a Backbone JavaScript template and used to generate the live preview.
</summary>
</member>
<member name="M:Elementor.Widget_Text_Editor.get_name">
<summary>
Get widget name.
Retrieve text editor widget name.
</summary>
<returns>Widget name.</returns>
</member>
<member name="M:Elementor.Widget_Text_Editor.get_title">
<summary>
Get widget title.
Retrieve text editor widget title.
</summary>
<returns>Widget title.</returns>
</member>
<member name="M:Elementor.Widget_Text_Editor.get_icon">
<summary>
Get widget icon.
Retrieve text editor widget icon.
</summary>
<returns>Widget icon.</returns>
</member>
<member name="M:Elementor.Widget_Text_Editor.get_categories">
<summary>
Get widget categories.
Retrieve the list of categories the text editor widget belongs to.

Used to determine where to display the widget in the editor.
</summary>
<returns>Widget categories.</returns>
</member>
<member name="M:Elementor.Widget_Text_Editor.get_keywords">
<summary>
Get widget keywords.
Retrieve the list of keywords the widget belongs to.
</summary>
<returns>Widget keywords.</returns>
</member>
<member name="M:Elementor.Widget_Text_Editor.register_controls">
<summary>
Register text editor widget controls.
Adds different input fields to allow the user to change and customize the widget settings.
</summary>
</member>
<member name="M:Elementor.Widget_Text_Editor.render">
<summary>
Render text editor widget output on the frontend.
Written in PHP and used to generate the final HTML.
</summary>
</member>
<member name="M:Elementor.Widget_Text_Editor.render_plain_content">
<summary>
Render text editor widget as plain content.
Override the default behavior by printing the content without rendering it.
</summary>
</member>
<member name="M:Elementor.Widget_Text_Editor.content_template">
<summary>
Render text editor widget output in the editor.
Written as a Backbone JavaScript template and used to generate the live preview.
</summary>
</member>
<member name="M:Elementor.Widget_Toggle.get_name">
<summary>
Get widget name.
Retrieve toggle widget name.
</summary>
<returns>Widget name.</returns>
</member>
<member name="M:Elementor.Widget_Toggle.get_title">
<summary>
Get widget title.
Retrieve toggle widget title.
</summary>
<returns>Widget title.</returns>
</member>
<member name="M:Elementor.Widget_Toggle.get_icon">
<summary>
Get widget icon.
Retrieve toggle widget icon.
</summary>
<returns>Widget icon.</returns>
</member>
<member name="M:Elementor.Widget_Toggle.get_keywords">
<summary>
Get widget keywords.
Retrieve the list of keywords the widget belongs to.
</summary>
<returns>Widget keywords.</returns>
</member>
<member name="M:Elementor.Widget_Toggle.register_controls">
<summary>
Register toggle widget controls.
Adds different input fields to allow the user to change and customize the widget settings.
</summary>
</member>
<member name="M:Elementor.Widget_Toggle.render">
<summary>
Render toggle widget output on the frontend.
Written in PHP and used to generate the final HTML.
</summary>
</member>
<member name="M:Elementor.Widget_Toggle.content_template">
<summary>
Render toggle widget output in the editor.
Written as a Backbone JavaScript template and used to generate the live preview.
</summary>
</member>
<member name="M:Elementor.Widget_Video.get_name">
<summary>
Get widget name.
Retrieve video widget name.
</summary>
<returns>Widget name.</returns>
</member>
<member name="M:Elementor.Widget_Video.get_title">
<summary>
Get widget title.
Retrieve video widget title.
</summary>
<returns>Widget title.</returns>
</member>
<member name="M:Elementor.Widget_Video.get_icon">
<summary>
Get widget icon.
Retrieve video widget icon.
</summary>
<returns>Widget icon.</returns>
</member>
<member name="M:Elementor.Widget_Video.get_categories">
<summary>
Get widget categories.
Retrieve the list of categories the video widget belongs to.

Used to determine where to display the widget in the editor.
</summary>
<returns>Widget categories.</returns>
</member>
<member name="M:Elementor.Widget_Video.get_keywords">
<summary>
Get widget keywords.
Retrieve the list of keywords the widget belongs to.
</summary>
<returns>Widget keywords.</returns>
</member>
<member name="M:Elementor.Widget_Video.register_controls">
<summary>
Register video widget controls.
Adds different input fields to allow the user to change and customize the widget settings.
</summary>
</member>
<member name="M:Elementor.Widget_Video.render">
<summary>
Render video widget output on the frontend.
Written in PHP and used to generate the final HTML.
</summary>
</member>
<member name="M:Elementor.Widget_Video.render_plain_content">
<summary>
Render video widget as plain content.
Override the default behavior, by printing the video URL insted of rendering it.
</summary>
</member>
<member name="M:Elementor.Widget_Video.get_embed_params">
<summary>
Get embed params.
Retrieve video widget embed parameters.
</summary>
<returns>Video embed parameters.</returns>
</member>
<member name="M:Elementor.Widget_Video.has_image_overlay">
<summary>
Whether the video widget has an overlay image or not.
Used to determine whether an overlay image was set for the video.
</summary>
<returns>Whether an image overlay was set for the video.</returns>
</member>
<member name="M:Elementor.Widget_Video.get_embed_options">
</member>
<member name="M:Elementor.Widget_Video.get_hosted_params">
</member>
<member name="M:Elementor.Widget_Video.get_hosted_video_url">
<param name="from_media" type="bool"></param>
</member>
<member name="M:Elementor.Widget_Video.render_hosted_video">
</member>
<member name="M:Elementor.Widget_WordPress.is_pojo_widget">
<summary>
Whether the widget is a Pojo widget or not.
</summary>
</member>
<member name="M:Elementor.Widget_WordPress.get_name">
<summary>
Get widget name.
Retrieve WordPress/Pojo widget name.
</summary>
<returns>Widget name.</returns>
</member>
<member name="M:Elementor.Widget_WordPress.get_title">
<summary>
Get widget title.
Retrieve WordPress/Pojo widget title.
</summary>
<returns>Widget title.</returns>
</member>
<member name="M:Elementor.Widget_WordPress.get_categories">
<summary>
Get widget categories.
Retrieve the list of categories the WordPress/Pojo widget belongs to.

Used to determine where to display the widget in the editor.
</summary>
<returns>Widget categories. Returns either a WordPress category or Pojo category.</returns>
</member>
<member name="M:Elementor.Widget_WordPress.get_icon">
<summary>
Get widget icon.
Retrieve WordPress/Pojo widget icon.
</summary>
<returns>Widget icon. Returns either a WordPress icon or Pojo icon.</returns>
</member>
<member name="M:Elementor.Widget_WordPress.get_keywords">
<summary>
Get widget keywords.
Retrieve the list of keywords the widget belongs to.
</summary>
<returns>Widget keywords.</returns>
</member>
<member name="M:Elementor.Widget_WordPress.is_reload_preview_required">
<summary>
Whether the reload preview is required or not.
Used to determine whether the reload preview is required.
</summary>
<returns>Whether the reload preview is required.</returns>
</member>
<member name="M:Elementor.Widget_WordPress.get_form">
<summary>
Retrieve WordPress/Pojo widget form.
Returns the WordPress widget form, to be used in Elementor.
</summary>
<returns>Widget form.</returns>
</member>
<member name="M:Elementor.Widget_WordPress.get_widget_instance">
<summary>
Retrieve WordPress/Pojo widget instance.
Returns an instance of WordPress widget, to be used in Elementor.
</summary>
</member>
<member name="M:Elementor.Widget_WordPress.get_init_settings">
<summary>
Retrieve WordPress/Pojo widget parsed settings.
Returns the WordPress widget settings, to be used in Elementor.
</summary>
<returns>Parsed settings.</returns>
</member>
<member name="M:Elementor.Widget_WordPress.register_controls">
<summary>
Register WordPress/Pojo widget controls.
Adds different input fields to allow the user to change and customize the widget settings.
</summary>
</member>
<member name="M:Elementor.Widget_WordPress.render">
<summary>
Render WordPress/Pojo widget output on the frontend.
Written in PHP and used to generate the final HTML.
</summary>
</member>
<member name="M:Elementor.Widget_WordPress.content_template">
<summary>
Render WordPress/Pojo widget output in the editor.
Written as a Backbone JavaScript template and used to generate the live preview.
</summary>
</member>
<member name="M:Elementor.Widget_WordPress.__construct(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
WordPress/Pojo widget constructor.
Used to run WordPress widget constructor.
</summary>
<param name="data" type="array">Widget data. Default is an empty array.</param>
<param name="args" type="array">Widget arguments. Default is null.</param>
</member>
<member name="M:Elementor.Widget_WordPress.render_plain_content(Pchp.Core.PhpValue)">
<summary>
Render WordPress/Pojo widget as plain content.
Override the default render behavior, don't render widget content.
</summary>
<param name="instance" type="array">Widget instance. Default is empty array.</param>
</member>
<member name="M:Elementor.Modules.AdminBar.Module.is_active(Pchp.Core.Context)">
</member>
<member name="M:Elementor.Modules.AdminBar.Module.get_name">
</member>
<member name="M:Elementor.Modules.AdminBar.Module.add_document_to_admin_bar(Elementor.Core.Base.Document,Pchp.Core.PhpValue)">
<summary>
Collect the documents that was rendered in the current page.
</summary>
<param name="document" type="Document"></param>
</member>
<member name="M:Elementor.Modules.AdminBar.Module.enqueue_scripts">
<summary>
Scripts for module.
</summary>
</member>
<member name="M:Elementor.Modules.AdminBar.Module.get_init_settings">
<summary>
Creates admin bar menu items config.
</summary>
</member>
<member name="M:Elementor.Modules.AdminBar.Module.get_edit_button_config">
<summary>
Creates the config for 'Edit with elementor' menu item.
</summary>
</member>
<member name="M:Elementor.Modules.AdminBar.Module.__construct">
<summary>
Module constructor.
</summary>
</member>
<member name="M:Elementor.Modules.AdminTopBar.Module.is_active(Pchp.Core.Context)">
</member>
<member name="M:Elementor.Modules.AdminTopBar.Module.get_name">
</member>
<member name="M:Elementor.Modules.AdminTopBar.Module.enqueue_scripts">
<summary>
Enqueue admin scripts
</summary>
</member>
<member name="M:Elementor.Modules.AdminTopBar.Module.__construct">
<summary>
Module constructor.
</summary>
</member>
<member name="M:Elementor.Modules.CompatibilityTag.Base_Module.get_name">
</member>
<member name="M:Elementor.Modules.CompatibilityTag.Base_Module.get_compatibility_tag_service">
</member>
<member name="M:Elementor.Modules.CompatibilityTag.Base_Module.enable_elementor_headers(Pchp.Core.PhpArray,Pchp.Core.PhpValue)">
<summary>
Add allowed headers to plugins.
</summary>
<param name="headers" type="array"></param>
</member>
<member name="M:Elementor.Modules.CompatibilityTag.Base_Module.get_plugins_to_check">
</member>
<member name="M:Elementor.Modules.CompatibilityTag.Base_Module.on_plugin_update_message(Pchp.Core.PhpArray)">
<summary>
Append a compatibility message to the update plugin warning.
</summary>
<param name="args" type="array"></param>
</member>
<member name="M:Elementor.Modules.CompatibilityTag.Base_Module.get_plugins_with_header">
<summary>
Get all plugins with specific header.
</summary>
</member>
<member name="M:Elementor.Modules.CompatibilityTag.Base_Module.get_plugin_header">
</member>
<member name="M:Elementor.Modules.CompatibilityTag.Base_Module.get_plugin_label">
</member>
<member name="M:Elementor.Modules.CompatibilityTag.Base_Module.get_plugin_name">
</member>
<member name="M:Elementor.Modules.CompatibilityTag.Base_Module.get_plugin_version">
</member>
<member name="M:Elementor.Modules.CompatibilityTag.Base_Module.__construct">
<summary>
Base_Module constructor.
</summary>
</member>
<member name="M:Elementor.Modules.CompatibilityTag.Compatibility_Tag_Report.__construct(Pchp.Core.PhpValue)">
<summary>
Compatibility_Tag_Report constructor.
</summary>
</member>
<member name="M:Elementor.Modules.CompatibilityTag.Compatibility_Tag_Report.get_title">
<summary>
The title of the report
</summary>
</member>
<member name="M:Elementor.Modules.CompatibilityTag.Compatibility_Tag_Report.get_fields">
<summary>
Report fields
</summary>
</member>
<member name="M:Elementor.Modules.CompatibilityTag.Compatibility_Tag_Report.get_report_data">
<summary>
Report data.
</summary>
</member>
<member name="M:Elementor.Modules.CompatibilityTag.Compatibility_Tag_Report.merge_compatibility_status_with_plugins(Pchp.Core.PhpArray)">
<summary>
Merge compatibility status with the plugins data.
</summary>
<param name="compatibility_status" type="array"></param>
</member>
<member name="M:Elementor.Modules.CompatibilityTag.Compatibility_Tag_Report.get_html_from_compatibility_status(Pchp.Core.PhpArray)">
<summary>
Format compatibility status into HTML.
</summary>
<param name="compatibility_status" type="array"></param>
</member>
<member name="M:Elementor.Modules.CompatibilityTag.Compatibility_Tag_Report.get_raw_from_compatibility_status(Pchp.Core.PhpArray)">
<summary>
Format compatibility status into raw string.
</summary>
<param name="compatibility_status" type="array"></param>
</member>
<member name="M:Elementor.Modules.CompatibilityTag.Compatibility_Tag_Report.get_report_labels">
</member>
<member name="M:Elementor.Modules.CompatibilityTag.Compatibility_Tag.__construct(Pchp.Core.PhpValue)">
<summary>
Compatibility_Tag constructor.
</summary>
<param name="header" type="string"></param>
</member>
<member name="M:Elementor.Modules.CompatibilityTag.Compatibility_Tag.check(Elementor.Core.Utils.Version,Pchp.Core.PhpArray)">
<summary>
Return if plugins is compatible or not.
</summary>
<param name="version" type="Version"></param>
<param name="plugins_names" type="array"></param>
</member>
<member name="M:Elementor.Modules.CompatibilityTag.Compatibility_Tag.is_compatible(Elementor.Core.Utils.Version,Pchp.Core.PhpValue)">
<summary>
Check single plugin if is compatible or not.
</summary>
<param name="version" type="Version"></param>
</member>
<member name="M:Elementor.Modules.CompatibilityTag.Module.get_plugin_header">
</member>
<member name="M:Elementor.Modules.CompatibilityTag.Module.get_plugin_label">
</member>
<member name="M:Elementor.Modules.CompatibilityTag.Module.get_plugin_name">
</member>
<member name="M:Elementor.Modules.CompatibilityTag.Module.get_plugin_version">
</member>
<member name="M:Elementor.Modules.CompatibilityTag.Module.get_plugins_to_check">
</member>
<member name="M:Elementor.Modules.CompatibilityTag.Module.get_plugins_with_plugin_title_in_their_name">
<summary>
Get all the plugins that has the name of the current plugin in their name.
</summary>
</member>
<member name="M:Elementor.Modules.DevTools.Deprecation.get_total_major(Pchp.Core.PhpValue)">
<summary>
Get total of major.
Since `get_total_major` cannot determine how much really versions between 2.9.0 and 3.3.0 if there is 2.10.0 version for example,
versions with major2 more then 9 will be added to total.
</summary>
<param name="parsed_version" type="array"></param>
</member>
<member name="M:Elementor.Modules.DevTools.Deprecation.get_next_version(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Get next version.
</summary>
<param name="version" type="string"></param>
<param name="count" type="int"></param>
</member>
<member name="M:Elementor.Modules.DevTools.Deprecation.implode_version(Pchp.Core.PhpValue)">
<summary>
Implode parsed version to string version.
</summary>
<param name="parsed_version" type="array"></param>
</member>
<member name="M:Elementor.Modules.DevTools.Deprecation.parse_version(Pchp.Core.PhpValue)">
<summary>
Parse to an informative array.
</summary>
<param name="version" type="string"></param>
</member>
<member name="M:Elementor.Modules.DevTools.Deprecation.compare_version(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Compare two versions, result is equal to diff of major versions.
Notice: If you want to compare between 2.9.0 and 3.3.0, and there is also a 2.10.0 version, you cannot get the right comparison
Since $this-&gt;deprecation-&gt;get_total_major cannot determine how much really versions between 2.9.0 and 3.3.0.
</summary>
</member>
<member name="M:Elementor.Modules.DevTools.Deprecation.check_deprecation(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Check Deprecation
Checks whether the given entity is valid. If valid, this method checks whether the deprecation
should be soft (browser console notice) or hard (use WordPress' native deprecation methods).
</summary>
<param name="entity" type="string">- The Deprecated entity (the function/hook itself)</param>
<param name="version" type="string"></param>
<param name="replacement" type="string">Optional</param>
<param name="base_version" type="string">Optional. Default is `null`</param>
</member>
<member name="M:Elementor.Modules.DevTools.Deprecation.deprecated_function(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Deprecated Function
Handles the deprecation process for functions.
</summary>
<param name="function" type="string"></param>
<param name="version" type="string"></param>
<param name="replacement" type="string">Optional. Default is ''</param>
<param name="base_version" type="string">Optional. Default is `null`</param>
</member>
<member name="M:Elementor.Modules.DevTools.Deprecation.deprecated_hook(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Deprecated Hook
Handles the deprecation process for hooks.
</summary>
<param name="hook" type="string"></param>
<param name="version" type="string"></param>
<param name="replacement" type="string">Optional. Default is ''</param>
<param name="base_version" type="string">Optional. Default is `null`</param>
</member>
<member name="M:Elementor.Modules.DevTools.Deprecation.deprecated_argument(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Deprecated Argument
Handles the deprecation process for function arguments.
</summary>
<param name="argument" type="string"></param>
<param name="version" type="string"></param>
<param name="replacement" type="string"></param>
<param name="message" type="string"></param>
</member>
<member name="M:Elementor.Modules.DevTools.Deprecation.do_deprecated_action(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Do Deprecated Action
A method used to run deprecated actions through Elementor's deprecation process.
</summary>
<param name="hook" type="string"></param>
<param name="args" type="array"></param>
<param name="version" type="string"></param>
<param name="replacement" type="string"></param>
<param name="base_version" type="null|string"></param>
</member>
<member name="M:Elementor.Modules.DevTools.Deprecation.apply_deprecated_filter(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Apply Deprecated Filter
A method used to run deprecated filters through Elementor's deprecation process.
</summary>
<param name="hook" type="string"></param>
<param name="args" type="array"></param>
<param name="version" type="string"></param>
<param name="replacement" type="string"></param>
<param name="base_version" type="null|string"></param>
</member>
<member name="M:Elementor.Modules.DynamicTags.Module.__construct">
<summary>
Dynamic tags module constructor.
Initializing Elementor dynamic tags module.
</summary>
</member>
<member name="M:Elementor.Modules.DynamicTags.Module.get_name">
<summary>
Get module name.
Retrieve the dynamic tags module name.
</summary>
<returns>Module name.</returns>
</member>
<member name="M:Elementor.Modules.DynamicTags.Module.get_tag_classes_names">
<summary>
Get classes names.
Retrieve the dynamic tag classes names.
</summary>
<returns>Tag dynamic tag classes names.</returns>
</member>
<member name="M:Elementor.Modules.DynamicTags.Module.get_groups">
<summary>
Get groups.
Retrieve the dynamic tag groups.
</summary>
<returns>Tag dynamic tag groups.</returns>
</member>
<member name="M:Elementor.Modules.DynamicTags.Module.register_groups">
<summary>
Register groups.
Add all the available tag groups.
</summary>
</member>
<member name="M:Elementor.Modules.DynamicTags.Module.register_tags(Pchp.Core.PhpValue)">
<summary>
Register tags.
Add all the available dynamic tags.
</summary>
<param name="dynamic_tags" type="Manager"></param>
</member>
<member name="M:Elementor.Modules.ElementsColorPicker.Module.get_name">
<summary>
Retrieve the module name.
</summary>
</member>
<member name="M:Elementor.Modules.ElementsColorPicker.Module.get_experimental_data(Pchp.Core.Context)">
<summary>
Set the Eye-Dropper as an experimental feature.
</summary>
</member>
<member name="M:Elementor.Modules.ElementsColorPicker.Module.enqueue_scripts">
<summary>
Enqueue the `Color-Thief` library to pick colors from images.
</summary>
</member>
<member name="M:Elementor.Modules.ElementsColorPicker.Module.__construct">
<summary>
Module constructor - Initialize the Eye-Dropper module.
</summary>
</member>
<member name="M:Elementor.Modules.Gutenberg.Module.get_name">
</member>
<member name="M:Elementor.Modules.Gutenberg.Module.is_active(Pchp.Core.Context)">
</member>
<member name="M:Elementor.Modules.Gutenberg.Module.register_elementor_rest_field">
</member>
<member name="M:Elementor.Modules.Gutenberg.Module.enqueue_assets">
</member>
<member name="M:Elementor.Modules.Gutenberg.Module.print_admin_js_template">
</member>
<member name="M:Elementor.Modules.Gutenberg.Module.__construct">
</member>
<member name="M:Elementor.Modules.History.Module.get_name">
<summary>
Get module name.
Retrieve the history module name.
</summary>
<returns>Module name.</returns>
</member>
<member name="M:Elementor.Modules.History.Module.localize_settings">
<summary>
Localize settings.
Add new localized settings for the history module.

Fired by `elementor/editor/localize_settings` filter.
</summary>
<returns>Localized settings.</returns>
</member>
<member name="M:Elementor.Modules.History.Module.add_templates">
</member>
<member name="M:Elementor.Modules.History.Module.__construct">
<summary>
History module constructor.
Initializing Elementor history module.
</summary>
</member>
<member name="M:Elementor.Modules.History.Revisions_Manager.__construct">
<summary>
History revisions manager constructor.
Initializing Elementor history revisions manager.
</summary>
</member>
<member name="M:Elementor.Modules.History.Revisions_Manager.handle_revision(Pchp.Core.Context)">
</member>
<member name="M:Elementor.Modules.History.Revisions_Manager.avoid_delete_auto_save(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:Elementor.Modules.History.Revisions_Manager.remove_temp_post_content(Pchp.Core.Context)">
</member>
<member name="M:Elementor.Modules.History.Revisions_Manager.get_revisions(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<param name="post_id" type="int"></param>
<param name="query_args" type="array"></param>
<param name="parse_result" type="bool"></param>
</member>
<member name="M:Elementor.Modules.History.Revisions_Manager.update_autosave(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="M:Elementor.Modules.History.Revisions_Manager.save_revision(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="M:Elementor.Modules.History.Revisions_Manager.restore_revision(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:Elementor.Modules.History.Revisions_Manager.ajax_get_revision_data(Pchp.Core.Context,Pchp.Core.PhpArray)">
</member>
<member name="M:Elementor.Modules.History.Revisions_Manager.add_revision_support_for_all_post_types(Pchp.Core.Context)">
</member>
<member name="M:Elementor.Modules.History.Revisions_Manager.on_ajax_save_builder_data(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<param name="return_data" type="array"></param>
<param name="document" type="Document"></param>
</member>
<member name="M:Elementor.Modules.History.Revisions_Manager.db_before_save(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:Elementor.Modules.History.Revisions_Manager.editor_settings(Pchp.Core.Context)">
<summary>
Localize settings.
Add new localized settings for the revisions manager.

Fired by `elementor/editor/editor_settings` filter.
</summary>
</member>
<member name="M:Elementor.Modules.History.Revisions_Manager.register_ajax_actions(Pchp.Core.Context,Elementor.Core.Common.Modules.Ajax.Module)">
</member>
<member name="M:Elementor.Modules.History.Revisions_Manager.register_actions(Pchp.Core.Context)">
</member>
<member name="M:Elementor.Modules.History.Revisions_Manager.current_revision_id(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="M:Elementor.Modules.LandingPages.Documents.Landing_Page.get_name">
</member>
<member name="M:Elementor.Modules.LandingPages.Documents.Landing_Page.get_title(Pchp.Core.Context)">
</member>
<member name="M:Elementor.Modules.LandingPages.Documents.Landing_Page.get_plural_title(Pchp.Core.Context)">
</member>
<member name="M:Elementor.Modules.LandingPages.Documents.Landing_Page.save(Pchp.Core.PhpValue)">
<summary>
Save Document.
Save an Elementor document.
</summary>
</member>
<member name="M:Elementor.Modules.LandingPages.Documents.Landing_Page.admin_columns_content(Pchp.Core.PhpValue)">
<summary>
Admin Columns Content
</summary>
</member>
<member name="M:Elementor.Modules.LandingPages.Module.get_experimental_data(Pchp.Core.Context)">
<summary>
Get Experimental Data
Implementation of this method makes the module an experiment.
</summary>
</member>
<member name="M:Elementor.Modules.LandingPages.Module.get_trashed_landing_page_posts">
<summary>
Get Trashed Landing Pages Posts
Returns the posts property of a WP_Query run for Landing Pages with post_status of 'trash'.
</summary>
<returns>trashed posts</returns>
</member>
<member name="M:Elementor.Modules.LandingPages.Module.get_landing_page_posts">
<summary>
Get Landing Pages Posts
Returns the posts property of a WP_Query run for posts with the Landing Pages CPT.
</summary>
<returns>posts</returns>
</member>
<member name="M:Elementor.Modules.LandingPages.Module.is_elementor_landing_page(Pchp.Core.PhpValue)">
<summary>
Is Elementor Landing Page.
Check whether the post is an Elementor Landing Page.
</summary>
<param name="post" type="\WP_Post">Post Object</param>
<returns>Whether the post was built with Elementor.</returns>
</member>
<member name="M:Elementor.Modules.LandingPages.Module.add_submenu_page">
<summary>
Add Submenu Page
Adds the 'Landing Pages' submenu item to the 'Templates' menu item.
</summary>
</member>
<member name="M:Elementor.Modules.LandingPages.Module.get_add_new_landing_page_url">
<summary>
Get 'Add New' Landing Page URL
Retrieves the custom URL for the admin dashboard's 'Add New' button in the Landing Pages admin screen. This URL
creates a new Landing Pages and directly opens the Elementor Editor with the Template Library modal open on the
Landing Pages tab.
</summary>
</member>
<member name="M:Elementor.Modules.LandingPages.Module.print_empty_landing_pages_page">
<summary>
Get Empty Landing Pages Page
Prints the HTML content of the page that is displayed when there are no existing landing pages in the DB.
Added as the callback to add_submenu_page.
</summary>
</member>
<member name="M:Elementor.Modules.LandingPages.Module.is_landing_page_admin_edit">
<summary>
Is Current Admin Page Edit LP
Checks whether the current page is a native WordPress edit page for a landing page.
</summary>
</member>
<member name="M:Elementor.Modules.LandingPages.Module.admin_localize_settings(Pchp.Core.PhpValue)">
<summary>
Admin Localize Settings
Enables adding properties to the globally available elementorAdmin.config JS object in the Admin Dashboard.
Runs on the 'elementor/admin/localize_settings' filter.
</summary>
</member>
<member name="M:Elementor.Modules.LandingPages.Module.register_landing_page_cpt">
<summary>
Register Landing Pages CPT
</summary>
</member>
<member name="M:Elementor.Modules.LandingPages.Module.remove_post_type_slug(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Remove Post Type Slug
Landing Pages are supposed to act exactly like pages. This includes their URLs being directly under the site's
domain name. Since "Landing Pages" is a CPT, WordPress automatically adds the landing page slug as a prefix to
it's posts' permalinks. This method checks if the post's post type is Landing Pages, and if it is, it removes
the CPT slug from the requested post URL.

Runs on the 'post_type_link' filter.
</summary>
</member>
<member name="M:Elementor.Modules.LandingPages.Module.adjust_landing_page_query(WP_Query)">
<summary>
Adjust Landing Page Query
Since Landing Pages are a CPT but should act like pages, the WP_Query that is used to fetch the page from the
database needs to be adjusted. This method adds the Landing Pages CPT to the list of queried post types, to
make sure the database query finds the correct Landing Page to display.
Runs on the 'pre_get_posts' action.
</summary>
<param name="query" type="\WP_Query"></param>
</member>
<member name="M:Elementor.Modules.LandingPages.Module.handle_404(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Handle 404
This method runs after a page is not found in the database, but before a page is returned as a 404.
These cases are handled in this filter callback, that runs on the 'pre_handle_404' filter.

In some cases (such as when a site uses custom permalink structures), WordPress's WP_Query does not identify a
Landing Page's URL as a post belonging to the Landing Page CPT. Some cases are handled successfully by the
adjust_landing_page_query() method, but some are not and still trigger a 404 process. This method handles such
cases by overriding the $wp_query global to fetch the correct landing page post entry.

For example, since Landing Pages slugs come directly after the site domain name, WP_Query might parse the post
as a category page. Since there is no category matching the slug, it triggers a 404 process. In this case, we
run a query for a Landing Page post with the passed slug ($query-&gt;query['category_name']. If a Landing Page
with the passed slug is found, we override the global $wp_query with the new, correct query.
</summary>
</member>
<member name="M:Elementor.Modules.Library.Documents.Library_Document.get_properties(Pchp.Core.Context)">
<summary>
Get document properties.
Retrieve the document properties.
</summary>
<returns>Document properties.</returns>
</member>
<member name="M:Elementor.Modules.Library.Documents.Library_Document.get_initial_config">
<summary>
Get initial config.
Retrieve the current element initial configuration.

Adds more configuration on top of the controls list and the tabs assigned
to the control. This method also adds element name, type, icon and more.
</summary>
<returns>The initial config.</returns>
</member>
<member name="M:Elementor.Modules.Library.Documents.Not_Supported.get_properties(Pchp.Core.Context)">
<summary>
Get document properties.
Retrieve the document properties.
</summary>
<returns>Document properties.</returns>
</member>
<member name="M:Elementor.Modules.Library.Documents.Not_Supported.get_title(Pchp.Core.Context)">
<summary>
Get document title.
Retrieve the document title.
</summary>
<returns>Document title.</returns>
</member>
<member name="M:Elementor.Modules.Library.Documents.Page.get_properties(Pchp.Core.Context)">
<summary>
Get document properties.
Retrieve the document properties.
</summary>
<returns>Document properties.</returns>
</member>
<member name="M:Elementor.Modules.Library.Documents.Page.get_title(Pchp.Core.Context)">
<summary>
Get document title.
Retrieve the document title.
</summary>
<returns>Document title.</returns>
</member>
<member name="M:Elementor.Modules.Library.Documents.Page.get_css_wrapper_selector">
</member>
<member name="M:Elementor.Modules.Library.Documents.Page.register_controls">
</member>
<member name="M:Elementor.Modules.Library.Documents.Section.get_title(Pchp.Core.Context)">
<summary>
Get document title.
Retrieve the document title.
</summary>
<returns>Document title.</returns>
</member>
<member name="M:Elementor.Modules.Library.Module.get_name">
<summary>
Get module name.
Retrieve the library module name.
</summary>
<returns>Module name.</returns>
</member>
<member name="M:Elementor.Modules.Library.Module.__construct">
<summary>
Library module constructor.
Initializing Elementor library module.
</summary>
</member>
<member name="M:Elementor.Modules.Library.Traits.Library`1`1.print_admin_column_type">
<summary>
Print Admin Column Type
Runs on WordPress' 'manage_{custom post type}_posts_custom_column' hook to modify each row's content.
</summary>
</member>
<member name="M:Elementor.Modules.Library.Traits.Library`1`1.save_template_type">
<summary>
Save document type.
Set new/updated document type.
</summary>
</member>
<member name="M:Elementor.Modules.Library.User_Favorites.__construct(Pchp.Core.PhpValue)">
<summary>
User_Favorites constructor.
</summary>
</member>
<member name="M:Elementor.Modules.Library.User_Favorites.get(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<param name="vendor" type="null"></param>
<param name="resource" type="null"></param>
<param name="ignore_cache" type="false"></param>
</member>
<member name="M:Elementor.Modules.Library.User_Favorites.exists(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:Elementor.Modules.Library.User_Favorites.save(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<param name="value" type="array"></param>
<returns>$this</returns>
</member>
<member name="M:Elementor.Modules.Library.User_Favorites.add(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<returns>$this</returns>
</member>
<member name="M:Elementor.Modules.Library.User_Favorites.remove(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<returns>$this</returns>
</member>
<member name="M:Elementor.Modules.Library.User_Favorites.get_key(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:Elementor.Modules.PageTemplates.Module.get_name">
<summary>
Get module name.
Retrieve the page templates module name.
</summary>
<returns>Module name.</returns>
</member>
<member name="M:Elementor.Modules.PageTemplates.Module.template_include(Pchp.Core.PhpValue)">
<summary>
Template include.
Update the path for the Elementor Canvas template.

Fired by `template_include` filter.
</summary>
<param name="template" type="string">The path of the template to include.</param>
<returns>The path of the template to include.</returns>
</member>
<member name="M:Elementor.Modules.PageTemplates.Module.add_wp_templates_support">
<summary>
Add WordPress templates.
Adds Elementor templates to all the post types that support
Elementor.

Fired by `init` action.
</summary>
</member>
<member name="M:Elementor.Modules.PageTemplates.Module.add_page_templates(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Add page templates.
Add the Elementor page templates to the theme templates.

Fired by `theme_{$post_type}_templates` filter.
</summary>
<param name="page_templates" type="array">Array of page templates. Keys are filenames,
checks are translated names.</param>
<param name="wp_theme" type="\WP_Theme"></param>
<param name="post" type="\WP_Post"></param>
<returns>Page templates.</returns>
</member>
<member name="M:Elementor.Modules.PageTemplates.Module.set_print_callback(Pchp.Core.PhpValue)">
<summary>
Set print callback.
Set the page template callback.
</summary>
<param name="callback" type="callable"></param>
</member>
<member name="M:Elementor.Modules.PageTemplates.Module.print_callback">
<summary>
Print callback.
Prints the page template content using WordPress loop.
</summary>
</member>
<member name="M:Elementor.Modules.PageTemplates.Module.print_content">
<summary>
Print content.
Prints the page template content.
</summary>
</member>
<member name="M:Elementor.Modules.PageTemplates.Module.get_template_path(Pchp.Core.PhpValue)">
<summary>
Get page template path.
Retrieve the path for any given page template.
</summary>
<param name="page_template" type="string">The page template name.</param>
<returns>Page template path.</returns>
</member>
<member name="M:Elementor.Modules.PageTemplates.Module.action_register_template_control(Pchp.Core.PhpValue)">
<summary>
Register template control.
Adds custom controls to any given document.

Fired by `update_post_metadata` action.
</summary>
<param name="document" type="Document">The document instance.</param>
</member>
<member name="M:Elementor.Modules.PageTemplates.Module.register_template_control(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Register template control.
Adds custom controls to any given document.
</summary>
<param name="document" type="Document">The document instance.</param>
<param name="control_id" type="string">Optional. The control ID. Default is `template`.</param>
</member>
<member name="M:Elementor.Modules.PageTemplates.Module.filter_update_meta(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Filter metadata update.
Filters whether to update metadata of a specific type.

Elementor don't allow WordPress to update the parent page template
during `wp_update_post`.

Fired by `update_{$meta_type}_metadata` filter.
</summary>
<param name="check" type="bool">Whether to allow updating metadata for the given type.</param>
<param name="object_id" type="int">Object ID.</param>
<param name="meta_key" type="string">Meta key.</param>
<returns>Whether to allow updating metadata of a specific type.</returns>
</member>
<member name="M:Elementor.Modules.PageTemplates.Module.body_open(Pchp.Core.Context)">
<summary>
Support `wp_body_open` action, available since WordPress 5.2.
</summary>
</member>
<member name="M:Elementor.Modules.PageTemplates.Module.__construct">
<summary>
Page templates module constructor.
Initializing Elementor page templates module.
</summary>
</member>
<member name="M:Elementor.Modules.SafeMode.Module.add_admin_button(Pchp.Core.PhpValue)">
<param name="tools_page" type="Tools"></param>
</member>
<member name="M:Safe_Mode.plugin_row_meta(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Plugin row meta.
Adds row meta links to the plugin list table

Fired by `plugin_row_meta` filter.
</summary>
<param name="plugin_meta" type="array">An array of the plugin's metadata, including
the version, author, author URI, and plugin URI.</param>
<param name="plugin_file" type="string">Path to the plugin file, relative to the plugins
directory.</param>
<returns>An array of plugin row meta links.</returns>
</member>
<member name="M:Elementor.Modules.Shapes.Module.get_paths(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Return a translated user-friendly list of the available SVG shapes.
</summary>
<param name="add_custom" type="bool">Determine if the output should include the `Custom` option.</param>
<returns>List of paths.</returns>
</member>
<member name="M:Elementor.Modules.Shapes.Module.read_svg(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Read SVG contents.
</summary>
<param name="path">- The SVG file path.</param>
</member>
<member name="M:Elementor.Modules.Shapes.Module.get_path_svg(Pchp.Core.Context,Pchp.Core.Reflection.PhpTypeInfo,Pchp.Core.PhpValue)">
<summary>
Gets an SVG path name as a parameter and returns its SVG markup from the `svg-paths`
folder under the assets directory.
</summary>
<param name="path" type="string">Path name.</param>
<returns>The path SVG markup.</returns>
</member>
<member name="M:Elementor.Modules.Shapes.Module.get_widgets">
<summary>
Get the module's associated widgets.
</summary>
</member>
<member name="M:Elementor.Modules.Shapes.Module.get_name">
<summary>
Retrieve the module name.
</summary>
</member>
<member name="M:Elementor.Modules.Shapes.Widgets.TextPath.get_name">
<summary>
Get widget name.
Retrieve Text Path widget name.
</summary>
<returns>Widget name.</returns>
</member>
<member name="M:Elementor.Modules.Shapes.Widgets.TextPath.get_title">
<summary>
Get widget title.
Retrieve Text Path widget title.
</summary>
<returns>Widget title.</returns>
</member>
<member name="M:Elementor.Modules.Shapes.Widgets.TextPath.get_icon">
<summary>
Get widget icon.
Retrieve Text Path widget icon.
</summary>
<returns>Widget icon.</returns>
</member>
<member name="M:Elementor.Modules.Shapes.Widgets.TextPath.get_keywords">
<summary>
Get widget keywords.
Retrieve the list of keywords the widget belongs to.
</summary>
<returns>Widget keywords.</returns>
</member>
<member name="M:Elementor.Modules.Shapes.Widgets.TextPath.register_content_tab">
<summary>
Register content controls under content tab.
</summary>
</member>
<member name="M:Elementor.Modules.Shapes.Widgets.TextPath.register_style_tab">
<summary>
Register style controls under style tab.
</summary>
</member>
<member name="M:Elementor.Modules.Shapes.Widgets.TextPath.register_controls">
<summary>
Register Text Path widget controls.
Adds different input fields to allow the user to change and customize the widget settings.
</summary>
</member>
<member name="M:Elementor.Modules.Shapes.Widgets.TextPath.render">
<summary>
Render Text Path widget output on the frontend.
Written in PHP and used to generate the final HTML.
</summary>
</member>
<member name="M:Elementor.Modules.System_Info.Helpers.Model_Helper.__construct">
<summary>
Model helper constructor.
Initializing the model helper class.
</summary>
</member>
<member name="M:Elementor.Modules.System_Info.Helpers.Model_Helper.filter_possible_properties(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Filter possible properties.
Retrieve possible properties filtered by property intersect key.
</summary>
<param name="possible_properties" type="array">All the possible properties.</param>
<param name="properties" type="array">Properties to filter.</param>
<returns>Possible properties filtered by property intersect key.</returns>
</member>
<member name="M:Elementor.Modules.System_Info.Helpers.Model_Helper.prepare_properties(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Prepare properties.
Combine the possible properties with the user properties and filter them.
</summary>
<param name="possible_properties" type="array">All the possible properties.</param>
<param name="user_properties" type="array">User properties.</param>
<returns>Possible properties and user properties filtered by property intersect key.</returns>
</member>
<member name="M:Elementor.Modules.System_Info.Module.get_name">
<summary>
Get module name.
Retrieve the system info module name.
</summary>
<returns>Module name.</returns>
</member>
<member name="M:Elementor.Modules.System_Info.Module.__construct">
<summary>
Main system info page constructor.
Initializing Elementor system info page.
</summary>
</member>
<member name="M:Elementor.Modules.System_Info.Module.get_init_settings">
<summary>
Get default settings.
Retrieve the default settings. Used to reset the report settings on
initialization.
</summary>
<returns>Default settings.</returns>
</member>
<member name="M:Elementor.Modules.System_Info.Module.add_actions">
<summary>
Add actions.
Register filters and actions for the main system info page.
</summary>
</member>
<member name="M:Elementor.Modules.System_Info.Module.register_menu">
<summary>
Register admin menu.
Add new Elementor system info admin menu.

Fired by `admin_menu` action.
</summary>
</member>
<member name="M:Elementor.Modules.System_Info.Module.display_page">
<summary>
Display page.
Output the content for the main system info page.
</summary>
</member>
<member name="M:Elementor.Modules.System_Info.Module.download_file">
<summary>
Download file.
Download the reports files.

Fired by `wp_ajax_elementor_system_info_download_file` action.
</summary>
</member>
<member name="M:Elementor.Modules.System_Info.Module.get_reporter_class(Pchp.Core.PhpValue)">
<summary>
Get report class.
Retrieve the class of the report for any given report type.
</summary>
<param name="reporter_type" type="string">The type of the report.</param>
<returns>The class of the report.</returns>
</member>
<member name="M:Elementor.Modules.System_Info.Module.load_reports(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Load reports.
Retrieve the system info reports.
</summary>
<param name="reports" type="array">An array of system info reports.</param>
<param name="format" type="string">- possible values: 'raw' or empty string, meaning 'html'</param>
<returns>An array of system info reports.</returns>
</member>
<member name="M:Elementor.Modules.System_Info.Module.create_reporter(Pchp.Core.PhpArray)">
<summary>
Create a report.
Register a new report that will be displayed in Elementor system info page.
</summary>
<param name="properties" type="array">Report properties.</param>
<returns>Base instance if the report was created,
False or WP_Error otherwise.</returns>
</member>
<member name="M:Elementor.Modules.System_Info.Module.print_report(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Print report.
Output the system info page reports using an output template.
</summary>
<param name="reports" type="array">An array of system info reports.</param>
<param name="template" type="string">Output type from the templates folder. Available
templates are `raw` and `html`. Default is `raw`.</param>
</member>
<member name="M:Elementor.Modules.System_Info.Module.get_allowed_reports(Pchp.Core.Context)">
<summary>
Get allowed reports.
Retrieve the available reports in Elementor system info page.
</summary>
<returns>Available reports in Elementor system info page.</returns>
</member>
<member name="M:Elementor.Modules.System_Info.Module.add_report(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Add report.
Register a new report to Elementor system info page.
</summary>
<param name="report_name" type="string">The name of the report.</param>
<param name="report_info" type="array">Report info.</param>
</member>
<member name="M:Elementor.Modules.System_Info.Reporters.Base.get_title">
<summary>
Get report title.
Retrieve the title of the report.
</summary>
</member>
<member name="M:Elementor.Modules.System_Info.Reporters.Base.get_fields">
<summary>
Get report fields.
Retrieve the required fields for the report.
</summary>
</member>
<member name="M:Elementor.Modules.System_Info.Reporters.Base.is_enabled">
<summary>
Is report enabled.
Whether the report is enabled.
</summary>
<returns>Whether the report is enabled.</returns>
</member>
<member name="M:Elementor.Modules.System_Info.Reporters.Base.get_report(Pchp.Core.PhpValue)">
<summary>
Get report.
Retrieve the report with all it's containing fields.
</summary>
<returns>| array {
Report fields.

@type string $name Field name.
@type string $label Field label.
}</returns>
</member>
<member name="M:Elementor.Modules.System_Info.Reporters.Base.get_properties_keys(Pchp.Core.Context)">
<summary>
Get properties keys.
Retrieve the keys of the properties.
</summary>
<returns>{
Property keys.

@type string $name   Property name.
@type string $fields Property fields.
}</returns>
</member>
<member name="M:Elementor.Modules.System_Info.Reporters.Base.filter_possible_properties(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Filter possible properties.
Retrieve possible properties filtered by property keys.
</summary>
<param name="properties" type="array">Properties to filter.</param>
<returns>Possible properties filtered by property keys.</returns>
</member>
<member name="M:Elementor.Modules.System_Info.Reporters.Base.set_properties(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Set properties.
Add/update properties to the report.
</summary>
<param name="key" type="array">Property key.</param>
<param name="value" type="array">Optional. Property value. Default is `null`.</param>
</member>
<member name="M:Elementor.Modules.System_Info.Reporters.Base.__construct(Pchp.Core.PhpValue)">
<summary>
Reporter base constructor.
Initializing the reporter base class.
</summary>
<param name="properties" type="array">Optional. Properties to filter. Default is `null`.</param>
</member>
<member name="M:Elementor.Modules.System_Info.Reporters.MU_Plugins.get_mu_plugins">
<summary>
Get must-use plugins.
Retrieve the must-use plugins.
</summary>
<returns>Must-Use plugins.</returns>
</member>
<member name="M:Elementor.Modules.System_Info.Reporters.MU_Plugins.is_enabled">
<summary>
Is enabled.
Whether there are must-use plugins or not.
</summary>
<returns>True if the site has must-use plugins, False otherwise.</returns>
</member>
<member name="M:Elementor.Modules.System_Info.Reporters.MU_Plugins.get_title">
<summary>
Get must-use plugins reporter title.
Retrieve must-use plugins reporter title.
</summary>
<returns>Reporter title.</returns>
</member>
<member name="M:Elementor.Modules.System_Info.Reporters.MU_Plugins.get_fields">
<summary>
Get must-use plugins report fields.
Retrieve the required fields for the must-use plugins report.
</summary>
<returns>Required report fields with field ID and field label.</returns>
</member>
<member name="M:Elementor.Modules.System_Info.Reporters.MU_Plugins.get_must_use_plugins">
<summary>
Get must-use plugins.
Retrieve the sites must-use plugins.
</summary>
<returns>{
Report data.

@type string $value The must-use plugins list.
}</returns>
</member>
<member name="M:Elementor.Modules.System_Info.Reporters.Network_Plugins.get_title">
<summary>
Get network plugins reporter title.
Retrieve network plugins reporter title.
</summary>
<returns>Reporter title.</returns>
</member>
<member name="M:Elementor.Modules.System_Info.Reporters.Network_Plugins.get_network_plugins">
<summary>
Get active network plugins.
Retrieve the active network plugins from the list of active site-wide plugins.
</summary>
<returns>Active network plugins.</returns>
</member>
<member name="M:Elementor.Modules.System_Info.Reporters.Network_Plugins.is_enabled">
<summary>
Is enabled.
Whether there are active network plugins or not.
</summary>
<returns>True if the site has active network plugins, False otherwise.</returns>
</member>
<member name="M:Elementor.Modules.System_Info.Reporters.Network_Plugins.get_fields">
<summary>
Get network plugins report fields.
Retrieve the required fields for the network plugins report.
</summary>
<returns>Required report fields with field ID and field label.</returns>
</member>
<member name="M:Elementor.Modules.System_Info.Reporters.Network_Plugins.get_network_active_plugins">
<summary>
Get active network plugins.
Retrieve the sites active network plugins.
</summary>
<returns>{
Report data.

@type string $value The active network plugins list.
}</returns>
</member>
<member name="M:Elementor.Modules.System_Info.Reporters.Plugins.get_plugins">
<summary>
Get active plugins.
Retrieve the active plugins from the list of all the installed plugins.
</summary>
<returns>Active plugins.</returns>
</member>
<member name="M:Elementor.Modules.System_Info.Reporters.Plugins.get_title">
<summary>
Get active plugins reporter title.
Retrieve active plugins reporter title.
</summary>
<returns>Reporter title.</returns>
</member>
<member name="M:Elementor.Modules.System_Info.Reporters.Plugins.is_enabled">
<summary>
Is enabled.
Whether there are active plugins or not.
</summary>
<returns>True if the site has active plugins, False otherwise.</returns>
</member>
<member name="M:Elementor.Modules.System_Info.Reporters.Plugins.get_fields">
<summary>
Get active plugins report fields.
Retrieve the required fields for the active plugins report.
</summary>
<returns>Required report fields with field ID and field label.</returns>
</member>
<member name="M:Elementor.Modules.System_Info.Reporters.Plugins.get_active_plugins">
<summary>
Get active plugins.
Retrieve the sites active plugins.
</summary>
<returns>{
Report data.

@type string $value The active plugins list.
}</returns>
</member>
<member name="M:Elementor.Modules.System_Info.Reporters.Server.get_title">
<summary>
Get server environment reporter title.
Retrieve server environment reporter title.
</summary>
<returns>Reporter title.</returns>
</member>
<member name="M:Elementor.Modules.System_Info.Reporters.Server.get_fields">
<summary>
Get server environment report fields.
Retrieve the required fields for the server environment report.
</summary>
<returns>Required report fields with field ID and field label.</returns>
</member>
<member name="M:Elementor.Modules.System_Info.Reporters.Server.get_os">
<summary>
Get server operating system.
Retrieve the server operating system.
</summary>
<returns>{
Report data.

@type string $value Server operating system.
}</returns>
</member>
<member name="M:Elementor.Modules.System_Info.Reporters.Server.get_software">
<summary>
Get server software.
Retrieve the server software.
</summary>
<returns>{
Report data.

@type string $value Server software.
}</returns>
</member>
<member name="M:Elementor.Modules.System_Info.Reporters.Server.get_php_version">
<summary>
Get PHP version.
Retrieve the PHP version.
</summary>
<returns>{
Report data.

@type string $value          PHP version.
@type string $recommendation Minimum PHP version recommendation.
@type bool   $warning        Whether to display a warning.
}</returns>
</member>
<member name="M:Elementor.Modules.System_Info.Reporters.Server.get_php_max_input_vars">
<summary>
Get PHP `max_input_vars`.
Retrieve the value of `max_input_vars` from `php.ini` configuration file.
</summary>
<returns>{
Report data.

@type string $value PHP `max_input_vars`.
}</returns>
</member>
<member name="M:Elementor.Modules.System_Info.Reporters.Server.get_php_max_post_size">
<summary>
Get PHP `post_max_size`.
Retrieve the value of `post_max_size` from `php.ini` configuration file.
</summary>
<returns>{
Report data.

@type string $value PHP `post_max_size`.
}</returns>
</member>
<member name="M:Elementor.Modules.System_Info.Reporters.Server.get_gd_installed">
<summary>
Get GD installed.
Whether the GD extension is installed.
</summary>
<returns>{
Report data.

@type string $value   Yes if the GD extension is installed, No otherwise.
@type bool   $warning Whether to display a warning. True if the GD extension is installed, False otherwise.
}</returns>
</member>
<member name="M:Elementor.Modules.System_Info.Reporters.Server.get_zip_installed">
<summary>
Get ZIP installed.
Whether the ZIP extension is installed.
</summary>
<returns>{
Report data.

@type string $value   Yes if the ZIP extension is installed, No otherwise.
@type bool   $warning Whether to display a warning. True if the ZIP extension is installed, False otherwise.
}</returns>
</member>
<member name="M:Elementor.Modules.System_Info.Reporters.Server.get_mysql_version">
<summary>
Get MySQL version.
Retrieve the MySQL version.
</summary>
<returns>{
Report data.

@type string $value MySQL version.
}</returns>
</member>
<member name="M:Elementor.Modules.System_Info.Reporters.Server.get_write_permissions">
<summary>
Get write permissions.
Check whether the required folders has writing permissions.
</summary>
<returns>{
Report data.

@type string $value   Writing permissions status.
@type bool   $warning Whether to display a warning. True if some required
folders don't have writing permissions, False otherwise.
}</returns>
</member>
<member name="M:Elementor.Modules.System_Info.Reporters.Server.get_elementor_library">
<summary>
Check for elementor library connectivity.
Check whether the remote elementor library is reachable.
</summary>
<returns>{
Report data.

@type string $value   The status of elementor library connectivity.
@type bool   $warning Whether to display a warning. True if elementor
*                        library is not reachable, False otherwise.
}</returns>
</member>
<member name="M:Elementor.Modules.System_Info.Reporters.Theme.get_title">
<summary>
Get theme reporter title.
Retrieve theme reporter title.
</summary>
<returns>Reporter title.</returns>
</member>
<member name="M:Elementor.Modules.System_Info.Reporters.Theme.get_fields">
<summary>
Get theme report fields.
Retrieve the required fields for the theme report.
</summary>
<returns>Required report fields with field ID and field label.</returns>
</member>
<member name="M:Elementor.Modules.System_Info.Reporters.Theme._get_theme">
<summary>
Get theme.
Retrieve the theme.
</summary>
<returns>WordPress theme object.</returns>
</member>
<member name="M:Elementor.Modules.System_Info.Reporters.Theme.get_theme">
<summary>
Get theme.
Retrieve the theme.
</summary>
<returns>WordPress theme object.</returns>
</member>
<member name="M:Elementor.Modules.System_Info.Reporters.Theme.get_parent_theme">
<summary>
Get parent theme.
Retrieve the parent theme.
</summary>
<returns>WordPress theme object, or false if the current theme is not a child theme.</returns>
</member>
<member name="M:Elementor.Modules.System_Info.Reporters.Theme.get_name">
<summary>
Get theme name.
Retrieve the theme name.
</summary>
<returns>{
Report data.

@type string $value The theme name.
}</returns>
</member>
<member name="M:Elementor.Modules.System_Info.Reporters.Theme.get_author">
<summary>
Get theme author.
Retrieve the theme author.
</summary>
<returns>{
Report data.

@type string $value The theme author.
}</returns>
</member>
<member name="M:Elementor.Modules.System_Info.Reporters.Theme.get_version">
<summary>
Get theme version.
Retrieve the theme version.
</summary>
<returns>{
Report data.

@type string $value The theme version.
}</returns>
</member>
<member name="M:Elementor.Modules.System_Info.Reporters.Theme.get_is_child_theme">
<summary>
Is the theme is a child theme.
Whether the theme is a child theme.
</summary>
<returns>{
Report data.

@type string $value          Yes if the theme is a child theme, No otherwise.
@type string $recommendation Theme source code modification recommendation.
}</returns>
</member>
<member name="M:Elementor.Modules.System_Info.Reporters.Theme.get_parent_version">
<summary>
Get parent theme version.
Retrieve the parent theme version.
</summary>
<returns>{
Report data.

@type string $value The parent theme version.
}</returns>
</member>
<member name="M:Elementor.Modules.System_Info.Reporters.Theme.get_parent_author">
<summary>
Get parent theme author.
Retrieve the parent theme author.
</summary>
<returns>{
Report data.

@type string $value The parent theme author.
}</returns>
</member>
<member name="M:Elementor.Modules.System_Info.Reporters.Theme.get_parent_name">
<summary>
Get parent theme name.
Retrieve the parent theme name.
</summary>
<returns>{
Report data.

@type string $value The parent theme name.
}</returns>
</member>
<member name="M:Elementor.Modules.System_Info.Reporters.User.get_title">
<summary>
Get user reporter title.
Retrieve user reporter title.
</summary>
<returns>Reporter title.</returns>
</member>
<member name="M:Elementor.Modules.System_Info.Reporters.User.get_fields">
<summary>
Get user report fields.
Retrieve the required fields for the user report.
</summary>
<returns>Required report fields with field ID and field label.</returns>
</member>
<member name="M:Elementor.Modules.System_Info.Reporters.User.get_role">
<summary>
Get user role.
Retrieve the user role.
</summary>
<returns>{
Report data.

@type string $value The user role.
}</returns>
</member>
<member name="M:Elementor.Modules.System_Info.Reporters.User.get_locale">
<summary>
Get user profile language.
Retrieve the user profile language.
</summary>
<returns>{
Report data.

@type string $value User profile language.
}</returns>
</member>
<member name="M:Elementor.Modules.System_Info.Reporters.User.get_agent">
<summary>
Get user agent.
Retrieve user agent.
</summary>
<returns>{
Report data.

@type string $value HTTP user agent.
}</returns>
</member>
<member name="M:Elementor.Modules.System_Info.Reporters.WordPress.get_title">
<summary>
Get WordPress environment reporter title.
Retrieve WordPress environment reporter title.
</summary>
<returns>Reporter title.</returns>
</member>
<member name="M:Elementor.Modules.System_Info.Reporters.WordPress.get_fields">
<summary>
Get WordPress environment report fields.
Retrieve the required fields for the WordPress environment report.
</summary>
<returns>Required report fields with field ID and field label.</returns>
</member>
<member name="M:Elementor.Modules.System_Info.Reporters.WordPress.get_memory_limit">
<summary>
Get WordPress memory limit.
Retrieve the WordPress memory limit.
</summary>
<returns>{
Report data.

@type string $value          WordPress memory limit.
@type string $recommendation Recommendation memory limit.
@type bool   $warning        Whether to display a warning. True if the limit
is below the recommended 64M, False otherwise.
}</returns>
</member>
<member name="M:Elementor.Modules.System_Info.Reporters.WordPress.get_version">
<summary>
Get WordPress version.
Retrieve the WordPress version.
</summary>
<returns>{
Report data.

@type string $value WordPress version.
}</returns>
</member>
<member name="M:Elementor.Modules.System_Info.Reporters.WordPress.get_is_multisite">
<summary>
Is multisite.
Whether multisite is enabled or not.
</summary>
<returns>{
Report data.

@type string $value Yes if multisite is enabled, No otherwise.
}</returns>
</member>
<member name="M:Elementor.Modules.System_Info.Reporters.WordPress.get_site_url">
<summary>
Get site URL.
Retrieve WordPress site URL.
</summary>
<returns>{
Report data.

@type string $value WordPress site URL.
}</returns>
</member>
<member name="M:Elementor.Modules.System_Info.Reporters.WordPress.get_home_url">
<summary>
Get home URL.
Retrieve WordPress home URL.
</summary>
<returns>{
Report data.

@type string $value WordPress home URL.
}</returns>
</member>
<member name="M:Elementor.Modules.System_Info.Reporters.WordPress.get_permalink_structure">
<summary>
Get permalink structure.
Retrieve the permalink structure
</summary>
<returns>{
Report data.

@type string $value WordPress permalink structure.
}</returns>
</member>
<member name="M:Elementor.Modules.System_Info.Reporters.WordPress.get_language">
<summary>
Get site language.
Retrieve the site language.
</summary>
<returns>{
Report data.

@type string $value WordPress site language.
}</returns>
</member>
<member name="M:Elementor.Modules.System_Info.Reporters.WordPress.get_max_upload_size">
<summary>
Get PHP `max_upload_size`.
Retrieve the value of maximum upload file size defined in `php.ini` configuration file.
</summary>
<returns>{
Report data.

@type string $value Maximum upload file size allowed.
}</returns>
</member>
<member name="M:Elementor.Modules.System_Info.Reporters.WordPress.get_timezone">
<summary>
Get WordPress timezone.
Retrieve WordPress timezone.
</summary>
<returns>{
Report data.

@type string $value WordPress timezone.
}</returns>
</member>
<member name="M:Elementor.Modules.System_Info.Reporters.WordPress.get_admin_email">
<summary>
Get WordPress administrator email.
Retrieve WordPress administrator email.
</summary>
<returns>{
Report data.

@type string $value WordPress administrator email.
}</returns>
</member>
<member name="M:Elementor.Modules.System_Info.Reporters.WordPress.get_debug_mode">
<summary>
Get debug mode.
Whether WordPress debug mode is enabled or not.
</summary>
<returns>{
Report data.

@type string $value Active if debug mode is enabled, Inactive otherwise.
}</returns>
</member>
<member name="M:Elementor.Modules.Usage.Module.get_name">
<summary>
Get module name.
Retrieve the usage module name.
</summary>
<returns>Module name.</returns>
</member>
<member name="M:Elementor.Modules.Usage.Module.get_doc_type_count(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Get doc type count.
Get count of documents based on doc type

Remove 'wp-' from $doc_type for BC, support doc type change since 2.7.0.
</summary>
<param name="doc_class" type="\Elementor\Core\Documents_Manager"></param>
<param name="doc_type" type="String"></param>
</member>
<member name="M:Elementor.Modules.Usage.Module.get_formatted_usage(Pchp.Core.PhpValue)">
<summary>
Get formatted usage.
Retrieve formatted usage, for frontend.
</summary>
</member>
<member name="M:Elementor.Modules.Usage.Module.before_document_save(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Before document Save.
Called on elementor/document/before_save, remove document from global &amp; set saving flag.
</summary>
<param name="document" type="Document"></param>
<param name="data" type="array">new settings to save.</param>
</member>
<member name="M:Elementor.Modules.Usage.Module.after_document_save(Pchp.Core.PhpValue)">
<summary>
After document save.
Called on elementor/document/after_save, adds document to global &amp; clear saving flag.
</summary>
<param name="document" type="Document"></param>
</member>
<member name="M:Elementor.Modules.Usage.Module.on_status_change(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
On status change.
Called on transition_post_status.
</summary>
<param name="new_status" type="string"></param>
<param name="old_status" type="string"></param>
<param name="post" type="\WP_Post"></param>
</member>
<member name="M:Elementor.Modules.Usage.Module.on_before_delete_post(Pchp.Core.PhpValue)">
<summary>
On before delete post.
Called on on_before_delete_post.
</summary>
<param name="post_id" type="int"></param>
</member>
<member name="M:Elementor.Modules.Usage.Module.add_tracking_data(Pchp.Core.PhpValue)">
<summary>
Add's tracking data.
Called on elementor/tracker/send_tracking_data_params.
</summary>
<param name="params" type="array"></param>
</member>
<member name="M:Elementor.Modules.Usage.Module.recalc_usage(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Recalculate usage.
Recalculate usage for all elementor posts.
</summary>
<param name="limit" type="int"></param>
<param name="offset" type="int"></param>
</member>
<member name="M:Elementor.Modules.Usage.Module.increase_controls_count(Pchp.Core.PhpAlias,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Increase controls count.
Increase controls count, for each element.
</summary>
<param name="tab" type="string"></param>
<param name="section" type="string"></param>
<param name="control" type="string"></param>
<param name="count" type="int"></param>
</member>
<member name="M:Elementor.Modules.Usage.Module.add_controls(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpAlias)">
<summary>
Add Controls
Add's controls to this element_ref, returns changed controls count.
</summary>
<param name="settings_controls" type="array"></param>
<param name="element_controls" type="array"></param>
<returns>($changed_controls_count).</returns>
</member>
<member name="M:Elementor.Modules.Usage.Module.add_general_controls(Pchp.Core.PhpValue,Pchp.Core.PhpAlias)">
<summary>
Add general controls.
Extract general controls to element ref, return clean `$settings_control`.
</summary>
<param name="settings_controls" type="array"></param>
<returns>($settings_controls).</returns>
</member>
<member name="M:Elementor.Modules.Usage.Module.add_to_global(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Add to global.
Add's usage to global (update database).
</summary>
<param name="doc_name" type="string"></param>
<param name="doc_usage" type="array"></param>
</member>
<member name="M:Elementor.Modules.Usage.Module.remove_from_global(Pchp.Core.PhpValue)">
<summary>
Remove from global.
Remove's usage from global (update database).
</summary>
<param name="document" type="Document"></param>
</member>
<member name="M:Elementor.Modules.Usage.Module.get_elements_usage(Pchp.Core.PhpValue)">
<summary>
Get elements usage.
Get's the current elements usage by passed elements array parameter.
</summary>
<param name="elements" type="array"></param>
</member>
<member name="M:Elementor.Modules.Usage.Module.save_document_usage(Elementor.Core.Base.Document)">
<summary>
Save document usage.
Save requested document usage, and update global.
</summary>
<param name="document" type="Document"></param>
</member>
<member name="M:Elementor.Modules.Usage.Module.add_system_info_report">
<summary>
Add system info report.
</summary>
</member>
<member name="M:Elementor.Modules.Usage.Module.__construct">
<summary>
Usage module constructor.
Initializing Elementor usage module.
</summary>
</member>
<member name="M:Elementor.Modules.Usage.Usage_Reporter.get_remove_recalc_query_string_script">
<summary>
Removes the "elementor_usage_recalc" param from the query string to avoid recalc every refresh.
When using a redirect header in place of this approach it throws an error because some components have already output some content.
</summary>
</member>
<member name="M:Elementor.Modules.WpCli.Command.flush_css(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Flush the Elementor Page Builder CSS Cache.
[--network]
Flush CSS Cache for all the sites in the network.

## EXAMPLES

1. wp elementor flush-css
- This will flush the CSS files for elementor page builder.

2. wp elementor flush-css --network
- This will flush the CSS files for elementor page builder for all the sites in the network.
</summary>
</member>
<member name="M:Elementor.Modules.WpCli.Command.system_info">
<summary>
Print system info powered by Elementor
## EXAMPLES

1. wp elementor system-info
- This will print the System Info in JSON format
</summary>
</member>
<member name="M:Elementor.Modules.WpCli.Command.replace_urls(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Replace old URLs with new URLs in all Elementor pages.
[--force]
Suppress error messages. instead, return "0 affected rows.".

## EXAMPLES

1. wp elementor replace-urls &lt;old&gt; &lt;new&gt;
- This will replace all &lt;old&gt; URLs with the &lt;new&gt; URL.

2. wp elementor replace-urls &lt;old&gt; &lt;new&gt; --force
- This will replace all &lt;old&gt; URLs with the &lt;new&gt; URL without throw errors.
</summary>
</member>
<member name="M:Elementor.Modules.WpCli.Command.sync_library(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Sync Elementor Library.
## EXAMPLES

1. wp elementor sync-library
- This will sync the library with Elementor cloud library.
</summary>
</member>
<member name="M:Elementor.Modules.WpCli.Command.import_library(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Import template files to the Library.
## EXAMPLES

1. wp elementor import-library &lt;file-path&gt;
- This will import a file or a zip of multiple files to the library.
</summary>
</member>
<member name="M:Elementor.Modules.WpCli.Library.sync(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Sync Elementor Library.
[--network]
Sync library in all the sites in the network.

[--force]
Force sync even if it's looks like that the library is already up to date.

## EXAMPLES

1. wp elementor library sync
- This will sync the library with Elementor cloud library.

2. wp elementor library sync --force
- This will sync the library with Elementor cloud even if it's looks like that the library is already up to date.

3. wp elementor library sync --network
- This will sync the library with Elementor cloud library for each site in the network if needed.
</summary>
</member>
<member name="M:Elementor.Modules.WpCli.Library.import(Pchp.Core.PhpValue)">
<summary>
Import template files to the Library.
## EXAMPLES

1. wp elementor library import &lt;file-path&gt;
- This will import a file or a zip of multiple files to the library.
</summary>
</member>
<member name="M:Elementor.Modules.WpCli.Library.connect(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Connect site to Elementor Library.
(Network is not supported)

--user
The user to connect &lt;id|login|email&gt;

--token
A connect token from Elementor Account Dashboard.

## EXAMPLES

1. wp elementor library connect --user=admin --token=&lt;connect-cli-token&gt;
- This will connect the admin to Elementor library.
</summary>
</member>
<member name="M:Elementor.Modules.WpCli.Library.disconnect">
<summary>
Disconnect site from Elementor Library.
--user
The user to disconnect &lt;id|login|email&gt;

## EXAMPLES

1. wp elementor library disconnect --user=admin
- This will disconnect the admin from Elementor library.
</summary>
</member>
<member name="M:Elementor.Modules.WpCli.Library.get_library_app">
</member>
<member name="M:Elementor.Modules.WpCli.Module.get_name">
<summary>
Get module name.
</summary>
<returns>Module name.</returns>
</member>
<member name="M:Elementor.Modules.WpCli.Module.is_active(Pchp.Core.Context)">
</member>
<member name="M:Elementor.Modules.WpCli.Module.register_cli_logger(Pchp.Core.PhpValue)">
<param name="logger" type="Logger"></param>
</member>
<member name="M:Elementor.Modules.WpCli.Module.__construct">
</member>
<member name="M:Elementor.Modules.WpCli.Update.db(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Update the DB after plugin upgrade.
[--network]
Update DB in all the sites in the network.

[--force]
Force update even if it's looks like that update is in progress.


## EXAMPLES

1. wp elementor update db
- This will Upgrade the DB if needed.

2. wp elementor update db --force
- This will Upgrade the DB even if another process is running.

3. wp elementor update db --network
- This will Upgrade the DB for each site in the network if needed.
</summary>
</member>
<member name="M:manual_Customize.header_output(Pchp.Core.Context)">
<summary>
This will output the custom WordPress settings to the live theme's WP head.
</summary>
</member>
<member name="M:manual_Customize.live_preview(Pchp.Core.Context)">
<summary>
This outputs the javascript needed to automate the live settings preview.
</summary>
</member>
<member name="M:VcGridsCommon?.getBasicAtts(Pchp.Core.Context)">
<summary>
Basic Grid Common Settings
</summary>
</member>
<member name="M:VcGridsCommon?.getMediaCommonAtts(Pchp.Core.Context)">
<summary>
Media grid common settings
</summary>
</member>
<member name="M:VcGridsCommon?.arraySearch(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Function to search array
</summary>
</member>
<member name="M:Vc_Settings_Preset.getDefaultSettingsPresetId(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Get default preset id for specific shortcode
</summary>
<param name="shortcode_name" type="string"></param>
<returns>int|null</returns>
</member>
<member name="M:Vc_Settings_Preset.setAsDefaultSettingsPreset(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Set existing preset as default
If this is vendor preset, clone it and set new one as default
</summary>
<param name="id" type="int">If falsy, no default will be set</param>
<param name="shortcode_name" type="string"></param>
</member>
<member name="M:Vc_Settings_Preset.constructShortcodeMimeType(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Get mime type for specific shortcode
</summary>
</member>
<member name="M:Vc_Settings_Preset.extractShortcodeMimeType(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Get shortcode name from post's mime type
</summary>
<param name="post_mime_type" type="string"></param>
</member>
<member name="M:Vc_Settings_Preset.listAllPresets(Pchp.Core.Context)">
<summary>
Get all presets
</summary>
<returns>E.g. array(preset_id =&gt; value, preset_id =&gt; value, ...)</returns>
</member>
<member name="M:Vc_Settings_Preset.listDefaultSettingsPresets(Pchp.Core.Context)">
<summary>
Get all default presets
</summary>
<returns>E.g. array(shortcode_name =&gt; value, shortcode_name =&gt; value, ...)</returns>
</member>
<member name="M:Vc_Settings_Preset.listDefaultVendorSettingsPresets(Pchp.Core.Context)">
<summary>
Get all default vendor presets
</summary>
<returns>E.g. array(shortcode_name =&gt; value, shortcode_name =&gt; value, ...)</returns>
</member>
<member name="M:Vc_Settings_Preset.saveSettingsPreset(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Save shortcode preset
</summary>
<param name="shortcode_name" type="string"></param>
<param name="title" type="string"></param>
<param name="content" type="string"></param>
<param name="is_default" type="boolean"></param>
<returns>int|false Post ID</returns>
</member>
<member name="M:Vc_Settings_Preset.listSettingsPresets(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Get list of all presets for specific shortcode
</summary>
<param name="shortcode_name" type="string"></param>
<returns>E.g. array(id1 =&gt; title1, id2 =&gt; title2, ...)</returns>
</member>
<member name="M:Vc_Settings_Preset.listVendorSettingsPresets(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Get list of all vendor presets for specific shortcode
</summary>
<param name="shortcode_name" type="string"></param>
<returns>E.g. array(id1 =&gt; title1, id2 =&gt; title2, ...)</returns>
</member>
<member name="M:Vc_Settings_Preset.getSettingsPreset(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Get specific shortcode preset
</summary>
<param name="id" type="mixed">Can be int (user preset) or string (vendor preset)</param>
<param name="array" type="bool">If true, return array instead of string</param>
<returns>string?array Post content</returns>
</member>
<member name="M:Vc_Settings_Preset.deleteSettingsPreset(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Delete shortcode preset
</summary>
<param name="post_id" type="int">Post must be of type 'vc_settings_preset'</param>
</member>
<member name="M:Vc_Settings_Preset.getRenderedSettingsPresetPopup(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Return rendered popup menu
</summary>
<param name="shortcode_name" type="string"></param>
</member>
<member name="M:Vc_Settings_Preset.addVcPresetsToShortcodes(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Settings_Preset.addPresetCategory(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Vendor_Preset.getInstance(Pchp.Core.Context)">
</member>
<member name="M:Vc_Vendor_Preset.add(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Add vendor preset to collection
</summary>
<param name="title" type="string"></param>
<param name="shortcode" type="string"></param>
<param name="params" type="array"></param>
<param name="default" type="bool"></param>
</member>
<member name="M:Vc_Vendor_Preset.get(Pchp.Core.PhpValue)">
<summary>
Get specific vendor preset
</summary>
<param name="id" type="string"></param>
<returns>array|false</returns>
</member>
<member name="M:Vc_Vendor_Preset.getAll(Pchp.Core.PhpValue)">
<summary>
Get all vendor presets for specific shortcode
</summary>
<param name="shortcode" type="string"></param>
</member>
<member name="M:Vc_Vendor_Preset.getDefaults">
<summary>
Get all default vendor presets
Include only one default preset per shortcode
</summary>
</member>
<member name="M:Vc_Vendor_Preset.getDefaultId(Pchp.Core.PhpValue)">
<summary>
Get ID of default preset for specific shortcode
If multiple presets are default, return first
</summary>
<param name="shortcode" type="string"></param>
</member>
<member name="M:Vc_Hooks_Vc_Grid.load">
<summary>
Initializing hooks for grid element,
Add actions to save appended shortcodes to post meta (for rendering in preview with shortcode id)
And add action to hook request for grid data, to output it.
</summary>
</member>
<member name="M:Vc_Hooks_Vc_Grid.getShortcodeRegexForId">
</member>
<member name="M:Vc_Hooks_Vc_Grid.gridSavePostSettingsId(Pchp.Core.PhpArray,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<param name="settings" type="array"></param>
</member>
<member name="M:Vc_Hooks_Vc_Grid.getGridDataForAjax">
</member>
<member name="M:Vc_Setting_Post_Type_Default_Template_Field.__construct(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Vc_Setting_Post_Type_Default_Template_Field constructor.
</summary>
</member>
<member name="M:Vc_Setting_Post_Type_Default_Template_Field.getFieldName">
</member>
<member name="M:Vc_Setting_Post_Type_Default_Template_Field.getFieldKey">
</member>
<member name="M:Vc_Setting_Post_Type_Default_Template_Field.isValidPostType(Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Setting_Post_Type_Default_Template_Field.getPostTypes">
</member>
<member name="M:Vc_Setting_Post_Type_Default_Template_Field.getTemplates">
</member>
<member name="M:Vc_Setting_Post_Type_Default_Template_Field.getTemplatesEditor">
</member>
<member name="M:Vc_Setting_Post_Type_Default_Template_Field.get">
<summary>
Get settings data for default templates
</summary>
</member>
<member name="M:Vc_Setting_Post_Type_Default_Template_Field.getTemplate(Pchp.Core.PhpValue)">
<summary>
Get template's shortcodes string
</summary>
</member>
<member name="M:Vc_Setting_Post_Type_Default_Template_Field.getTemplateByPostType(Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Setting_Post_Type_Default_Template_Field.sanitize(Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Setting_Post_Type_Default_Template_Field.addField">
<summary>
Add field settings page
Method called by vc hook vc_settings_tab-general.
</summary>
</member>
<member name="M:VcShortcodeAutoloader.getInstance(Pchp.Core.Context,Pchp.Core.PhpValue)">
<param name="load_config" type="bool"></param>
</member>
<member name="M:VcShortcodeAutoloader.__construct(Pchp.Core.PhpValue)">
<summary>
VcShortcodeAutoloader constructor.
</summary>
<param name="load_config" type="bool"></param>
</member>
<member name="M:VcShortcodeAutoloader.includeClass(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Include class dependencies
</summary>
<param name="class" type="string">Class name</param>
<returns>Included (if any) files</returns>
</member>
<member name="M:VcShortcodeAutoloader.extractClassNames(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Find all classes defined in file
</summary>
<param name="file" type="string">Full path to file</param>
</member>
<member name="M:VcShortcodeAutoloader.extractClassesAndExtends(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Extract all classes from file with their extends
</summary>
<returns>Associative array where key is class name and value is parent class name (if any))</returns>
</member>
<member name="M:VcShortcodeAutoloader.findClassFile(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Find file by class name
Search is case-insensitive
</summary>
<param name="class" type="string"></param>
<param name="dirs" type="string[]|string">One or more directories where to look (recursive)</param>
<returns>Full path to class file</returns>
</member>
<member name="M:VcShortcodeAutoloader.generateClassMap(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Construct full dependency list of classes for each class in right order (including class itself)
</summary>
<param name="dirs" type="string[]|string">Directories where to look (recursive)</param>
<returns>Associative array where key is lowercase class name and value is array of files to include for
that class to work</returns>
</member>
<member name="M:VcShortcodeAutoloader.saveClassMap(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Regenerate and save class map file
</summary>
<param name="dirs" type="string[]|string">Directories where to look (recursive)</param>
<param name="target" type="string">Output file</param>
</member>
<member name="M:Vc_Access.getValidAccess">
</member>
<member name="M:Vc_Access.setValidAccess(Pchp.Core.PhpValue)">
<param name="validAccess" type="mixed"></param>
<returns>$this</returns>
</member>
<member name="M:Vc_Access.checkMulti(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Check multi access settings by method inside class object.
</summary>
<returns>$this</returns>
</member>
<member name="M:Vc_Access.get">
<summary>
Get current validation state and reset it to true. ( should be never called twice )
</summary>
</member>
<member name="M:Vc_Access.validateDie(Pchp.Core.PhpValue)">
<summary>
Call die() function with message if access is invalid.
</summary>
<param name="message" type="string"></param>
<returns>$this</returns>
</member>
<member name="M:Vc_Access.check(Pchp.Core.PhpValue,Pchp.Core.PhpValue[])">
<returns>$this</returns>
</member>
<member name="M:Vc_Access.checkAny(Pchp.Core.PhpValue[])">
<summary>
Any of provided rules should be valid.
Usage: checkAny(
'vc_verify_admin_nonce',
array( 'current_user_can', 'edit_post', 12 ),
array( 'current_user_can', 'edit_posts' ),
)
</summary>
<returns>$this</returns>
</member>
<member name="M:Vc_Access.checkAll(Pchp.Core.PhpValue[])">
<summary>
All provided rules should be valid.
Usage: checkAll(
'vc_verify_admin_nonce',
array( 'current_user_can', 'edit_post', 12 ),
array( 'current_user_can', 'edit_posts' ),
)
</summary>
<returns>$this</returns>
</member>
<member name="M:Vc_Access.checkAdminNonce(Pchp.Core.PhpValue)">
<param name="nonce" type="string"></param>
</member>
<member name="M:Vc_Access.checkPublicNonce(Pchp.Core.PhpValue)">
<param name="nonce" type="string"></param>
</member>
<member name="M:Vc_Current_User_Access_Controller.getCapRule(Pchp.Core.PhpValue)">
<summary>
Get capability for current user
</summary>
</member>
<member name="M:Vc_Current_User_Access_Controller.setCapRule(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Add capability to role.
</summary>
<param name="value" type="bool"></param>
</member>
<member name="M:Vc_Current_User_Access_Controller.getRole">
</member>
<member name="M:Vc_Current_User_Access.part(Pchp.Core.PhpValue)">
<returns>Vc_Current_User_Access_Controller;</returns>
</member>
<member name="M:Vc_Current_User_Access.wpMulti(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<returns>$this</returns>
</member>
<member name="M:Vc_Current_User_Access.wpAny(Pchp.Core.PhpValue[])">
<summary>
Check WordPress capability. Should be valid one cap at least.
</summary>
</member>
<member name="M:Vc_Current_User_Access.wpAll(Pchp.Core.PhpValue[])">
<summary>
Check WordPress capability. Should be valid all caps.
</summary>
</member>
<member name="M:Vc_Role_Access_Controller.__construct(Pchp.Core.PhpValue)">
<summary>
Vc_Role_Access_Controller constructor.
</summary>
</member>
<member name="M:Vc_Role_Access_Controller.setRoleName(Pchp.Core.PhpValue)">
<summary>
Set role name.
</summary>
</member>
<member name="M:Vc_Role_Access_Controller.getPart">
<summary>
Get part for role.
</summary>
</member>
<member name="M:Vc_Role_Access_Controller.getState">
<summary>
Get state of the Vc access rules part.
</summary>
<returns>mixed;</returns>
</member>
<member name="M:Vc_Role_Access_Controller.setState(Pchp.Core.PhpValue)">
<summary>
Set state for full part.
State can have 3 values:
true - all allowed under this part;
false - all disabled under this part;
string|'custom' - custom settings. It means that need to check exact capability.
</summary>
<param name="value" type="bool"></param>
<returns>$this</returns>
</member>
<member name="M:Vc_Role_Access_Controller.can(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Can user do what he doo.
Any rule has three types of state: true, false, string.
</summary>
<param name="rule" type="string"></param>
<param name="check_state" type="bool|true"></param>
<returns>$this</returns>
</member>
<member name="M:Vc_Role_Access_Controller.canAny(Pchp.Core.PhpValue[])">
<summary>
Can user do what he doo.
Any rule has three types of state: true,false, string.
</summary>
</member>
<member name="M:Vc_Role_Access_Controller.canAll(Pchp.Core.PhpValue[])">
<summary>
Can user do what he doo.
Any rule has three types of state: true,false, string.
</summary>
</member>
<member name="M:Vc_Role_Access_Controller.getCapRule(Pchp.Core.PhpValue)">
<summary>
Get capability for role
</summary>
</member>
<member name="M:Vc_Role_Access_Controller.setCapRule(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Add capability to role.
</summary>
<param name="value" type="bool"></param>
</member>
<member name="M:Vc_Role_Access_Controller.getAllCaps">
<summary>
Get all capability for this part.
</summary>
</member>
<member name="M:Vc_Role_Access_Controller.getRole">
</member>
<member name="M:Vc_Role_Access_Controller.getRoleName">
</member>
<member name="M:Vc_Role_Access_Controller.getStateKey">
</member>
<member name="M:Vc_Role_Access_Controller.checkState(Pchp.Core.PhpValue)">
<returns>$this</returns>
</member>
<member name="M:Vc_Role_Access_Controller.checkStateAny(Pchp.Core.PhpValue[])">
<returns>$this</returns>
</member>
<member name="M:Vc_Role_Access_Controller.__toString">
<summary>
Return access value.
</summary>
</member>
<member name="M:Vc_Role_Access_Controller.updateMergedCaps(Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Role_Access_Controller.getMergedCaps">
</member>
<member name="M:Vc_Role_Access.__construct">
</member>
<member name="M:Vc_Role_Access.part(Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Role_Access.who(Pchp.Core.PhpValue)">
<summary>
Set role to get access to data.
</summary>
<returns>$this</returns>
</member>
<member name="M:Vc_Role_Access.getRoleName">
</member>
<member name="M:Vc_Base.init">
<summary>
Load default object like shortcode parsing.
</summary>
</member>
<member name="M:Vc_Base.postAdmin">
<summary>
Post object for interacting with Current post data.
</summary>
</member>
<member name="M:Vc_Base.initPage">
<summary>
Build VC for frontend pages.
</summary>
</member>
<member name="M:Vc_Base.initAdmin">
<summary>
Load admin required modules and elements
</summary>
</member>
<member name="M:Vc_Base.setEditForm(Vc_Shortcode_Edit_Form)">
<summary>
Setter for edit form.
</summary>
<param name="form" type="Vc_Shortcode_Edit_Form"></param>
</member>
<member name="M:Vc_Base.editForm">
<summary>
Get Shortcodes Edit form object.
</summary>
</member>
<member name="M:Vc_Base.setTemplatesPanelEditor(Vc_Templates_Panel_Editor)">
<summary>
Setter for Templates editor.
</summary>
<param name="editor" type="Vc_Templates_Panel_Editor"></param>
</member>
<member name="M:Vc_Base.setPresetPanelEditor(Vc_Preset_Panel_Editor)">
<summary>
Setter for Preset editor.
</summary>
<param name="editor" type="Vc_Preset_Panel_Editor"></param>
</member>
<member name="M:Vc_Base.templatesPanelEditor">
<summary>
Get templates manager.
</summary>
</member>
<member name="M:Vc_Base.presetPanelEditor">
<summary>
Get preset manager.
</summary>
</member>
<member name="M:Vc_Base.getShortCode(Pchp.Core.PhpValue)">
<summary>
Get shortcode class instance.
</summary>
<param name="tag" type="string"></param>
</member>
<member name="M:Vc_Base.removeShortCode(Pchp.Core.PhpValue)">
<summary>
Remove shortcode from shortcodes list of VC.
</summary>
<param name="tag">- shortcode tag</param>
</member>
<member name="M:Vc_Base.updateShortcodeSetting(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Set or modify new settings for shortcode.
This function widely used by WPBMap class methods to modify shortcodes mapping
</summary>
</member>
<member name="M:Vc_Base.buildShortcodesCustomCss(Pchp.Core.PhpValue)">
<summary>
Build custom css styles for page from shortcodes attributes created by VC editors.
Called by save method, which is hooked by edit_post action.
Function creates meta data for post with the key '_wpb_shortcodes_custom_css'
and value as css string, which will be added to the footer of the page.
</summary>
</member>
<member name="M:Vc_Base.parseShortcodesCustomCss(Pchp.Core.PhpValue)">
<summary>
Parse shortcodes custom css string.
This function is used by self::buildShortcodesCustomCss and creates css string from shortcodes attributes
like 'css_editor'.
</summary>
</member>
<member name="M:Vc_Base.addPageCustomCss(Pchp.Core.PhpValue)">
<summary>
Hooked class method by wp_head WP action to output post custom css.
Method gets post meta value for page by key '_wpb_post_custom_css' and if it is not empty
outputs css string wrapped into style tag.
</summary>
<param name="id" type="int"></param>
</member>
<member name="M:Vc_Base.addShortcodesCustomCss(Pchp.Core.PhpValue)">
<summary>
Hooked class method by wp_footer WP action to output shortcodes css editor settings from page meta data.
Method gets post meta value for page by key '_wpb_shortcodes_custom_css' and if it is not empty
outputs css string wrapped into style tag.
</summary>
<param name="id" type="int"></param>
</member>
<member name="M:Vc_Base.addFrontCss">
<summary>
Add css styles for current page and elements design options added w\ editor.
</summary>
</member>
<member name="M:Vc_Base.frontCss">
<summary>
Register front css styles.
Calls wp_register_style for required css libraries files.
</summary>
</member>
<member name="M:Vc_Base.enqueueStyle">
<summary>
Enqueue base css class for VC elements and enqueue custom css if exists.
</summary>
</member>
<member name="M:Vc_Base.frontJsRegister">
<summary>
Register front javascript libs.
Calls wp_register_script for required css libraries files.
</summary>
</member>
<member name="M:Vc_Base.registerAdminJavascript">
<summary>
Register admin javascript libs.
Calls wp_register_script for required css libraries files for Admin dashboard.
</summary>
</member>
<member name="M:Vc_Base.registerAdminCss">
<summary>
Register admin css styles.
Calls wp_register_style for required css libraries files for admin dashboard.
</summary>
</member>
<member name="M:Vc_Base.pluginActionLinks(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Add Settings link in plugin's page
</summary>
</member>
<member name="M:Vc_Base.getSettingsPageLink">
<summary>
Get settings page link
</summary>
<returns>url to settings page</returns>
</member>
<member name="M:Vc_Base.addMetaData">
<summary>
Hooked class method by wp_head WP action.
</summary>
</member>
<member name="M:Vc_Base.bodyClass(Pchp.Core.PhpValue)">
<summary>
Method adds css class to body tag.
Hooked class method by body_class WP filter. Method adds custom css class to body tag of the page to help
identify and build design specially for VC shortcodes.
</summary>
</member>
<member name="M:Vc_Base.excerptFilter(Pchp.Core.PhpValue)">
<summary>
Builds excerpt for post from content.
Hooked class method by the_excerpt WP filter. When user creates content with VC all content is always wrapped by
shortcodes. This methods calls do_shortcode for post's content and then creates a new excerpt.
</summary>
</member>
<member name="M:Vc_Base.fixPContent(Pchp.Core.PhpValue)">
<summary>
Remove unwanted wraping with p for content.
Hooked by 'the_content' filter.
</summary>
<param name="content" type="null"></param>
</member>
<member name="M:Vc_Base.getEditorsLocale">
<summary>
Get array of string for locale.
</summary>
</member>
<member name="M:Vc_Manager.__construct">
<summary>
Constructor loads API functions, defines paths and adds required wp actions
</summary>
</member>
<member name="M:Vc_Manager.getInstance(Pchp.Core.Context)">
<summary>
Get the instane of VC_Manager
</summary>
</member>
<member name="M:Vc_Manager.pluginsLoaded">
<summary>
Callback function WP plugin_loaded action hook. Loads locale
</summary>
</member>
<member name="M:Vc_Manager.init">
<summary>
Callback function for WP init action hook. Sets Vc mode and loads required objects.
</summary>
</member>
<member name="M:Vc_Manager.getCurrentUserAccess">
</member>
<member name="M:Vc_Manager.setCurrentUserAccess(Pchp.Core.PhpValue)">
<param name="current_user_access" type="false|Vc_Current_User_Access"></param>
</member>
<member name="M:Vc_Manager.getRoleAccess">
</member>
<member name="M:Vc_Manager.setRoleAccess(Pchp.Core.PhpValue)">
<param name="role_access" type="false|Vc_Role_Access"></param>
</member>
<member name="M:Vc_Manager.activationHook(Pchp.Core.PhpValue)">
<summary>
Enables to add hooks in activation process.
</summary>
</member>
<member name="M:Vc_Manager.loadComponents">
<summary>
Load required components to enable useful functionality.
</summary>
</member>
<member name="M:Vc_Manager.asAdmin">
<summary>
Load required logic for operating in Wp Admin dashboard.
</summary>
</member>
<member name="M:Vc_Manager.setMode">
<summary>
Set VC mode.
Mode depends on which page is requested by client from server and request parameters like vc_action.
</summary>
</member>
<member name="M:Vc_Manager.setVersion">
<summary>
Sets version of the VC in DB as option `vc_version`
</summary>
</member>
<member name="M:Vc_Manager.mode">
<summary>
Get current mode for VC.
</summary>
</member>
<member name="M:Vc_Manager.setPaths(Pchp.Core.PhpValue)">
<summary>
Setter for paths
</summary>
</member>
<member name="M:Vc_Manager.path(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Gets absolute path for file/directory in filesystem.
</summary>
<param name="name">- name of path dir</param>
<param name="file" type="string">- file name or directory inside path</param>
</member>
<member name="M:Vc_Manager.setEditorDefaultPostTypes(Pchp.Core.PhpArray)">
<summary>
Set default post types. Vc editors are enabled for such kind of posts.
</summary>
<param name="type" type="array">- list of default post types.</param>
</member>
<member name="M:Vc_Manager.editorDefaultPostTypes">
<summary>
Returns list of default post types where user can use WPBakery Page Builder editors.
</summary>
</member>
<member name="M:Vc_Manager.editorPostTypes">
<summary>
Get post types where VC editors are enabled.
</summary>
</member>
<member name="M:Vc_Manager.setEditorPostTypes(Pchp.Core.PhpArray)">
<summary>
Set post types where VC editors are enabled.
</summary>
<param name="post_types" type="array"></param>
</member>
<member name="M:Vc_Manager.setIsAsTheme(Pchp.Core.PhpValue)">
<summary>
Setter for as-theme-plugin status for VC.
</summary>
<param name="value" type="bool"></param>
</member>
<member name="M:Vc_Manager.isAsTheme">
<summary>
Get as-theme-plugin status
As theme plugin status used by theme developers. It disables settings
</summary>
</member>
<member name="M:Vc_Manager.setAsNetworkPlugin(Pchp.Core.PhpValue)">
<summary>
Setter for as network plugin for MultiWP.
</summary>
<param name="value" type="bool"></param>
</member>
<member name="M:Vc_Manager.isNetworkPlugin">
<summary>
Gets VC is activated as network plugin.
</summary>
</member>
<member name="M:Vc_Manager.disableUpdater(Pchp.Core.PhpValue)">
<summary>
Setter for disable updater variable.
</summary>
<param name="value" type="bool"></param>
</member>
<member name="M:Vc_Manager.isUpdaterDisabled">
<summary>
Get is vc updater is disabled;
</summary>
</member>
<member name="M:Vc_Manager.setCustomUserShortcodesTemplateDir(Pchp.Core.PhpValue)">
<summary>
Set user directory name.
Directory name is the directory name vc should scan for custom shortcodes template.
</summary>
<param name="dir">- path to shortcodes templates inside developers theme</param>
</member>
<member name="M:Vc_Manager.getDefaultShortcodesTemplatesDir">
<summary>
Get default directory where shortcodes templates area placed.
</summary>
<returns>- path to default shortcodes</returns>
</member>
<member name="M:Vc_Manager.getShortcodesTemplateDir(Pchp.Core.PhpValue)">
<summary>
Get shortcodes template dir.
</summary>
</member>
<member name="M:Vc_Manager.uploadDir">
<summary>
Directory name where template files will be stored.
</summary>
</member>
<member name="M:Vc_Manager.mapper">
<summary>
Getter for VC_Mapper instance
</summary>
</member>
<member name="M:Vc_Manager.vc">
<summary>
WPBakery Page Builder.
</summary>
</member>
<member name="M:Vc_Manager.settings">
<summary>
Vc options.
</summary>
</member>
<member name="M:Vc_Manager.license">
<summary>
Vc license settings.
</summary>
</member>
<member name="M:Vc_Manager.frontendEditor">
<summary>
Get frontend VC editor.
</summary>
</member>
<member name="M:Vc_Manager.backendEditor">
<summary>
Get backend VC editor. Edit page version.
</summary>
</member>
<member name="M:Vc_Manager.automapper">
<summary>
Gets automapper instance.
</summary>
</member>
<member name="M:Vc_Manager.updater">
<summary>
Gets updater instance.
</summary>
</member>
<member name="M:Vc_Manager.pluginName">
<summary>
Getter for plugin name variable.
</summary>
</member>
<member name="M:Vc_Manager.setPluginName(Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Manager.assetUrl(Pchp.Core.PhpValue)">
<summary>
Get absolute url for VC asset file.
Assets are css, javascript, less files and images.
</summary>
</member>
<member name="M:Vc_Mapper.__construct">
</member>
<member name="M:Vc_Mapper.init">
<summary>
Include params list objects and calls all stored activity methods.
</summary>
</member>
<member name="M:Vc_Mapper.addActivity(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
This method is called by VC objects methods if it is called before VC initialization.
</summary>
<param name="object">- mame of class object</param>
<param name="method">- method name</param>
<param name="params" type="array">- list of attributes for object method</param>
</member>
<member name="M:Vc_Mapper.addElementActivity(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
This method is called by VC objects methods if it is called before VC initialization.
</summary>
<param name="tag">- shortcode tag of element</param>
<param name="method">- method name</param>
<param name="params" type="array">- list of attributes for object method</param>
</member>
<member name="M:Vc_Mapper.callActivities">
<summary>
Call all stored activities.
Called by init method. List of activities stored by $init_activity are created by other objects called after
initialization.
</summary>
</member>
<member name="M:Vc_Mapper.userHasAccess(Pchp.Core.PhpValue)">
<summary>
Does user has access to modify/clone/delete/add shortcode
</summary>
</member>
<member name="M:Vc_Mapper.isCheckForAccess">
</member>
<member name="M:Vc_Mapper.setCheckForAccess(Pchp.Core.PhpValue)">
<param name="checkForAccess" type="bool"></param>
</member>
<member name="M:Vc_Mapper.callElementActivities(Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Page.getSlug">
</member>
<member name="M:Vc_Page.setSlug(Pchp.Core.PhpValue)">
<param name="slug" type="mixed"></param>
<returns>$this;</returns>
</member>
<member name="M:Vc_Page.getTitle">
</member>
<member name="M:Vc_Page.setTitle(Pchp.Core.PhpValue)">
<param name="title" type="string"></param>
<returns>$this</returns>
</member>
<member name="M:Vc_Page.getTemplatePath">
</member>
<member name="M:Vc_Page.setTemplatePath(Pchp.Core.PhpValue)">
<param name="templatePath" type="mixed"></param>
<returns>$this</returns>
</member>
<member name="M:Vc_Pages_Group.getActivePage">
</member>
<member name="M:Vc_Pages_Group.setActivePage(Vc_Page)">
<param name="activePage" type="Vc_Page"></param>
<returns>$this</returns>
</member>
<member name="M:Vc_Pages_Group.getPages">
</member>
<member name="M:Vc_Pages_Group.setPages(Pchp.Core.PhpValue)">
<param name="pages" type="mixed"></param>
<returns>$this</returns>
</member>
<member name="M:Vc_Pages_Group.getTemplatePath">
</member>
<member name="M:Vc_Pages_Group.setTemplatePath(Pchp.Core.PhpValue)">
<param name="templatePath" type="mixed"></param>
<returns>$this</returns>
</member>
<member name="M:Vc_Pages_Group.render">
<summary>
Render html output for current page.
</summary>
</member>
<member name="M:Vc_Post_Admin.init">
<summary>
Add hooks required to save, update and manipulate post
</summary>
</member>
<member name="M:Vc_Post_Admin.saveAjaxFe">
</member>
<member name="M:Vc_Post_Admin.save(Pchp.Core.PhpValue)">
<summary>
Save generated shortcodes, html and WPBakery Page Builder status in posts meta.
</summary>
<param name="post_id">- current post id</param>
</member>
<member name="M:Vc_Post_Admin.setJsStatus(Pchp.Core.PhpValue)">
<summary>
Saves VC Backend editor meta box visibility status.
If post param 'wpb_vc_js_status' set to true, then methods adds/updated post
meta option with tag '_wpb_vc_js_status'.
</summary>
</member>
<member name="M:Vc_Post_Admin.setInterfaceVersion(Pchp.Core.PhpValue)">
<summary>
Saves VC interface version which is used for building post content.
</summary>
</member>
<member name="M:Vc_Post_Admin.setSettings(Pchp.Core.PhpValue)">
<summary>
Set Post Settings for VC.
It is possible to add any data to post settings by adding filter with tag 'vc_hooks_vc_post_settings'.
</summary>
</member>
<member name="M:Vc_Post_Admin.setPostMeta(Pchp.Core.PhpValue)">
</member>
<member name="M:VcSharedLibrary.getColors(Pchp.Core.Context)">
</member>
<member name="M:VcSharedLibrary.getIcons(Pchp.Core.Context)">
</member>
<member name="M:VcSharedLibrary.getSizes(Pchp.Core.Context)">
</member>
<member name="M:VcSharedLibrary.getButtonStyles(Pchp.Core.Context)">
</member>
<member name="M:VcSharedLibrary.getMessageBoxStyles(Pchp.Core.Context)">
</member>
<member name="M:VcSharedLibrary.getToggleStyles(Pchp.Core.Context)">
</member>
<member name="M:VcSharedLibrary.getAnimationStyles(Pchp.Core.Context)">
</member>
<member name="M:VcSharedLibrary.getCtaStyles(Pchp.Core.Context)">
</member>
<member name="M:VcSharedLibrary.getTextAlign(Pchp.Core.Context)">
</member>
<member name="M:VcSharedLibrary.getBorderWidths(Pchp.Core.Context)">
</member>
<member name="M:VcSharedLibrary.getElementWidths(Pchp.Core.Context)">
</member>
<member name="M:VcSharedLibrary.getSeparatorStyles(Pchp.Core.Context)">
</member>
<member name="M:VcSharedLibrary.getBoxStyles(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Get list of box styles
Possible $groups values:
- default
- round
- circle
</summary>
<param name="groups" type="array">Array of groups to include. If not specified, return all</param>
</member>
<member name="M:VcSharedLibrary.getColorsDashed(Pchp.Core.Context)">
</member>
<member name="M:Vc_Sort.__construct(Pchp.Core.PhpValue)">
<param name="data">- array to sort</param>
</member>
<member name="M:Vc_Sort.setData(Pchp.Core.PhpValue)">
<summary>
Used to change/set data to sort
</summary>
</member>
<member name="M:Vc_Sort.sortByKey(Pchp.Core.PhpValue)">
<summary>
Sort $this-&gt;data by user key, used in class-vc-mapper.
If keys are equals it SAVES a position in array (index).
</summary>
<param name="key" type="string"></param>
<returns>- sorted array</returns>
</member>
<member name="M:Vc_Sort.key(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Sorting by key callable for usort function
</summary>
<param name="a">- compare value</param>
<param name="b">- compare value</param>
</member>
<member name="M:Vc_Sort.getData">
<returns>- sorting data</returns>
</member>
<member name="M:WPBMap.setInit(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Set init status fro WPMap.
if $is_init is FALSE, then all activity like add, update and delete for shortcodes attributes will be hold in
the list of activity and will be executed after initialization.
</summary>
<param name="value" type="bool"></param>
</member>
<member name="M:WPBMap.getSettings(Pchp.Core.Context)">
<summary>
Gets user role and access rules for current user.
</summary>
</member>
<member name="M:WPBMap.exists(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Check is shortcode with a tag mapped to VC.
</summary>
<param name="tag">- shortcode tag.</param>
</member>
<member name="M:WPBMap.map(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Map shortcode to VC.
This method maps shortcode to VC.
You need to shortcode's tag and settings to map correctly.
Default shortcodes are mapped in config/map.php file.
The best way is to call this method with "init" action callback function of WP.

vc_filter: vc_mapper_tag - to change shortcode tag, arguments 2 ( $tag, $attributes )
vc_filter: vc_mapper_attributes - to change shortcode attributes (like params array), arguments 2 ( $attributes,
$tag ) vc_filter: vc_mapper_attribute - to change singe shortcode param data, arguments 2 ( $attribute, $tag )
vc_filter: vc_mapper_attribute_{PARAM_TYPE} - to change singe shortcode param data by param type, arguments 2 (
$attribute, $tag )
</summary>
</member>
<member name="M:WPBMap.leanMap(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Lazy method to map shortcode to VC.
This method maps shortcode to VC.
You can shortcode settings as you do in self::map method. Bu also you
can pass function name or file, which will be used to add settings for
element. But this will be done only when element data is really required.
</summary>
</member>
<member name="M:WPBMap.generateUserData(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Generates list of shortcodes taking into account the access rules for shortcodes from VC Settings page.
This method parses the list of mapped shortcodes and creates categories list for users.
</summary>
<param name="force" type="bool">- force data generation even data already generated.</param>
</member>
<member name="M:WPBMap.generateData(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Generates list of shortcodes.
This method parses the list of mapped shortcodes and creates categories list.
</summary>
<param name="force" type="bool">- force data generation even data already generated.</param>
</member>
<member name="M:WPBMap.getShortCodes(Pchp.Core.Context)">
<summary>
Get mapped shortcode settings.
</summary>
</member>
<member name="M:WPBMap.getAllShortCodes(Pchp.Core.Context)">
<summary>
Get mapped shortcode settings.
</summary>
</member>
<member name="M:WPBMap.getSortedAllShortCodes(Pchp.Core.Context)">
<summary>
Get mapped shortcode settings.
</summary>
</member>
<member name="M:WPBMap.getSortedUserShortCodes(Pchp.Core.Context)">
<summary>
Get sorted list of mapped shortcode settings for current user.
Sorting depends on the weight attribute and mapping order.
</summary>
</member>
<member name="M:WPBMap.getUserShortCodes(Pchp.Core.Context)">
<summary>
Get list of mapped shortcode settings for current user.
</summary>
<returns>- associated array of shortcodes settings with tag as the key.</returns>
</member>
<member name="M:WPBMap.getShortCode(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Get mapped shortcode settings by tag.
</summary>
<param name="tag">- shortcode tag.</param>
<returns>null @since 4.4.3</returns>
</member>
<member name="M:WPBMap.getUserShortCode(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Get mapped shortcode settings by tag.
</summary>
<param name="tag">- shortcode tag.</param>
</member>
<member name="M:WPBMap.getCategories(Pchp.Core.Context)">
<summary>
Get all categories for mapped shortcodes.
</summary>
</member>
<member name="M:WPBMap.getUserCategories(Pchp.Core.Context)">
<summary>
Get all categories for current user.
Category is added to the list when at least one shortcode of this category is allowed for current user
by Vc access rules.
</summary>
</member>
<member name="M:WPBMap.dropParam(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Drop shortcode param.
</summary>
</member>
<member name="M:WPBMap.getParam(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Returns param settings for mapped shortcodes.
</summary>
<returns>array</returns>
</member>
<member name="M:WPBMap.addParam(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Add new param to shortcode params list.
</summary>
<param name="attribute" type="array"></param>
<returns>- true if added, false if scheduled/rejected</returns>
</member>
<member name="M:WPBMap.mutateParam(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Change param attributes of mapped shortcode.
</summary>
<param name="attribute" type="array"></param>
</member>
<member name="M:WPBMap.dropShortcode(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Removes shortcode from mapping list.
</summary>
</member>
<member name="M:WPBMap.dropAllShortcodes(Pchp.Core.Context)">
</member>
<member name="M:WPBMap.modify(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Modify shortcode's mapped settings.
You can modify only one option of the group options.
Call this method with $settings_name param as associated array to mass modifications.
</summary>
<param name="name">- shortcode' name.</param>
<param name="setting_name">- option key name or the array of options.</param>
<param name="value" type="string">- value of settings if $setting_name is option key.</param>
</member>
<member name="M:WPBMap.getTagsRegexp(Pchp.Core.Context)">
<summary>
Returns "|" separated list of mapped shortcode tags.
</summary>
</member>
<member name="M:WPBMap.sort(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Sorting method for WPBMap::generateUserData method. Called by uasort php function.
</summary>
</member>
<member name="M:WPBMap.collectCategories(Pchp.Core.Context,Pchp.Core.PhpAlias)">
</member>
<member name="M:WPBMap.setElementSettings(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Process files/functions for lean mapping settings
</summary>
</member>
<member name="M:WPBMap.addAllMappedShortcodes(Pchp.Core.Context)">
<summary>
Add elements as shortcodes
</summary>
</member>
<member name="M:WPBMap.setScope(Pchp.Core.Context,Pchp.Core.PhpValue)">
<param name="scope" type="string"></param>
</member>
<member name="M:WPBMap.getScope(Pchp.Core.Context)">
</member>
<member name="M:Vc_Shared_Templates.init">
</member>
<member name="M:Vc_Shared_Templates.renderBackendTemplate(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Shared_Templates.renderFrontendTemplate(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Shared_Templates.delete(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Shared_Templates.registerPostType">
<summary>
Post type from templates registration in WordPress
</summary>
</member>
<member name="M:Vc_Shared_Templates.ajaxDownloadTemplate">
<summary>
Ajax request processing from templates panel
</summary>
</member>
<member name="M:Vc_Shared_Templates.downloadTemplate(Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Shared_Templates.parseRequest(Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Shared_Templates.addTemplatesTab(Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Shared_Templates.renderTemplateBlock(Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Shared_Templates.getTemplateBlockTemplate">
</member>
<member name="M:Vc_Shared_Templates.getTemplates">
</member>
<member name="M:Vc_Shared_Templates.getTemplateDownloadLink(Pchp.Core.PhpValue)">
<summary>
Create url for request to download
It requires a license key, product and version
</summary>
</member>
<member name="M:Vc_WP_Import?.import(Pchp.Core.PhpValue)">
<summary>
The main controller for the actual import stage.
</summary>
<param name="file" type="string">Path to the WXR file for importing</param>
</member>
<member name="M:Vc_WP_Import?.import_start(Pchp.Core.PhpValue)">
<summary>
Parses the WXR file and prepares us for the task of processing parsed data
</summary>
<param name="file" type="string">Path to the WXR file for importing</param>
</member>
<member name="M:Vc_WP_Import?.import_end">
<summary>
Performs post-import cleanup of files and the cache
</summary>
</member>
<member name="M:Vc_WP_Import?.handle_upload">
<summary>
Handles the WXR upload and initial parsing of the file to prepare for
displaying author import options
</summary>
<returns>False if error uploading or invalid file, true otherwise</returns>
</member>
<member name="M:Vc_WP_Import?.process_posts">
<summary>
Create new posts based on import information
Posts marked as having a parent which doesn't exist will become top level items.
Doesn't create a new post if: the post type doesn't exist, the given post ID
is already noted as imported or a post with the same title and date already exists.
Note that new/updated terms, comments and meta are imported for the last of the above.
</summary>
</member>
<member name="M:Vc_WP_Import?.process_attachment(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
If fetching attachments is enabled then attempt to create a new attachment
</summary>
<param name="post" type="array">Attachment post details from WXR</param>
<param name="url" type="string">URL to fetch attachment from</param>
<returns>Post ID on success, WP_Error otherwise</returns>
</member>
<member name="M:Vc_WP_Import?.wp_get_http(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<param name="file_path" type="bool"></param>
</member>
<member name="M:Vc_WP_Import?.fetch_remote_file(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Attempt to download a remote file attachment
</summary>
<param name="url" type="string">URL of item to fetch</param>
<param name="post" type="array">Attachment details</param>
<returns>Local file location details on success, WP_Error otherwise</returns>
</member>
<member name="M:Vc_WP_Import?.backfill_parents">
<summary>
Attempt to associate posts and menu items with previously missing parents
An imported post's parent may not have been imported when it was first created
so try again. Similarly for child menu items and menu items which were missing
the object (e.g. post) they represent in the menu
</summary>
</member>
<member name="M:Vc_WP_Import?.backfill_attachment_urls">
<summary>
Use stored mapping information to update old attachment URLs
</summary>
</member>
<member name="M:Vc_WP_Import?.remap_featured_images">
<summary>
Update _thumbnail_id meta to new, imported attachment IDs
</summary>
</member>
<member name="M:Vc_WP_Import?.parse(Pchp.Core.PhpValue)">
<summary>
Parse a WXR file
</summary>
<param name="file" type="string">Path to WXR file for parsing</param>
<returns>Information gathered from the WXR file</returns>
</member>
<member name="M:Vc_WP_Import?.is_valid_meta_key(Pchp.Core.PhpValue)">
<summary>
Decide if the given meta key maps to information we will want to import
</summary>
<param name="key" type="string">The meta key to check</param>
<returns>The key if we do want to import, false if not</returns>
</member>
<member name="M:Vc_WP_Import?.allow_create_users">
<summary>
Decide whether or not the importer is allowed to create users.
Default is true, can be filtered via import_allow_create_users
</summary>
<returns>True if creating users is allowed</returns>
</member>
<member name="M:Vc_WP_Import?.allow_fetch_attachments">
<summary>
Decide whether or not the importer should attempt to download attachment files.
Default is true, can be filtered via import_allow_fetch_attachments. The choice
made at the import options screen must also be true, false here hides that checkbox.
</summary>
<returns>True if downloading attachments is allowed</returns>
</member>
<member name="M:Vc_WP_Import?.max_attachment_size">
<summary>
Decide what the maximum file size for downloaded attachments is.
Default is 0 (unlimited), can be filtered via import_attachment_size_limit
</summary>
<returns>Maximum attachment file size to import</returns>
</member>
<member name="M:Vc_WP_Import?.cmpr_strlen(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
return the difference in length between two strings
</summary>
<param name="a" type="string"></param>
<param name="b" type="string"></param>
</member>
<member name="M:Vc_WXR_Parser_Plugin.processPostContent(Pchp.Core.PhpValue)">
<param name="postdata" type="array"></param>
</member>
<member name="M:Vc_WXR_Parser_Plugin.remapIdsInPosts(Pchp.Core.PhpValue)">
<param name="importer" type="Vc_WP_Import"></param>
</member>
<member name="M:Vc_WXR_Parser_Plugin.processAttachments(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_WXR_Parser_Plugin.remapAttachmentUrls(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_WXR_Parser_Plugin.shortcodeAttributes(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_WXR_Parser_Plugin.attributesWalker(Pchp.Core.PhpAlias,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_WXR_Parser_Plugin.parseShortcodes(Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_WXR_Parser_Regex.__construct">
<summary>
Vc_WXR_Parser_Regex constructor.
</summary>
</member>
<member name="M:Vc_WXR_Parser_Regex.parse(Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_WXR_Parser_Regex.get_tag(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_WXR_Parser_Regex.process_category(Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_WXR_Parser_Regex.process_tag(Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_WXR_Parser_Regex.process_term(Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_WXR_Parser_Regex.process_author(Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_WXR_Parser_Regex.process_post(Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_WXR_Parser_Regex.normalize_tag(Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_WXR_Parser_Regex.fopen(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<param name="mode" type="string"></param>
</member>
<member name="M:Vc_WXR_Parser_Regex.feof(Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_WXR_Parser_Regex.fgets(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<param name="len" type="int"></param>
</member>
<member name="M:Vc_WXR_Parser_Regex.fclose(Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_WXR_Parser_SimpleXML.parse(Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_WXR_Parser_XML.parse(Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_WXR_Parser_XML.tag_open(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_WXR_Parser_XML.cdata(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_WXR_Parser_XML.tag_close(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_WXR_Parser.parse(Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Editor_Interface.renderEditor">
</member>
<member name="M:Vc_Render.render">
</member>
<member name="M:Vc_Vendor_Interface.load">
</member>
<member name="M:Vc_Backend_Editor.addHooksSettings">
<summary>
This method is called by Vc_Manager to register required action hooks for VC backend editor.
</summary>
</member>
<member name="M:Vc_Backend_Editor.render(Pchp.Core.PhpValue)">
<summary>
Calls add_meta_box to create Editor block. Block is rendered by WPBakeryVisualComposerLayout.
</summary>
</member>
<member name="M:Vc_Backend_Editor.renderEditor(Pchp.Core.PhpValue)">
<summary>
Output html for backend editor meta box.
</summary>
<param name="post" type="null|Wp_Post"></param>
</member>
<member name="M:Vc_Backend_Editor.renderEditorFooter">
<summary>
Output required html and js content for VC editor.
Here comes panels, modals and js objects with data for mapped shortcodes.
</summary>
</member>
<member name="M:Vc_Backend_Editor.isValidPostType(Pchp.Core.PhpValue)">
<summary>
Check is post type is valid for rendering VC backend editor.
</summary>
<param name="type" type="string"></param>
</member>
<member name="M:Vc_Backend_Editor.printScriptsMessages">
<summary>
Enqueue required javascript libraries and css files.
This method also setups reminder about license activation.
</summary>
</member>
<member name="M:Vc_Backend_Editor.enqueueEditorScripts">
<summary>
Enqueue required javascript libraries and css files.
</summary>
</member>
<member name="M:Vc_Backend_Editor.editorEnabled">
</member>
<member name="M:Vc_Edit_Form_Fields.__construct(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Construct Form fields.
</summary>
<param name="tag">- shortcode tag</param>
<param name="atts">- list of attribute assign to the shortcode.</param>
</member>
<member name="M:Vc_Edit_Form_Fields.setting(Pchp.Core.PhpValue)">
<summary>
Get settings
</summary>
</member>
<member name="M:Vc_Edit_Form_Fields.setSettings(Pchp.Core.PhpArray)">
<summary>
Set settings data
</summary>
<param name="settings" type="array"></param>
</member>
<member name="M:Vc_Edit_Form_Fields.postId">
<summary>
Shortcode Post ID getter.
If post id isn't set try to get from get_the_ID function.
</summary>
<returns>int|bool;</returns>
</member>
<member name="M:Vc_Edit_Form_Fields.setPostId(Pchp.Core.PhpValue)">
<summary>
Shortcode Post ID setter.
</summary>
<param name="post_id">- integer value in post_id</param>
</member>
<member name="M:Vc_Edit_Form_Fields.parseShortcodeAttributeValue(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Get shortcode attribute value.
This function checks if value isn't set then it uses std or value fields in param settings.
</summary>
</member>
<member name="M:Vc_Edit_Form_Fields.enqueueScripts">
<summary>
Enqueue js scripts for attributes types.
</summary>
</member>
<member name="M:Vc_Edit_Form_Fields.renderGroupedFields(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Render grouped fields.
</summary>
</member>
<member name="M:Vc_Edit_Form_Fields.render">
<summary>
Render fields html and output it.
</summary>
</member>
<member name="M:Vc_Edit_Form_Fields.renderField(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Generate html for shortcode attribute.
Method
</summary>
<param name="value">vc_filter: vc_single_param_edit - hook to edit any shortode param
vc_filter: vc_form_fields_render_field_{shortcode_name}_{param_name}_param_value - hook to edit shortcode param
value vc_filter: vc_form_fields_render_field_{shortcode_name}_{param_name}_param - hook to edit shortcode
param attributes vc_filter: vc_single_param_edit_holder_output - hook to edit output of this method</param>
</member>
<member name="M:Vc_Edit_Form_Fields.loadDefaultParams">
<summary>
Create default shortcode params
List of params stored in global variable $vc_params_list.
Please check include/params/load.php for default params list.
</summary>
</member>
<member name="M:Vc_Frontend_Editor.init">
</member>
<member name="M:Vc_Frontend_Editor.addHooks">
</member>
<member name="M:Vc_Frontend_Editor.hookLoadEdit">
</member>
<member name="M:Vc_Frontend_Editor.adminInit">
</member>
<member name="M:Vc_Frontend_Editor.buildEditablePage">
</member>
<member name="M:Vc_Frontend_Editor.buildPage">
</member>
<member name="M:Vc_Frontend_Editor.inlineEnabled(Pchp.Core.Context)">
</member>
<member name="M:Vc_Frontend_Editor.frontendEditorEnabled(Pchp.Core.Context)">
</member>
<member name="M:Vc_Frontend_Editor.disableInline(Pchp.Core.Context,Pchp.Core.PhpValue)">
<param name="disable" type="bool"></param>
</member>
<member name="M:Vc_Frontend_Editor.parseEditableContent(Pchp.Core.PhpValue)">
<summary>
Main purpose of this function is to
1) Parse post content to get ALL shortcodes in to array
2) Wrap all shortcodes into editable-wrapper
3) Return "iframe" editable content in extra-script wrapper
</summary>
<param name="post" type="Wp_Post"></param>
</member>
<member name="M:Vc_Frontend_Editor.printPostShortcodes">
</member>
<member name="M:Vc_Frontend_Editor.editableContent(Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Frontend_Editor.getInlineUrl(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<param name="url" type="string"></param>
<param name="id" type="string">vc_filter: vc_get_inline_url - filter to edit frontend editor url (can be used for example in vendors like
qtranslate do)</param>
</member>
<member name="M:Vc_Frontend_Editor.wrapperStart">
</member>
<member name="M:Vc_Frontend_Editor.wrapperEnd">
</member>
<member name="M:Vc_Frontend_Editor.setBrandUrl(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Frontend_Editor.getBrandUrl(Pchp.Core.Context)">
</member>
<member name="M:Vc_Frontend_Editor.shortcodesRegexp(Pchp.Core.Context)">
</member>
<member name="M:Vc_Frontend_Editor.setPost">
</member>
<member name="M:Vc_Frontend_Editor.post">
</member>
<member name="M:Vc_Frontend_Editor.allowInsertEmptyPost(Pchp.Core.PhpValue)">
<summary>
Used for wp filter 'wp_insert_post_empty_content' to allow empty post insertion.
</summary>
</member>
<member name="M:Vc_Frontend_Editor.renderEditor">
<summary>
vc_filter: vc_frontend_editor_iframe_url - hook to edit iframe url, can be used in vendors like qtranslate do.
</summary>
</member>
<member name="M:Vc_Frontend_Editor.setEditorTitle">
</member>
<member name="M:Vc_Frontend_Editor.setEmptyTitlePlaceholder(Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Frontend_Editor.render(Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Frontend_Editor.renderEditButton(Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Frontend_Editor.renderRowAction(Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Frontend_Editor.showButton(Pchp.Core.PhpValue)">
<param name="post_id" type="null"></param>
</member>
<member name="M:Vc_Frontend_Editor.adminBarEditLink(Pchp.Core.PhpValue)">
<param name="wp_admin_bar" type="WP_Admin_Bar"></param>
</member>
<member name="M:Vc_Frontend_Editor.setTemplateContent(Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Frontend_Editor.getTemplateContent">
<summary>
vc_filter: vc_inline_template_content - filter to override template content
</summary>
</member>
<member name="M:Vc_Frontend_Editor.renderTemplates">
</member>
<member name="M:Vc_Frontend_Editor.loadTinyMceSettings">
</member>
<member name="M:Vc_Frontend_Editor.loadIFrameJsCss">
</member>
<member name="M:Vc_Frontend_Editor.loadShortcodes">
</member>
<member name="M:Vc_Frontend_Editor.fullUrl(Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Frontend_Editor.cleanStyle(Pchp.Core.Context)">
</member>
<member name="M:Vc_Frontend_Editor.enqueueRequired">
</member>
<member name="M:Vc_Frontend_Editor.renderShortcodes(Pchp.Core.PhpArray)">
<param name="shortcodes" type="array">vc_filter: vc_front_render_shortcodes - hook to override shortcode rendered output</param>
</member>
<member name="M:Vc_Frontend_Editor.filterAdminBodyClass(Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Frontend_Editor.adminFile(Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Frontend_Editor.enqueueJs">
</member>
<member name="M:Vc_Frontend_Editor.enqueueAdmin">
</member>
<member name="M:Vc_Frontend_Editor.enqueueMappedShortcode">
<summary>
Enqueue js/css files from mapped shortcodes.
To add js/css files to this enqueue please add front_enqueue_js/front_enqueue_css setting in vc_map array.
</summary>
</member>
<member name="M:Vc_Frontend_Editor.enqueueMappedShortcodeJs(Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Frontend_Editor.enqueueMappedShortcodeCss(Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Frontend_Editor.getPageShortcodesByContent(Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Frontend_Editor.parseShortcodesString(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<param name="is_container" type="bool"></param>
<param name="parent_id" type="bool"></param>
</member>
<member name="M:Vc_Frontend_Editor.toString(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Navbar_Frontend.getControlScreenSize">
</member>
<member name="M:Vc_Navbar_Frontend.getControlSaveUpdate">
</member>
<member name="M:Vc_Navbar_Frontend.getControlViewPost">
</member>
<member name="M:Vc_Navbar_Undoredo.addControls(Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Navbar.__construct(WP_Post)">
<param name="post" type="WP_Post"></param>
</member>
<member name="M:Vc_Navbar.getControls">
<summary>
Generate array of controls by iterating property $controls list.
vc_filter: vc_nav_controls - hook to override list of controls
</summary>
<returns>- list of arrays witch contains key name and html output for button.</returns>
</member>
<member name="M:Vc_Navbar.post">
<summary>
Get current post.
</summary>
</member>
<member name="M:Vc_Navbar.render">
<summary>
Render template.
</summary>
</member>
<member name="M:Vc_Navbar.getLogo">
<summary>
vc_filter: vc_nav_front_logo - hook to override WPBakery Page Builder logo
</summary>
</member>
<member name="M:Vc_Navbar.getControlCustomCss">
</member>
<member name="M:Vc_Navbar.getControlFullscreen">
</member>
<member name="M:Vc_Navbar.getControlWindowed">
</member>
<member name="M:Vc_Navbar.getControlAddElement">
</member>
<member name="M:Vc_Navbar.getControlTemplates">
</member>
<member name="M:Vc_Navbar.getControlFrontend">
</member>
<member name="M:Vc_Navbar.getControlPreview">
</member>
<member name="M:Vc_Navbar.getControlSaveBackend">
</member>
<member name="M:Vc_Add_Element_Box.getIcon(Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Add_Element_Box.renderButton(Pchp.Core.PhpValue)">
<summary>
Single button html template
</summary>
</member>
<member name="M:Vc_Add_Element_Box.shortcodes">
<summary>
Get mapped shortcodes list.
</summary>
</member>
<member name="M:Vc_Add_Element_Box.getControls">
<summary>
Render list of buttons for each mapped and allowed VC shortcodes.
vc_filter: vc_add_element_box_buttons - hook to override output of getControls method
</summary>
</member>
<member name="M:Vc_Add_Element_Box.getCategories">
<summary>
Get categories list from mapping data.
</summary>
</member>
<member name="M:Vc_Add_Element_Box.render">
</member>
<member name="M:Vc_Add_Element_Box.renderIcon(Pchp.Core.PhpValue)">
<summary>
Render icon for shortcode
</summary>
</member>
<member name="M:Vc_Add_Element_Box.isShowEmptyMessage">
</member>
<member name="M:Vc_Add_Element_Box.getPartState">
</member>
<member name="M:Vc_Post_Settings.__construct(Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Preset_Panel_Editor.init">
</member>
<member name="M:Vc_Preset_Panel_Editor.renderUIPreset">
</member>
<member name="M:Vc_Preset_Panel_Editor.listPresets">
<summary>
Get list of all presets for specific shortcode
</summary>
<returns>E.g. array(id1 =&gt; title1, id2 =&gt; title2, ...)</returns>
</member>
<member name="M:Vc_Preset_Panel_Editor.getPresets">
<summary>
Single preset html
</summary>
</member>
<member name="M:Vc_Preset_Panel_Editor.constructPresetParent(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Get preset parent shortcode name from post mime type
</summary>
</member>
<member name="M:Vc_Shortcode_Edit_Form.init">
</member>
<member name="M:Vc_Shortcode_Edit_Form.render">
</member>
<member name="M:Vc_Shortcode_Edit_Form.renderFields">
<summary>
Build edit form fields.
</summary>
</member>
<member name="M:Vc_Shortcode_Edit_Form.changeEditFormFieldParams(Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Shortcode_Edit_Form.changeEditFormParams(Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Templates_Panel_Editor.init">
</member>
<member name="M:Vc_Templates_Panel_Editor.addBodyClassTemplatePreview">
</member>
<member name="M:Vc_Templates_Panel_Editor.renderTemplateBlock(Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Templates_Panel_Editor.renderTemplateWindow(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Output rendered template in new panel dialog
</summary>
</member>
<member name="M:Vc_Templates_Panel_Editor.renderTemplateWindowMyTemplates(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Templates_Panel_Editor.renderTemplateWindowDefaultTemplates(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Templates_Panel_Editor.renderFrontendTemplate">
</member>
<member name="M:Vc_Templates_Panel_Editor.renderFrontendDefaultTemplate">
<summary>
Load frontend default template content by index
</summary>
</member>
<member name="M:Vc_Templates_Panel_Editor.renderUITemplate">
</member>
<member name="M:Vc_Templates_Panel_Editor.save">
</member>
<member name="M:Vc_Templates_Panel_Editor.renderBackendTemplate">
<summary>
Loading Any templates Shortcodes for backend by string $template_id from AJAX
</summary>
</member>
<member name="M:Vc_Templates_Panel_Editor.renderTemplatePreview">
<summary>
Render new template view as backened editor content.
</summary>
</member>
<member name="M:Vc_Templates_Panel_Editor.enqueuePreviewScripts">
<summary>
Enqueue required scripts for template preview
</summary>
</member>
<member name="M:Vc_Templates_Panel_Editor.delete">
</member>
<member name="M:Vc_Templates_Panel_Editor.loadDefaultTemplatesLimit(Pchp.Core.PhpValue)">
<param name="templates">vc_filter: vc_load_default_templates_limit_total - total items to show</param>
</member>
<member name="M:Vc_Templates_Panel_Editor.getUserTemplates">
<summary>
Get user templates
</summary>
</member>
<member name="M:Vc_Templates_Panel_Editor.getAllTemplates">
<summary>
Function to get all templates for display
- with image (optional preview image)
- with unique_id (required for do something for rendering.. )
- with name (required for display? )
- with type (required for requesting data in server)
- with category key (optional/required for filtering), if no category provided it will be displayed only in
"All" category type vc_filter: vc_get_user_templates - hook to override "user My Templates" vc_filter:
vc_get_all_templates - hook for override return array(all templates), hook to add/modify/remove more templates,
- this depends only to displaying in panel window (more layouts)
</summary>
<returns>- all templates with name/unique_id/category_key(optional)/image</returns>
</member>
<member name="M:Vc_Templates_Panel_Editor.loadDefaultTemplates">
<summary>
Load default templates list and initialize variable
To modify you should use add_filter('vc_load_default_templates','your_custom_function');
Argument is array of templates data like:
array(
array(
'name'=&gt;esc_html__('My custom template','my_plugin'),
'image_path'=&gt; preg_replace( '/\s/', '%20', plugins_url( 'images/my_image.png', __FILE__ ) ), //
always use preg replace to be sure that "space" will not break logic
'custom_class'=&gt;'my_custom_class', // if needed
'content'=&gt;'[my_shortcode]yeah[/my_shortcode]', // Use HEREDoc better to escape all single-quotes
and double quotes
),
...
);
Also see filters 'vc_load_default_templates_panels' and 'vc_load_default_templates_welcome_block' to modify
templates in panels tab and/or in welcome block. vc_filter: vc_load_default_templates - filter to override
default templates array
</summary>
</member>
<member name="M:Vc_Templates_Panel_Editor.getDefaultTemplates">
<summary>
Alias for loadDefaultTemplates
</summary>
<returns>- list of default templates</returns>
</member>
<member name="M:Vc_Templates_Panel_Editor.getDefaultTemplate(Pchp.Core.PhpValue)">
<summary>
Get default template data by template index in array.
</summary>
<param name="template_index" type="number"></param>
</member>
<member name="M:Vc_Templates_Panel_Editor.addDefaultTemplates(Pchp.Core.PhpValue)">
<summary>
Add custom template to default templates list ( at end of list )
$data = array( 'name'=&gt;'', 'image'=&gt;'', 'content'=&gt;'' )
</summary>
<returns>true if added, false if failed</returns>
</member>
<member name="M:Vc_Templates_Panel_Editor.getBackendDefaultTemplate(Pchp.Core.PhpValue)">
<summary>
Load default template content by index from ajax
</summary>
<param name="return" type="bool">| should function return data or not</param>
</member>
<member name="M:Vc_Templates_Panel_Editor.sortTemplatesByCategories(Pchp.Core.PhpArray)">
<param name="data" type="array"></param>
</member>
<member name="M:Vc_Templates_Panel_Editor.sortTemplatesByNameWeight(Pchp.Core.PhpArray)">
<param name="data" type="array"></param>
</member>
<member name="M:Vc_Templates_Panel_Editor.getAllCategoriesNames(Pchp.Core.PhpArray)">
<summary>
Function should return array of templates categories
</summary>
<param name="categories" type="array"></param>
<returns>- associative array of category key =&gt; and visible Name</returns>
</member>
<member name="M:Vc_Templates_Panel_Editor.getAllTemplatesSorted">
</member>
<member name="M:Vc_Templates_Panel_Editor.cmpCategory(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Used to compare two templates by category, category_weight
If category weight is less template will appear in first positions
</summary>
<param name="a" type="array">- template one</param>
<param name="b" type="array">- second template to compare</param>
</member>
<member name="M:Vc_Templates_Panel_Editor.cmpNameWeight(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Templates_Panel_Editor.frontendDoTemplatesShortcodes(Pchp.Core.PhpValue)">
<summary>
Calls do_shortcode for templates.
</summary>
</member>
<member name="M:Vc_Templates_Panel_Editor.addFrontendTemplatesShortcodesCustomCss">
<summary>
Add custom css from shortcodes from template for template editor.
Used by action 'wp_print_scripts'.
</summary>
</member>
<member name="M:Vc_Templates_Panel_Editor.renderTemplateListItem(Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Templates_Panel_Editor.getOptionName">
</member>
<member name="M:Vc_Automap_Model?.__construct(Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Automap_Model?.findAll(Pchp.Core.Context)">
</member>
<member name="M:Vc_Automap_Model?.loadOptionData(Pchp.Core.Context)">
</member>
<member name="M:Vc_Automap_Model?.get(Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Automap_Model?.set(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<param name="value" type="null"></param>
</member>
<member name="M:Vc_Automap_Model?.save">
</member>
<member name="M:Vc_Automap_Model?.delete">
</member>
<member name="M:Vc_Automap_Model?.isValid">
</member>
<member name="M:Vc_Automap_Model?.saveOption">
</member>
<member name="M:Vc_Automap_Model?.deleteOption">
</member>
<member name="M:Vc_Automapper?.__construct">
</member>
<member name="M:Vc_Automapper?.addAjaxActions">
</member>
<member name="M:Vc_Automapper?.renderHtml">
<summary>
Builds html for Automapper CRUD like administration block
</summary>
</member>
<member name="M:Vc_Automapper?.renderListItem(Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Automapper?.renderMapFormTpl">
</member>
<member name="M:Vc_Automapper?.renderTemplates">
</member>
<member name="M:Vc_Automapper?.result(Pchp.Core.PhpValue)">
<summary>
Ajax result output
</summary>
</member>
<member name="M:Vc_Automapper?.setDisabled(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Setter/Getter for Disabling Automapper
</summary>
<param name="disable" type="bool"></param>
</member>
<member name="M:Vc_Automapper?.disabled(Pchp.Core.Context)">
</member>
<member name="M:Vc_Automapper?.setTitle(Pchp.Core.PhpValue)">
<summary>
Setter/Getter for Automapper title
</summary>
<param name="title" type="string"></param>
</member>
<member name="M:Vc_Automapper?.title">
</member>
<member name="M:Vc_Automapper?.map(Pchp.Core.Context)">
</member>
<member name="M:Vc_License.outputNotice(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Output notice
</summary>
<param name="message" type="string"></param>
<param name="success" type="bool"></param>
</member>
<member name="M:Vc_License.showError(Pchp.Core.PhpValue)">
<summary>
Show error
</summary>
<param name="error" type="string"></param>
</member>
<member name="M:Vc_License.outputLastError">
<summary>
Output last error
</summary>
</member>
<member name="M:Vc_License.outputActivatedSuccess">
<summary>
Output successful activation message
</summary>
</member>
<member name="M:Vc_License.outputDeactivatedSuccess">
<summary>
Output successful deactivation message
</summary>
</member>
<member name="M:Vc_License.finishActivationDeactivation(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Finish pending activation/deactivation
1) Make API call to support portal
2) Receive success status and license key
3) Set new license key
</summary>
<param name="activation" type="bool"></param>
<param name="user_token" type="string"></param>
</member>
<member name="M:Vc_License.isActivated">
</member>
<member name="M:Vc_License.checkLicenseKeyFromRemote">
<summary>
Check license key from remote
Function is used by support portal to check if VC w/ specific license is still installed
</summary>
</member>
<member name="M:Vc_License.generateActivationUrl">
<summary>
Generate action URL
</summary>
</member>
<member name="M:Vc_License.generateDeactivationUrl">
<summary>
Generate action URL
</summary>
</member>
<member name="M:Vc_License.startActivationResponse">
<summary>
Start activation process and output redirect URL as JSON
</summary>
</member>
<member name="M:Vc_License.startDeactivationResponse">
<summary>
Start deactivation process and output redirect URL as JSON
</summary>
</member>
<member name="M:Vc_License.setLicenseKey(Pchp.Core.PhpValue)">
<summary>
Set license key
</summary>
<param name="license_key" type="string"></param>
</member>
<member name="M:Vc_License.getLicenseKey">
<summary>
Get license key
</summary>
</member>
<member name="M:Vc_License.isValid(Pchp.Core.PhpValue)">
<summary>
Check if specified license key is valid
</summary>
<param name="license_key" type="string"></param>
</member>
<member name="M:Vc_License.setupReminder">
<summary>
Set up license activation notice if needed
Don't show notice on dev environment
</summary>
</member>
<member name="M:Vc_License.isDevEnvironment(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Check if current enviroment is dev
Environment is considered dev if host is:
- ip address
- tld is local, dev, wp, test, example, localhost or invalid
- no tld (localhost, custom hosts)
</summary>
<param name="host" type="string">Hostname to check. If null, use HTTP_HOST</param>
</member>
<member name="M:Vc_License.getLicenseKeyToken">
<summary>
Get license key token
</summary>
</member>
<member name="M:Vc_License.setLicenseKeyToken(Pchp.Core.PhpValue)">
<summary>
Set license key token
</summary>
<param name="token" type="string"></param>
</member>
<member name="M:Vc_License.generateLicenseKeyToken">
<summary>
Return new license key token
Token is used to change license key from remote location

Format is: timestamp|20-random-characters
</summary>
</member>
<member name="M:Vc_License.newLicenseKeyToken">
<summary>
Generate and set new license key token
</summary>
</member>
<member name="M:Vc_License.isValidToken(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Check if specified license key token is valid
</summary>
<param name="token_to_check" type="string">SHA1 hashed token</param>
<param name="ttl_in_seconds" type="int">Time to live in seconds. Default = 20min</param>
</member>
<member name="M:Vc_License.isValidFormat(Pchp.Core.PhpValue)">
<summary>
Check if license key format is valid
license key is version 4 UUID, that have form xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx
where x is any hexadecimal digit and y is one of 8, 9, A, or B.
</summary>
<param name="license_key" type="string"></param>
</member>
<member name="M:Vc_License.getSiteUrl(Pchp.Core.Context)">
</member>
<member name="M:Vc_Roles.getParts">
<summary>
Get list of parts
</summary>
</member>
<member name="M:Vc_Roles.getPartCapability(Pchp.Core.PhpValue)">
<summary>
Check required capability for this role to have user access.
</summary>
</member>
<member name="M:Vc_Roles.hasRoleCapability(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Roles.getWpRoles">
</member>
<member name="M:Vc_Roles.save(Pchp.Core.PhpValue)">
<param name="params" type="array"></param>
</member>
<member name="M:Vc_Roles.getPostTypes">
</member>
<member name="M:Vc_Roles.getExcludePostTypes">
</member>
<member name="M:Vc_Settings.setFieldPrefix(Pchp.Core.Context,Pchp.Core.PhpValue)">
<param name="field_prefix" type="string"></param>
</member>
<member name="M:Vc_Settings.page">
</member>
<member name="M:Vc_Settings.isEditorEnabled">
</member>
<member name="M:Vc_Settings.setTabs">
</member>
<member name="M:Vc_Settings.getTabs">
</member>
<member name="M:Vc_Settings.showConfigurationTabs">
</member>
<member name="M:Vc_Settings.renderTab(Pchp.Core.PhpValue)">
<summary>
Render
</summary>
</member>
<member name="M:Vc_Settings.initAdmin">
<summary>
Init settings page &amp;&amp; menu item
vc_filter: vc_settings_tabs - hook to override settings tabs
</summary>
</member>
<member name="M:Vc_Settings.addSection(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Creates new section.
</summary>
<param name="tab">- tab key name as tab section</param>
<param name="title">- Human title</param>
<param name="callback">- function to build section header.</param>
</member>
<member name="M:Vc_Settings.addField(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Create field in section.
</summary>
<param name="args" type="array"></param>
<returns>$this</returns>
</member>
<member name="M:Vc_Settings.restoreColor">
</member>
<member name="M:Vc_Settings.get(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<param name="defaultValue" type="bool"></param>
</member>
<member name="M:Vc_Settings.set(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Settings.adminLoad">
<summary>
Set up the enqueue for the CSS &amp; JavaScript files.
</summary>
</member>
<member name="M:Vc_Settings.custom_css_field_callback">
</member>
<member name="M:Vc_Settings.not_responsive_css_field_callback">
<summary>
Not responsive checkbox callback function
</summary>
</member>
<member name="M:Vc_Settings.google_fonts_subsets_callback">
<summary>
Google fonts subsets callback
</summary>
</member>
<member name="M:Vc_Settings.googleFontsSubsets">
<summary>
Get subsets for google fonts.
</summary>
</member>
<member name="M:Vc_Settings.googleFontsSubsetsDefault">
</member>
<member name="M:Vc_Settings.getGoogleFontsSubsets">
</member>
<member name="M:Vc_Settings.setGoogleFontsSubsets(Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Settings.getGoogleFontsSubsetsExcluded">
</member>
<member name="M:Vc_Settings.setGoogleFontsSubsetsExcluded(Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Settings.use_custom_callback">
<summary>
Not responsive checkbox callback function
</summary>
</member>
<member name="M:Vc_Settings.color_callback(Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Settings.margin_callback">
</member>
<member name="M:Vc_Settings.gutter_callback">
</member>
<member name="M:Vc_Settings.responsive_max_callback">
</member>
<member name="M:Vc_Settings.compiled_js_composer_less_callback">
</member>
<member name="M:Vc_Settings.getDefault(Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Settings.setting_section_callback_function(Pchp.Core.PhpValue)">
<summary>
Callback function for settings section
</summary>
</member>
<member name="M:Vc_Settings.sanitize_not_responsive_css_callback(Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Settings.sanitize_google_fonts_subsets_callback(Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Settings.sanitize_use_custom_callback(Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Settings.sanitize_custom_css_callback(Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Settings.sanitize_compiled_js_composer_less_callback(Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Settings.sanitize_color_callback(Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Settings.sanitize_margin_callback(Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Settings.sanitize_gutter_callback(Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Settings.sanitize_responsive_max_callback(Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Settings.sanitize_responsive_md_callback(Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Settings.sanitize_responsive_lg_callback(Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Settings._isNumberValid(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Settings._isGutterValid(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Settings.useCustomCss">
</member>
<member name="M:Vc_Settings.getCustomCssVersion">
</member>
<member name="M:Vc_Settings.rebuild">
</member>
<member name="M:Vc_Settings.buildCustomColorCss(Pchp.Core.Context)">
</member>
<member name="M:Vc_Settings.buildCustomCss(Pchp.Core.Context)">
<summary>
Builds custom css file using css options from vc settings.
</summary>
</member>
<member name="M:Vc_Settings.checkCreateUploadDir(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<param name="wp_filesystem" type="\WP_Filesystem_Direct"></param>
</member>
<member name="M:Vc_Settings.uploadDir(Pchp.Core.Context)">
</member>
<member name="M:Vc_Settings.uploadURL(Pchp.Core.Context)">
</member>
<member name="M:Vc_Settings.getFieldPrefix(Pchp.Core.Context)">
</member>
<member name="M:Vc_Settings.getFileSystem(Pchp.Core.Context,Pchp.Core.PhpValue)">
<param name="url" type="string"></param>
</member>
<member name="M:Vc_Settings.getOptionGroup">
</member>
<member name="M:Vc_Shortcodes_Manager.getInstance(Pchp.Core.Context)">
<summary>
Get the instance of Vc_Shortcodes_Manager
</summary>
</member>
<member name="M:Vc_Shortcodes_Manager.setTag(Pchp.Core.PhpValue)">
<returns>$this</returns>
</member>
<member name="M:Vc_Shortcodes_Manager.getElementClass(Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Shortcodes_Manager.shortcodeClass">
</member>
<member name="M:Vc_Shortcodes_Manager.template(Pchp.Core.PhpValue)">
<param name="content" type="string"></param>
</member>
<member name="M:Vc_Shortcodes_Manager.settings(Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Shortcodes_Manager.render(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<param name="content" type="null"></param>
<param name="tag" type="null"></param>
</member>
<member name="M:Vc_Shortcodes_Manager.isShortcodeClassInitialized(Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Shortcodes_Manager.unsetElementClass(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCodeFishBones.__construct(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCodeFishBones.shortcodeClass">
</member>
<member name="M:WPBakeryShortCodeFishBones.getElementClass(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCodeFishBones.render(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<param name="content" type="null"></param>
<param name="tag" type="null"></param>
</member>
<member name="M:WPBakeryShortCodeFishBones.template(Pchp.Core.PhpValue)">
<param name="content" type="string"></param>
</member>
<member name="M:WPBakeryVisualComposerAbstract.__construct">
</member>
<member name="M:WPBakeryVisualComposerAbstract.init(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryVisualComposerAbstract.addAction(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<param name="priority" type="int"></param>
</member>
<member name="M:WPBakeryVisualComposerAbstract.removeAction(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<param name="priority" type="int"></param>
</member>
<member name="M:WPBakeryVisualComposerAbstract.addFilter(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<param name="priority" type="int"></param>
</member>
<member name="M:WPBakeryVisualComposerAbstract.removeFilter(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<param name="priority" type="int"></param>
</member>
<member name="M:WPBakeryVisualComposerAbstract.addShortCode(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryVisualComposerAbstract.doShortCode(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryVisualComposerAbstract.removeShortCode(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryVisualComposerAbstract.post(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryVisualComposerAbstract.get(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryVisualComposerAbstract.assetURL(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryVisualComposerAbstract.assetPath(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryVisualComposerAbstract.config(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode.__construct(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode.addInlineAnchors(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode.enqueueAssets">
</member>
<member name="M:WPBakeryShortCode.printIconStyles">
<summary>
Prints out the styles needed to render the element icon for the back end interface.
Only performed if the 'icon' setting is a valid URL.
</summary>
</member>
<member name="M:WPBakeryShortCode.registerJs(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode.registerCss(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode.enqueueCss(Pchp.Core.Context)">
</member>
<member name="M:WPBakeryShortCode.enqueueJs(Pchp.Core.Context)">
</member>
<member name="M:WPBakeryShortCode.shortcode(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode.setTemplate(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode.getTemplate">
</member>
<member name="M:WPBakeryShortCode.getFileName">
</member>
<member name="M:WPBakeryShortCode.findShortcodeTemplate">
<summary>
Find html template for shortcode output.
</summary>
</member>
<member name="M:WPBakeryShortCode.content(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<param name="content" type="null"></param>
</member>
<member name="M:WPBakeryShortCode.loadTemplate(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<param name="content" type="null">vc_filter: vc_shortcode_content_filter - hook to edit template content
vc_filter: vc_shortcode_content_filter_after - hook after template is loaded to override output</param>
</member>
<member name="M:WPBakeryShortCode.contentAdmin(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode.isAdmin">
</member>
<member name="M:WPBakeryShortCode.isInline">
</member>
<member name="M:WPBakeryShortCode.isEditor">
</member>
<member name="M:WPBakeryShortCode.output(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<param name="content" type="null"></param>
<param name="base" type="string">vc_filter: vc_shortcode_output - hook to override output of shortcode</param>
</member>
<member name="M:WPBakeryShortCode.getAtts">
<summary>
Return shortcode attributes, see \WPBakeryShortCode::output
</summary>
</member>
<member name="M:WPBakeryShortCode.beforeShortcode(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Creates html before shortcode html.
</summary>
<param name="atts">- shortcode attributes list</param>
<param name="content">- shortcode content</param>
<returns>- html which will be displayed before shortcode html.</returns>
</member>
<member name="M:WPBakeryShortCode.afterShortcode(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Creates html before shortcode html.
</summary>
<param name="atts">- shortcode attributes list</param>
<param name="content">- shortcode content</param>
<returns>- html which will be displayed after shortcode html.</returns>
</member>
<member name="M:WPBakeryShortCode.getExtraClass(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode.getCSSAnimation(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode.endBlockComment(Pchp.Core.PhpValue)">
<summary>
Create HTML comment for blocks only if wpb_debug=true
</summary>
</member>
<member name="M:WPBakeryShortCode.debugComment(Pchp.Core.PhpValue)">
<summary>
if wpb_debug=true return HTML comment
</summary>
<param name="comment" type="string"></param>
</member>
<member name="M:WPBakeryShortCode.settings(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode.setSettings(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode.getSettings">
</member>
<member name="M:WPBakeryShortCode.getElementHolder(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode.getColumnControls(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<param name="extended_css" type="string"></param>
</member>
<member name="M:WPBakeryShortCode.getControlsList">
<summary>
Return list of controls
</summary>
</member>
<member name="M:WPBakeryShortCode.getColumnControlsModular(Pchp.Core.PhpValue)">
<summary>
Build new modern controls for shortcode.
</summary>
<param name="extended_css" type="string"></param>
</member>
<member name="M:WPBakeryShortCode.getBackendEditorControlsElementCssClass">
</member>
<member name="M:WPBakeryShortCode.getCallbacks(Pchp.Core.PhpValue)">
<summary>
This will fire callbacks if they are defined in map.php
</summary>
</member>
<member name="M:WPBakeryShortCode.singleParamHtmlHolder(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<param name="value">vc_filter: vc_wpbakeryshortcode_single_param_html_holder_value - hook to override param value (param type and etc is available in args)</param>
</member>
<member name="M:WPBakeryShortCode.getIcon(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode.outputTitle(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode.template(Pchp.Core.PhpValue)">
<param name="content" type="string"></param>
</member>
<member name="M:WPBakeryShortCode.prepareAtts(Pchp.Core.PhpValue)">
<summary>
This functions prepares attributes to use in template
Converts back escaped characters
</summary>
</member>
<member name="M:WPBakeryShortCode.getShortcode">
</member>
<member name="M:WPBakeryShortCode.customMarkup(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Since 4.5
Possible placeholders:
{{ content }}
{{ title }}
{{ container-class }}

Possible keys:
{{
&lt;%
%
</summary>
<param name="content" type="string"></param>
</member>
<member name="M:WPBakeryShortCode.paramsHtmlHolders(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode.getAddAllowed">
<summary>
Check is allowed to add another element inside current element.
</summary>
</member>
<member name="M:WPBakeryShortCodesContainer.customAdminBlockParams">
</member>
<member name="M:WPBakeryShortCodesContainer.mainHtmlBlockParams(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCodesContainer.containerHtmlBlockParams(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCodesContainer.containerContentClass">
</member>
<member name="M:WPBakeryShortCodesContainer.getColumnControls(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<param name="controls" type="string"></param>
<param name="extended_css" type="string"></param>
</member>
<member name="M:WPBakeryShortCodesContainer.contentAdmin(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<param name="content" type="null"></param>
</member>
<member name="M:WPBakeryShortCodesContainer.outputTitle(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCodesContainer.getBackendEditorChildControlsElementCssClass">
</member>
<member name="M:WPBakeryShortCode_Vc_Pageable.__construct(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Pageable.shortcodeScripts">
<summary>
Register scripts and styles for pager
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Pageable.contentAll(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Pageable.contentLoadMore(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Pageable.contentLazy(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Pageable.renderPagination(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<param name="content" type="string"></param>
<param name="css_class" type="string"></param>
</member>
<member name="M:WPBakeryShortCode_Vc_Pageable.isObjectPageable">
<summary>
Check is pageable
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Pageable.currentUserCanManage(Pchp.Core.PhpValue)">
<summary>
Check can user manage post.
</summary>
<param name="page_id" type="int"></param>
</member>
<member name="M:WPBakeryShortCode_VC_Accordion_Tab.contentAdmin(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<param name="content" type="null"></param>
</member>
<member name="M:WPBakeryShortCode_VC_Accordion_Tab.mainHtmlBlockParams(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_VC_Accordion_Tab.containerHtmlBlockParams(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_VC_Accordion_Tab.outputTitle(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_VC_Accordion_Tab.customAdminBlockParams">
</member>
<member name="M:WPBakeryShortCode_Vc_Accordion.contentAdmin(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<param name="content" type="null"></param>
</member>
<member name="M:WPBakeryShortCode_Vc_Basic_Grid.__construct(Pchp.Core.PhpValue)">
<summary>
WPBakeryShortCode_Vc_Basic_Grid constructor.
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Basic_Grid.addExcludedId(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Basic_Grid.excludedIds(Pchp.Core.Context)">
</member>
<member name="M:WPBakeryShortCode_Vc_Basic_Grid.getId(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Basic_Grid.findPostShortcodeById(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Basic_Grid.renderItems">
</member>
<member name="M:WPBakeryShortCode_Vc_Basic_Grid.setPagingAll(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Basic_Grid.renderAjax(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Basic_Grid.postID">
</member>
<member name="M:WPBakeryShortCode_Vc_Basic_Grid.buildAtts(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Basic_Grid.attr(Pchp.Core.PhpValue)">
<summary>
Getter attribute.
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Basic_Grid.buildQuery(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Basic_Grid.filterQuerySettings(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Basic_Grid.convertButton2ToButton3(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Btn.convertAttributesToButton3(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Btn.outputTitle(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Button.outputTitle(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Button2.outputTitle(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Column_Text.outputTitle(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_VC_Column.__construct(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_VC_Column.shortcodeScripts">
</member>
<member name="M:WPBakeryShortCode_VC_Column.getColumnControls(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<param name="extended_css" type="string"></param>
</member>
<member name="M:WPBakeryShortCode_VC_Column.singleParamHtmlHolder(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_VC_Column.contentAdmin(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<param name="content" type="null"></param>
</member>
<member name="M:WPBakeryShortCode_VC_Column.customAdminBlockParams">
</member>
<member name="M:WPBakeryShortCode_VC_Column.mainHtmlBlockParams(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_VC_Column.containerHtmlBlockParams(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_VC_Column.template(Pchp.Core.PhpValue)">
<param name="content" type="string"></param>
</member>
<member name="M:WPBakeryShortCode_VC_Column.templateWidth">
</member>
<member name="M:WPBakeryShortCode_VC_Column.buildStyle(Pchp.Core.PhpValue)">
<param name="font_color" type="string"></param>
</member>
<member name="M:WPBakeryShortCode_Vc_Cta.buildTemplate(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Cta.getHeading(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Cta.getButton(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Cta.getVcIcon(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Cta.getTemplateVariable(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Custom_Heading.getField(Pchp.Core.PhpValue)">
<summary>
Used to get field name in vc_map function for google_fonts, font_container and etc..
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Custom_Heading.getParamData(Pchp.Core.PhpValue)">
<summary>
Get param value by providing key
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Custom_Heading.getAttributes(Pchp.Core.PhpValue)">
<summary>
Parses shortcode attributes and set defaults based on vc_map function relative to shortcode and fields names
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Custom_Heading.getStyles(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Parses google_fonts_data and font_container_data to get needed css styles to markup
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Facebook.contentInline(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<param name="content" type="null"></param>
</member>
<member name="M:WPBakeryShortCode_Vc_Gallery.__construct(Pchp.Core.PhpValue)">
<summary>
WPBakeryShortCode_Vc_gallery constructor.
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Gallery.singleParamHtmlHolder(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Gitem_Animated_Block.itemGrid">
</member>
<member name="M:WPBakeryShortCode_Vc_Gitem_Animated_Block.containerHtmlBlockParams(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Gitem_Animated_Block.animations(Pchp.Core.Context)">
</member>
<member name="M:WPBakeryShortCode_Vc_Gitem_Col.mainHtmlBlockParams(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Gitem_Col.outputEditorControlAlign">
</member>
<member name="M:WPBakeryShortCode_Vc_Gitem_Image.getDataSource(Pchp.Core.PhpArray)">
<summary>
Get data_source attribute value
</summary>
<param name="atts" type="array">- list of shortcode attributes</param>
</member>
<member name="M:WPBakeryShortCode_Vc_Gitem_Post_Author.getFileName">
</member>
<member name="M:WPBakeryShortCode_Vc_Gitem_Post_Categories.getFileName">
</member>
<member name="M:WPBakeryShortCode_Vc_Gitem_Post_Data.getDataSource(Pchp.Core.PhpArray)">
<summary>
Get data_source attribute value
</summary>
<param name="atts" type="array">- list of shortcode attributes</param>
</member>
<member name="M:WPBakeryShortCode_Vc_Gitem_Post_Data.getAttributes(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Gitem_Post_Date.getFileName">
</member>
<member name="M:WPBakeryShortCode_Vc_Gitem_Post_Date.getDataSource(Pchp.Core.PhpArray)">
<summary>
Get data_source attribute value
</summary>
<param name="atts" type="array">- list of shortcode attributes</param>
</member>
<member name="M:WPBakeryShortCode_Vc_Gitem_Post_Excerpt.getFileName">
</member>
<member name="M:WPBakeryShortCode_Vc_Gitem_Post_Excerpt.getDataSource(Pchp.Core.PhpArray)">
<summary>
Get data_source attribute value
</summary>
<param name="atts" type="array">- list of shortcode attributes</param>
</member>
<member name="M:WPBakeryShortCode_Vc_Gitem_Post_Title.getFileName">
</member>
<member name="M:WPBakeryShortCode_Vc_Gitem_Post_Title.getDataSource(Pchp.Core.PhpArray)">
<summary>
Get data_source attribute value
</summary>
<param name="atts" type="array">- list of shortcode attributes</param>
</member>
<member name="M:WPBakeryShortCode_Vc_Gitem_Row.getLayoutsControl">
</member>
<member name="M:WPBakeryShortCode_Vc_Gitem_Zone_A.getFileName">
</member>
<member name="M:WPBakeryShortCode_Vc_Gitem_Zone_B.getFileName">
</member>
<member name="M:WPBakeryShortCode_Vc_Gitem.contentAdmin(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<param name="content" type="null"></param>
</member>
<member name="M:WPBakeryShortCode_Vc_Gitem.mainHtmlBlockParams(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Gitem.itemGrid">
</member>
<member name="M:WPBakeryShortCode_Vc_Gitem.containerHtmlBlockParams(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Gitem.getControls(Pchp.Core.PhpValue)">
<summary>
Get rendered controls
</summary>
<param name="controls" type="array"></param>
</member>
<member name="M:WPBakeryShortCode_Vc_GooglePlus.contentInline(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<param name="content" type="null"></param>
</member>
<member name="M:WPBakeryShortCode_Vc_Gutenberg.outputTitle(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Hoverbox.getHeading(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Hoverbox.renderButton(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Images_Carousel.__construct(Pchp.Core.PhpValue)">
<summary>
WPBakeryShortCode_Vc_images_carousel constructor.
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Images_Carousel.getCarouselIndex(Pchp.Core.Context)">
</member>
<member name="M:WPBakeryShortCode_Vc_Images_Carousel.getSliderWidth(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Line_Chart.__construct(Pchp.Core.PhpValue)">
<summary>
WPBakeryShortCode_Vc_Line_Chart constructor.
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Masonry_Grid.getFileName">
</member>
<member name="M:WPBakeryShortCode_Vc_Masonry_Grid.contentAllMasonry(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Masonry_Grid.contentLazyMasonry(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Masonry_Grid.contentLoadMoreMasonry(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Masonry_Media_Grid.contentAllMasonry(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Masonry_Media_Grid.contentLazyMasonry(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Masonry_Media_Grid.contentLoadMoreMasonry(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Media_Grid.__construct(Pchp.Core.PhpValue)">
<summary>
WPBakeryShortCode_Vc_Media_Grid constructor.
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Media_Grid.getFileName">
</member>
<member name="M:WPBakeryShortCode_Vc_Media_Grid.setPagingAll(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Media_Grid.buildQuery(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Media_Grid.setItemsIfEmpty(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Media_Grid.singleParamHtmlHolder(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Message.convertAttributesToMessageBox2(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Message.outputTitle(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Pie.__construct(Pchp.Core.PhpValue)">
<summary>
WPBakeryShortCode_Vc_Pie constructor.
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Pie.convertOldColorsToNew(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Convert old color names to new ones for BC
</summary>
<param name="atts" type="array"></param>
</member>
<member name="M:WPBakeryShortCode_Vc_Pinterest.contentInline(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<param name="content" type="null"></param>
</member>
<member name="M:WPBakeryShortCode_Vc_Progress_Bar.convertAttributesToNewProgressBar(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Raw_Html.singleParamHtmlHolder(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Raw_Js.getFileName">
</member>
<member name="M:WPBakeryShortCode_Vc_Raw_Js.contentInline(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<param name="content" type="null"></param>
</member>
<member name="M:WPBakeryShortCode_Vc_Round_Chart.__construct(Pchp.Core.PhpValue)">
<summary>
WPBakeryShortCode_Vc_Round_Chart constructor.
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Row_Inner.template(Pchp.Core.PhpValue)">
<param name="content" type="string"></param>
</member>
<member name="M:WPBakeryShortCode_Vc_Row.__construct(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Row.content(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<param name="content" type="null"></param>
</member>
<member name="M:WPBakeryShortCode_Vc_Row.getLayoutsControl">
<summary>
This returs block controls
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Row.getColumnControls(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<param name="extended_css" type="string"></param>
</member>
<member name="M:WPBakeryShortCode_Vc_Row.contentAdmin(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<param name="content" type="null"></param>
</member>
<member name="M:WPBakeryShortCode_Vc_Row.cssAdminClass">
</member>
<member name="M:WPBakeryShortCode_Vc_Row.customAdminBockParams">
</member>
<member name="M:WPBakeryShortCode_Vc_Row.buildStyle(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<param name="bg_image" type="string"></param>
<param name="bg_color" type="string"></param>
<param name="bg_image_repeat" type="string"></param>
<param name="font_color" type="string"></param>
<param name="padding" type="string"></param>
<param name="margin_bottom" type="string"></param>
</member>
<member name="M:WPBakeryShortCode_Vc_Section.containerHtmlBlockParams(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Section.__construct(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Section.cssAdminClass">
</member>
<member name="M:WPBakeryShortCode_Vc_Section.getColumnControls(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<param name="controls" type="string"></param>
<param name="extended_css" type="string"></param>
</member>
<member name="M:WPBakeryShortCode_Vc_Section.contentAdmin(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<param name="content" type="null"></param>
</member>
<member name="M:WPBakeryShortCode_Vc_Separator.outputTitle(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Single_Image.__construct(Pchp.Core.PhpValue)">
<summary>
WPBakeryShortCode_Vc_Single_image constructor.
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Single_Image.singleParamHtmlHolder(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Single_Image.getImageSquareSize(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Single_Image.outputTitle(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Single_Image.outputTitleTrue(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Tab.customAdminBlockParams">
</member>
<member name="M:WPBakeryShortCode_Vc_Tab.mainHtmlBlockParams(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Tab.containerHtmlBlockParams(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Tab.getColumnControls(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<param name="extended_css" type="string"></param>
</member>
<member name="M:WPBakeryShortCode_Vc_Tabs.__construct(Pchp.Core.PhpValue)">
<summary>
WPBakeryShortCode_Vc_Tabs constructor.
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Tabs.contentAdmin(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<param name="content" type="null"></param>
</member>
<member name="M:WPBakeryShortCode_Vc_Tabs.getTabTemplate">
</member>
<member name="M:WPBakeryShortCode_Vc_Tabs.setCustomTabId(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Text_Separator.outputTitle(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Text_Separator.getVcIcon(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Toggle.outputTitle(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Toggle.getHeading(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Tour.getFileName">
</member>
<member name="M:WPBakeryShortCode_Vc_Tour.getTabTemplate">
</member>
<member name="M:WPBakeryShortCode_Vc_Tta_Accordion.getFileName">
</member>
<member name="M:WPBakeryShortCode_Vc_Tta_Accordion.containerContentClass">
</member>
<member name="M:WPBakeryShortCode_Vc_Tta_Accordion.resetVariables(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Tta_Accordion.setGlobalTtaInfo">
</member>
<member name="M:WPBakeryShortCode_Vc_Tta_Accordion.getColumnControls(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Override default getColumnControls to make it "simple"(blue), as single element has
</summary>
<param name="controls" type="string"></param>
<param name="extended_css" type="string"></param>
</member>
<member name="M:WPBakeryShortCode_Vc_Tta_Accordion.getTtaContainerClasses">
</member>
<member name="M:WPBakeryShortCode_Vc_Tta_Accordion.getTtaGeneralClasses">
</member>
<member name="M:WPBakeryShortCode_Vc_Tta_Accordion.getTtaPaginationClasses">
</member>
<member name="M:WPBakeryShortCode_Vc_Tta_Accordion.getWrapperAttributes">
</member>
<member name="M:WPBakeryShortCode_Vc_Tta_Accordion.getTemplateVariable(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Tta_Accordion.getParamColor(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Tta_Accordion.getParamStyle(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Tta_Accordion.getParamTitle(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Tta_Accordion.getParamContent(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Tta_Accordion.getParamShape(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Tta_Accordion.getParamSpacing(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Tta_Accordion.getParamGap(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Tta_Accordion.getParamNoFill(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Tta_Accordion.getParamCAlign(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Tta_Accordion.getParamPaginationTop(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Accordion doesn't have pagination
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Tta_Accordion.getParamPaginationBottom(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Accordion doesn't have pagination
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Tta_Accordion.getActiveSection(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Get currently active section (from $atts)
</summary>
<param name="strict_bounds" type="bool">If true, check for min/max bounds</param>
<returns>nth position (one-based) of active section</returns>
</member>
<member name="M:WPBakeryShortCode_Vc_Tta_Accordion.getParamPaginationList(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Tta_Accordion.outputTitle(Pchp.Core.PhpValue)">
<summary>
Override default outputTitle (also Icon). To remove anything, also Icon.
</summary>
<param name="title">- just for strict standards</param>
</member>
<member name="M:WPBakeryShortCode_Vc_Tta_Accordion.getAddAllowed">
<summary>
Check is allowed to add another element inside current element.
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Tta_Pageable.getTtaContainerClasses">
</member>
<member name="M:WPBakeryShortCode_Vc_Tta_Pageable.getTtaGeneralClasses">
</member>
<member name="M:WPBakeryShortCode_Vc_Tta_Pageable.getParamTabsList(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Disable all tabs
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Tta_Section.getFileName">
</member>
<member name="M:WPBakeryShortCode_Vc_Tta_Section.containerContentClass">
</member>
<member name="M:WPBakeryShortCode_Vc_Tta_Section.getElementClasses">
</member>
<member name="M:WPBakeryShortCode_Vc_Tta_Section.getParamContent(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Tta_Section.getParamTabId(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Tta_Section.getParamTitle(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Tta_Section.getParamIcon(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Tta_Section.getParamIconLeft(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Tta_Section.getParamIconRight(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Tta_Section.getParamSectionIsActive(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Section param active
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Tta_Section.getParamControlIconPosition(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Tta_Section.getParamControlIcon(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Tta_Section.getParamHeading(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Tta_Section.getParamBasicHeading(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Get basic heading
These are used in Pageable element inside content and are hidden from view
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Tta_Section.getAddAllowed">
<summary>
Check is allowed to add another element inside current element.
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Tta_Tabs.getWrapperAttributes">
</member>
<member name="M:WPBakeryShortCode_Vc_Tta_Tabs.getTtaGeneralClasses">
</member>
<member name="M:WPBakeryShortCode_Vc_Tta_Tabs.getParamTabPosition(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Tta_Tabs.getParamTabsListTop(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Tta_Tabs.getParamTabsListBottom(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Tta_Tabs.getParamPaginationTop(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Pagination is on top only if tabs are at bottom
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Tta_Tabs.getParamPaginationBottom(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Pagination is at bottom only if tabs are on top
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Tta_Tabs.constructIcon(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Tta_Tabs.getParamTabsList(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Tta_Tabs.getParamAlignment(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Tta_Tour.getTtaGeneralClasses">
</member>
<member name="M:WPBakeryShortCode_Vc_Tta_Tour.getParamControlsSize(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Tta_Tour.getParamTabsListLeft(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Tta_Tour.getParamTabsListRight(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryShortCode_Vc_Tta_Tour.getParamPaginationTop(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Never on top
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Tta_Tour.getParamPaginationBottom(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Always on bottom
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_TweetMeMe.contentInline(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<param name="content" type="null"></param>
</member>
<member name="M:WPBakeryShortCode_Vc_Wp_Text.convertTextAttributeToContent(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
This actually fixes #1537 by converting 'text' to 'content'
</summary>
</member>
<member name="M:Vc_Updater.setUpdateManager(Vc_Updating_Manager)">
<summary>
Setter for manager updater.
</summary>
<param name="updater" type="Vc_Updating_Manager"></param>
</member>
<member name="M:Vc_Updater.updateManager">
<summary>
Getter for manager updater.
</summary>
</member>
<member name="M:Vc_Updater.versionUrl">
<summary>
Get url for version validation
</summary>
</member>
<member name="M:Vc_Updater.getDownloadUrl">
<summary>
Get unique, short-lived download link
</summary>
<returns>JSON response or false if request failed</returns>
</member>
<member name="M:Vc_Updater.getUrl">
</member>
<member name="M:Vc_Updater.getUpdaterUrl(Pchp.Core.Context)">
</member>
<member name="M:Vc_Updater.preUpgradeFilter(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Get link to newest VC
</summary>
<param name="updater" type="WP_Upgrader"></param>
</member>
<member name="M:Vc_Updating_Manager.__construct(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Initialize a new instance of the WordPress Auto-Update class
</summary>
<param name="current_version" type="string"></param>
<param name="update_path" type="string"></param>
<param name="plugin_slug" type="string"></param>
</member>
<member name="M:Vc_Updating_Manager.check_update(Pchp.Core.PhpValue)">
<summary>
Add our self-hosted autoupdate plugin to the filter transient
</summary>
<returns>$ transient</returns>
</member>
<member name="M:Vc_Updating_Manager.check_info(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Add our self-hosted description to the filter
</summary>
<param name="false" type="bool"></param>
<param name="action" type="array"></param>
<param name="arg" type="object"></param>
</member>
<member name="M:Vc_Updating_Manager.getRemote_version">
<summary>
Return the remote version
</summary>
<returns>$remote_version</returns>
</member>
<member name="M:Vc_Updating_Manager.getRemote_information">
<summary>
Get information about the remote version
</summary>
</member>
<member name="M:Vc_Updating_Manager.addUpgradeMessageLink">
<summary>
Shows message on Wp plugins page with a link for updating from envato.
</summary>
</member>
<member name="M:WPBakeryShortCode_Vc_Acf.content(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<param name="content" type="null"></param>
</member>
<member name="M:Vc_Gitem_Acf_Shortcode.content(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<param name="content" type="null"></param>
</member>
<member name="M:Vc_Vendor_AdvancedCustomFields.load">
<summary>
Initializing actions when backend/frontend editor renders to enqueue fix-js file
</summary>
</member>
<member name="M:Vc_Vendor_AdvancedCustomFields.enqueueJs">
<summary>
Small fix for editor when try to change field
</summary>
</member>
<member name="M:Vc_Vendor_AdvancedCustomFields.mapGridItemShortcodes(Pchp.Core.PhpArray)">
<param name="shortcodes" type="array"></param>
</member>
<member name="M:Vc_Vendor_ContactForm7.load">
<summary>
Add action when contact form 7 is initialized to add shortcode.
</summary>
</member>
<member name="M:Vc_Vendor_ContactForm7.addShortcodeSettings(Pchp.Core.PhpValue)">
<summary>
Mapping settings for lean method.
</summary>
</member>
<member name="M:Vc_Vendor_Jwplayer.load">
<summary>
Dublicate jwplayer logic for editor, when used in frontend editor mode.
</summary>
</member>
<member name="M:Vc_Vendor_Jwplayer.renderShortcodes(Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Vendor_Jwplayer.wrapPlaceholder(Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Vendor_Jwplayer.renderPlaceholder">
</member>
<member name="M:Vc_Vendor_Jwplayer.renderShortcodesPreview(Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Vendor_Jwplayer.vc_load_iframe_jscss">
</member>
<member name="M:Vc_Vendor_Layerslider.load">
<summary>
Add layerslayer shortcode to WPBakery Page Builder, and add fix for ID in frontend editor
</summary>
</member>
<member name="M:Vc_Vendor_Layerslider.buildShortcode">
<summary>
Add shortcode and filters for layerslider id
</summary>
</member>
<member name="M:Vc_Vendor_Layerslider.setId(Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Vendor_Layerslider.setMarkupId(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Vendor_Layerslider.addShortcodeSettings(Pchp.Core.PhpValue)">
<summary>
Mapping settings for lean method.
</summary>
</member>
<member name="M:Vc_Vendor_Mqtranslate.setLanguages">
</member>
<member name="M:Vc_Vendor_Mqtranslate.qtransSwitch">
</member>
<member name="M:Vc_Vendor_NinjaForms.load">
<summary>
Implement interface, map ninja forms shortcode
</summary>
</member>
<member name="M:Vc_Vendor_NinjaForms.addShortcodeSettings(Pchp.Core.PhpValue)">
<summary>
Mapping settings for lean method.
</summary>
</member>
<member name="M:Vc_Vendor_NinjaForms.get_forms">
</member>
<member name="M:Vc_Vendor_NinjaForms.is_ninja_forms_three">
</member>
<member name="M:Vc_Vendor_NinjaForms.replaceIds(Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Vendor_QtranslateX.appendLangToUrl(Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Vendor_QtranslateX.generateSelectFrontend">
</member>
<member name="M:Vc_Vendor_QtranslateX.vcNavControlsFrontend(Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Vendor_QtranslateX.vcRenderEditButtonLink(Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Vendor_Qtranslate.setLanguages">
</member>
<member name="M:Vc_Vendor_Qtranslate.isValidPostType">
</member>
<member name="M:Vc_Vendor_Qtranslate.load">
</member>
<member name="M:Vc_Vendor_Qtranslate.qtransPostInit">
</member>
<member name="M:Vc_Vendor_Qtranslate.qtransSwitch">
</member>
<member name="M:Vc_Vendor_Qtranslate.enqueueJsBackend">
</member>
<member name="M:Vc_Vendor_Qtranslate.enqueueJsFrontend">
</member>
<member name="M:Vc_Vendor_Qtranslate.generateSelect">
</member>
<member name="M:Vc_Vendor_Qtranslate.generateSelectFrontend">
</member>
<member name="M:Vc_Vendor_Qtranslate.vcNavControls(Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Vendor_Qtranslate.vcNavControlsFrontend(Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Vendor_Qtranslate.getControlSelectDropdown">
</member>
<member name="M:Vc_Vendor_Qtranslate.getControlSelectDropdownFrontend">
</member>
<member name="M:Vc_Vendor_Qtranslate.vcRenderEditButtonLink(Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Vendor_Qtranslate.vcFrontendEditorRender">
</member>
<member name="M:Vc_Vendor_Qtranslate.filterPostContent(Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Vendor_Revslider.load">
<summary>
Add shortcode to WPBakery Page Builder also add fix for frontend to regenerate id of revslider.
</summary>
</member>
<member name="M:Vc_Vendor_Revslider.buildShortcode">
</member>
<member name="M:Vc_Vendor_Revslider.mapShortcode(Pchp.Core.PhpValue)">
<param name="revsliders" type="array"></param>
</member>
<member name="M:Vc_Vendor_Revslider.setId(Pchp.Core.PhpValue)">
<summary>
Replaces id of revslider for frontend editor.
</summary>
</member>
<member name="M:Vc_Vendor_Revslider.addShortcodeSettings(Pchp.Core.PhpValue)">
<summary>
Mapping settings for lean method.
</summary>
</member>
<member name="M:Vc_Vendor_Woocommerce.load">
</member>
<member name="M:Vc_Vendor_Woocommerce.addShopManagerRoleToEditable(Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Vendor_Woocommerce.addContentTabPageEditable(Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Vendor_Woocommerce.enqueueJsBackend">
</member>
<member name="M:Vc_Vendor_Woocommerce.enqueueJsFrontend">
</member>
<member name="M:Vc_Vendor_Woocommerce.addShortcodeSettings(Pchp.Core.PhpValue)">
<summary>
Add settings for shortcodes
</summary>
</member>
<member name="M:Vc_Vendor_Woocommerce.mapShortcodes">
<summary>
Add woocommerce shortcodes and hooks/filters for it.
</summary>
</member>
<member name="M:Vc_Vendor_Woocommerce.mapGridItemShortcodes(Pchp.Core.PhpArray)">
<param name="shortcodes" type="array"></param>
</member>
<member name="M:Vc_Vendor_Woocommerce.productAttributeFilterParamValue(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Defines default value for param if not provided. Takes from other param value.
</summary>
<param name="param_settings" type="array"></param>
</member>
<member name="M:Vc_Vendor_Woocommerce.getAttributeTermsAjax">
<summary>
Get attribute terms hooks from ajax request
</summary>
</member>
<member name="M:Vc_Vendor_Woocommerce.getAttributeTerms(Pchp.Core.PhpValue)">
<summary>
Get attribute terms suggester
</summary>
</member>
<member name="M:Vc_Vendor_Woocommerce.getCategoryChildsFull(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpAlias)">
<summary>
Get lists of categories.
</summary>
<param name="array" type="array"></param>
<param name="dropdown" type="array">- passed by  reference</param>
</member>
<member name="M:Vc_Vendor_Woocommerce.productIdDefaultValue(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Replace single product sku to id.
</summary>
</member>
<member name="M:Vc_Vendor_Woocommerce.productsIdsDefaultValue(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Replaces product skus to id's.
</summary>
</member>
<member name="M:Vc_Vendor_Woocommerce.productIdAutocompleteSuggester(Pchp.Core.PhpValue)">
<summary>
Suggester for autocomplete by id/name/title/sku
</summary>
<returns>- id's from products with title/sku.</returns>
</member>
<member name="M:Vc_Vendor_Woocommerce.productIdAutocompleteRender(Pchp.Core.PhpValue)">
<summary>
Find product by id
</summary>
</member>
<member name="M:Vc_Vendor_Woocommerce.productIdDefaultValueFromSkuToId(Pchp.Core.PhpValue)">
<summary>
Return ID of product by provided SKU of product.
</summary>
</member>
<member name="M:Vc_Vendor_Woocommerce.productIdAutocompleteSuggesterExactSku(Pchp.Core.PhpValue)">
<summary>
Find product by SKU
</summary>
</member>
<member name="M:Vc_Vendor_Woocommerce.productCategoryCategoryAutocompleteSuggester(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Autocomplete suggester to search product category by name/slug or id.
</summary>
<param name="slug" type="bool">- determines what output is needed
default false - return id of product category
true - return slug of product category</param>
</member>
<member name="M:Vc_Vendor_Woocommerce.productCategoryCategoryRenderByIdExact(Pchp.Core.PhpValue)">
<summary>
Search product category by id
</summary>
</member>
<member name="M:Vc_Vendor_Woocommerce.productCategoryCategoryAutocompleteSuggesterBySlug(Pchp.Core.PhpValue)">
<summary>
Suggester for autocomplete to find product category by id/name/slug but return found product category SLUG
</summary>
<returns>- slug of products categories.</returns>
</member>
<member name="M:Vc_Vendor_Woocommerce.productCategoryCategoryRenderBySlugExact(Pchp.Core.PhpValue)">
<summary>
Search product category by slug.
</summary>
</member>
<member name="M:Vc_Vendor_Woocommerce.productCategoryTermOutput(Pchp.Core.PhpValue)">
<summary>
Return product category value|label array
</summary>
</member>
<member name="M:Vc_Vendor_Woocommerce.getProductsFieldsList(Pchp.Core.Context)">
</member>
<member name="M:Vc_Vendor_Woocommerce.getProductFieldLabel(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Vendor_Woocommerce.getOrderFieldsList(Pchp.Core.Context)">
</member>
<member name="M:Vc_Vendor_Woocommerce.getOrderFieldLabel(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Vendor_WPML.appendLangToUrlGrid(Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Vendor_WPML.filterMediaId(Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Vendor_YoastSeo.load">
<summary>
Add filter for yoast.
</summary>
</member>
<member name="M:Vc_Vendor_YoastSeo.filterResults(Pchp.Core.PhpValue)">
<summary>
Properly parse content to detect images/text keywords.
</summary>
</member>
<member name="M:Vc_Vendor_YoastSeo.enqueueJs">
</member>
<member name="M:Vc_Vendor_YoastSeo.filterSitemapUrlImages(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Gitem_Woocommerce_Shortcode.content(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<param name="content" type="null"></param>
</member>
<member name="M:Vc_Color_Helper.__construct(Pchp.Core.PhpValue)">
<summary>
Instantiates the class with a HEX value
</summary>
<param name="hex" type="string"></param>
<exception cref="Exception">"Bad color format".</exception>
</member>
<member name="M:Vc_Color_Helper.clamp(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<param name="max" type="int"></param>
</member>
<member name="M:Vc_Color_Helper.hexToHsl(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Given a HEX string returns a HSL array equivalent.
</summary>
<param name="color" type="string"></param>
<returns>HSL associative array</returns>
</member>
<member name="M:Vc_Color_Helper.hslToHex(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Given a HSL associative array returns the equivalent HEX string
</summary>
<param name="hsl" type="array"></param>
<returns>HEX string</returns>
<exception cref="Exception">"Bad HSL Array".</exception>
</member>
<member name="M:Vc_Color_Helper.hexToRgb(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Given a HEX string returns a RGB array equivalent.
</summary>
<param name="color" type="string"></param>
<returns>RGB associative array</returns>
</member>
<member name="M:Vc_Color_Helper.rgbToHex(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Given an RGB associative array returns the equivalent HEX string
</summary>
<param name="rgb" type="array"></param>
<returns>RGB string</returns>
<exception cref="Exception">"Bad RGB Array".</exception>
</member>
<member name="M:Vc_Color_Helper.darken(Pchp.Core.PhpValue)">
<summary>
Given a HEX value, returns a darker color. If no desired amount provided, then the color halfway between
given HEX and black will be returned.
</summary>
<param name="amount" type="int"></param>
<returns>Darker HEX value</returns>
</member>
<member name="M:Vc_Color_Helper.lighten(Pchp.Core.PhpValue)">
<summary>
Given a HEX value, returns a lighter color. If no desired amount provided, then the color halfway between
given HEX and white will be returned.
</summary>
<param name="amount" type="int"></param>
<returns>Lighter HEX value</returns>
</member>
<member name="M:Vc_Color_Helper.mix(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Given a HEX value, returns a mixed color. If no desired amount provided, then the color mixed by this ratio
</summary>
<param name="hex2" type="string">Secondary HEX value to mix with</param>
<param name="amount" type="int">= -100..0..+100</param>
<returns>mixed HEX value</returns>
</member>
<member name="M:Vc_Color_Helper.makeGradient(Pchp.Core.PhpValue)">
<summary>
Creates an array with two shades that can be used to make a gradient
</summary>
<param name="amount" type="int">Optional percentage amount you want your contrast color</param>
<returns>An array with a 'light' and 'dark' index</returns>
</member>
<member name="M:Vc_Color_Helper.isLight(Pchp.Core.PhpValue)">
<summary>
Returns whether or not given color is considered "light"
</summary>
<param name="color" type="string|Boolean"></param>
</member>
<member name="M:Vc_Color_Helper.isDark(Pchp.Core.PhpValue)">
<summary>
Returns whether or not a given color is considered "dark"
</summary>
<param name="color" type="string|Boolean"></param>
</member>
<member name="M:Vc_Color_Helper.complementary">
<summary>
Returns the complimentary color
</summary>
<returns>Complementary hex color</returns>
</member>
<member name="M:Vc_Color_Helper.getHsl">
<summary>
Returns your color's HSL array
</summary>
</member>
<member name="M:Vc_Color_Helper.getHex">
<summary>
Returns your original color
</summary>
</member>
<member name="M:Vc_Color_Helper.getRgb">
<summary>
Returns your color's RGB array
</summary>
</member>
<member name="M:Vc_Color_Helper.darken_private(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Darkens a given HSL array
</summary>
<param name="hsl" type="array"></param>
<param name="amount" type="int"></param>
<returns>$hsl</returns>
</member>
<member name="M:Vc_Color_Helper.lighten_private(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Lightens a given HSL array
</summary>
<param name="hsl" type="array"></param>
<param name="amount" type="int"></param>
<returns>$hsl</returns>
</member>
<member name="M:Vc_Color_Helper.mix_private(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Mix 2 rgb colors and return an rgb color
</summary>
<param name="rgb1" type="array"></param>
<param name="rgb2" type="array"></param>
<param name="amount" type="int">ranged -100..0..+100</param>
<returns>$rgb

ported from http://phpxref.pagelines.com/nav.html?includes/class.colors.php.source.html</returns>
</member>
<member name="M:Vc_Color_Helper.huetorgb_private(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Given a Hue, returns corresponding RGB value
</summary>
<param name="v1" type="int"></param>
<param name="v2" type="int"></param>
<param name="vH" type="int"></param>
</member>
<member name="M:Vc_Color_Helper.check_hex_private(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
You need to check if you were given a good hex string
</summary>
<param name="hex" type="string"></param>
<returns>Color</returns>
<exception cref="Exception">"Bad color format".</exception>
</member>
<member name="M:vcImageFilter.__construct(Pchp.Core.PhpAlias)">
<summary>
run constructor
</summary>
</member>
<member name="M:vcImageFilter.getImage">
<summary>
Get the current image resource
</summary>
</member>
<member name="M:Vc_ParamAnimation.animationStyles">
<summary>
Define available animation effects
</summary>
</member>
<member name="M:Vc_ParamAnimation.groupStyleByType(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<param name="styles" type="array">- array of styles to group</param>
<param name="type" type="string|array">- what type to return</param>
</member>
<member name="M:Vc_ParamAnimation.__construct(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Set variables and register animate-css asset
</summary>
</member>
<member name="M:Vc_ParamAnimation.render">
<summary>
Render edit form output
</summary>
</member>
<member name="M:Vc_AutoComplete.__construct(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<param name="settings" type="array">- param settings (from vc_map)</param>
<param name="value" type="string">- current param value</param>
<param name="tag" type="string">- shortcode name(base)</param>
</member>
<member name="M:Vc_AutoComplete.render">
</member>
<member name="M:Vc_Column_Offset.__construct(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Column_Offset.render">
</member>
<member name="M:Vc_Column_Offset.valueData">
</member>
<member name="M:Vc_Column_Offset.sizeControl(Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Column_Offset.offsetControl(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryVisualComposerCssEditor?.settings(Pchp.Core.PhpValue)">
<summary>
Setters/Getters {{
</summary>
<param name="settings" type="null"></param>
</member>
<member name="M:WPBakeryVisualComposerCssEditor?.setting(Pchp.Core.PhpValue)">
</member>
<member name="M:WPBakeryVisualComposerCssEditor?.value(Pchp.Core.PhpValue)">
<param name="value" type="null"></param>
</member>
<member name="M:WPBakeryVisualComposerCssEditor?.params(Pchp.Core.PhpValue)">
<param name="values" type="null"></param>
</member>
<member name="M:WPBakeryVisualComposerCssEditor?.render">
<summary>
vc_filter: vc_css_editor - hook to override output of this method
</summary>
</member>
<member name="M:WPBakeryVisualComposerCssEditor?.getBackgroundImageControl">
</member>
<member name="M:WPBakeryVisualComposerCssEditor?.getBorderRadiusOptions">
</member>
<member name="M:WPBakeryVisualComposerCssEditor?.getBorderStyleOptions">
</member>
<member name="M:WPBakeryVisualComposerCssEditor?.getBackgroundStyleOptions">
</member>
<member name="M:WPBakeryVisualComposerCssEditor?.onionLayout">
</member>
<member name="M:WPBakeryVisualComposerCssEditor?.layerControls(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<param name="prefix" type="string"></param>
</member>
<member name="M:Vc_Font_Container.render(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Font_Container._vc_font_container_get_web_safe_fonts">
<summary>
If field 'font_family' is used this is list of fonts available
To modify this list, you should use add_filter('vc_font_container_get_fonts_filter','your_custom_function');
vc_filter: vc_font_container_get_fonts_filter - to modify list of fonts
</summary>
<returns>list of fonts</returns>
</member>
<member name="M:Vc_Font_Container._vc_font_container_get_allowed_tags">
<summary>
If 'tag' field used this is list of allowed tags
To modify this list, you should use add_filter('vc_font_container_get_allowed_tags','your_custom_function');
vc_filter: vc_font_container_get_allowed_tags - to modify list of allowed tags by default
</summary>
<returns>list of allowed tags</returns>
</member>
<member name="M:Vc_Font_Container._vc_font_container_parse_attributes(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Google_Fonts.render(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Google_Fonts._vc_google_fonts_get_fonts">
<summary>
Load google fonts list for param
To change this list use add_filters('vc_google_fonts_get_fonts_filter','your_custom_function'); and change array
vc_filter: vc_google_fonts_get_fonts_filter
</summary>
</member>
<member name="M:Vc_Google_Fonts._vc_google_fonts_parse_attributes(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_IconPicker.__construct(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<param name="settings">- param field data array</param>
<param name="value">- param field value</param>
</member>
<member name="M:Vc_IconPicker.setDefaults">
<summary>
Set default function will extend current settings with defaults
It can be used in Vc_IconPicker::render, but also it is passed to input
field and was hooked in composer-atts.js file See vc.atts.iconpicker in
wp-content/plugins/js_composer/assets/js/params/composer-atts.js init
method
- it initializes javascript logic, you can provide ANY default param to
it with 'settings' key
</summary>
</member>
<member name="M:Vc_IconPicker.render">
<summary>
Render edit form field type 'iconpicker' with selected settings and
provided value. It uses javascript file vc-icon-picker
(vc_iconpicker_base_register_js, vc_iconpicker_editor_jscss), see
wp-content/plugins/js_composer/include/autoload/hook-vc-iconpicker-param.php
folder
</summary>
<returns>- rendered param field for editor panel</returns>
</member>
<member name="M:VcLoopQueryBuilder.__construct(Pchp.Core.PhpValue)">
</member>
<member name="M:VcLoopQueryBuilder.parse_size(Pchp.Core.PhpValue)">
<summary>
Pages count
</summary>
</member>
<member name="M:VcLoopQueryBuilder.parse_order_by(Pchp.Core.PhpValue)">
<summary>
Sorting field
</summary>
</member>
<member name="M:VcLoopQueryBuilder.parse_order(Pchp.Core.PhpValue)">
<summary>
Sorting order
</summary>
</member>
<member name="M:VcLoopQueryBuilder.parse_post_type(Pchp.Core.PhpValue)">
<summary>
By post types
</summary>
</member>
<member name="M:VcLoopQueryBuilder.parse_authors(Pchp.Core.PhpValue)">
<summary>
By author
</summary>
</member>
<member name="M:VcLoopQueryBuilder.parse_categories(Pchp.Core.PhpValue)">
<summary>
By categories
</summary>
</member>
<member name="M:VcLoopQueryBuilder.parse_tax_query(Pchp.Core.PhpValue)">
<summary>
By taxonomies
</summary>
</member>
<member name="M:VcLoopQueryBuilder.parse_tags(Pchp.Core.PhpValue)">
<summary>
By tags ids
</summary>
</member>
<member name="M:VcLoopQueryBuilder.parse_by_id(Pchp.Core.PhpValue)">
<summary>
By posts ids
</summary>
</member>
<member name="M:VcLoopQueryBuilder.excludeId(Pchp.Core.PhpValue)">
</member>
<member name="M:VcLoopQueryBuilder.stringToArray(Pchp.Core.PhpValue)">
<summary>
Converts string to array. Filters empty arrays values
</summary>
</member>
<member name="M:VcLoopQueryBuilder.build">
</member>
<member name="M:VcLoopSettings.__construct(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<param name="settings" type="array"></param>
</member>
<member name="M:VcLoopSettings.replaceLockedValue(Pchp.Core.PhpValue)">
</member>
<member name="M:VcLoopSettings.getLabel(Pchp.Core.PhpValue)">
</member>
<member name="M:VcLoopSettings.getSettings(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:VcLoopSettings.parseString(Pchp.Core.PhpValue)">
</member>
<member name="M:VcLoopSettings.parseDropDown(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<param name="options" type="array"></param>
</member>
<member name="M:VcLoopSettings.parseMultiSelect(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<param name="options" type="array"></param>
</member>
<member name="M:VcLoopSettings.parse_order_by(Pchp.Core.PhpValue)">
</member>
<member name="M:VcLoopSettings.parse_order(Pchp.Core.PhpValue)">
</member>
<member name="M:VcLoopSettings.parse_post_type(Pchp.Core.PhpValue)">
</member>
<member name="M:VcLoopSettings.parse_ignore_sticky_posts(Pchp.Core.PhpValue)">
</member>
<member name="M:VcLoopSettings.parse_authors(Pchp.Core.PhpValue)">
</member>
<member name="M:VcLoopSettings.parse_categories(Pchp.Core.PhpValue)">
</member>
<member name="M:VcLoopSettings.parse_tags(Pchp.Core.PhpValue)">
</member>
<member name="M:VcLoopSettings.parse_tax_query(Pchp.Core.PhpValue)">
</member>
<member name="M:VcLoopSettings.parse_by_id(Pchp.Core.PhpValue)">
</member>
<member name="M:VcLoopSettings.render">
</member>
<member name="M:VcLoopSettings.getContent">
</member>
<member name="M:VcLoopSettings.getTaxonomies(Pchp.Core.Context)">
<summary>
get list of taxonomies which has no tags and categories items.
</summary>
</member>
<member name="M:VcLoopSettings.buildDefault(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="M:VcLoopSettings.buildWpQuery(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<param name="exclude_id" type="bool"></param>
</member>
<member name="M:VcLoopSettings.parseData(Pchp.Core.Context,Pchp.Core.PhpValue)">
</member>
<member name="M:VcLoopSuggestions.__construct(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:VcLoopSuggestions.get_authors(Pchp.Core.PhpValue)">
</member>
<member name="M:VcLoopSuggestions.get_categories(Pchp.Core.PhpValue)">
</member>
<member name="M:VcLoopSuggestions.get_tags(Pchp.Core.PhpValue)">
</member>
<member name="M:VcLoopSuggestions.get_tax_query(Pchp.Core.PhpValue)">
</member>
<member name="M:VcLoopSuggestions.get_by_id(Pchp.Core.PhpValue)">
</member>
<member name="M:VcLoopSuggestions.render">
</member>
<member name="M:WpbakeryShortcodeParams.getRequiredInitParams(Pchp.Core.Context)">
<summary>
Get list of params that need to be initialized
</summary>
</member>
<member name="M:WpbakeryShortcodeParams.addField(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Create new attribute type
</summary>
<param name="name">- attribute name</param>
<param name="form_field_callback">- hook, will be called when settings form is shown and attribute added to shortcode
param list</param>
<param name="script_url">- javascript file url which will be attached at the end of settings form.</param>
<returns>- return true if attribute type created</returns>
</member>
<member name="M:WpbakeryShortcodeParams.renderSettingsField(Pchp.Core.Context,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Calls hook for attribute type
</summary>
<param name="name">- attribute name</param>
<param name="param_settings">- attribute settings from shortcode</param>
<param name="param_value">- attribute value</param>
<param name="tag">- attribute tag</param>
<returns>- returns html which will be render in hook</returns>
</member>
<member name="M:WpbakeryShortcodeParams.getScripts(Pchp.Core.Context)">
<summary>
List of javascript files urls for shortcode attributes.
</summary>
<returns>- list of js scripts</returns>
</member>
<member name="M:Vc_ParamGroup_Edit_Form_Fields.__construct(Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_ParamGroup_Edit_Form_Fields.getParamGroupAttributeValue(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Get shortcode attribute value wrapper for params group.
This function checks if value isn't set then it uses std or value fields in param settings.
</summary>
<param name="value" type="null"></param>
<returns>mixed;</returns>
</member>
<member name="M:Vc_ParamGroup.__construct(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_ParamGroup.params_to_arr(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_ParamGroup.render">
</member>
<member name="M:Vc_Grid_Element.shortcodes">
</member>
<member name="M:Vc_Grid_Element.setTemplate(Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Grid_Element.template">
</member>
<member name="M:Vc_Grid_Element.parseTemplate(Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Grid_Element.renderItem(WP_Post)">
<param name="post" type="\WP_Post"></param>
</member>
<member name="M:Vc_Grid_Element.renderParam">
</member>
<member name="M:Vc_Grid_Element.setGridAttributes(Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Grid_Element.gridAttribute(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<param name="default" type="string"></param>
</member>
<member name="M:Vc_Grid_Element.setAttribute(Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Grid_Element.attributes">
</member>
<member name="M:Vc_Grid_Element.attribute(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Grid_Element.setIsEnd(Pchp.Core.PhpValue)">
<param name="is_end" type="bool"></param>
</member>
<member name="M:Vc_Grid_Element.isEnd">
</member>
<member name="M:Vc_Grid_Element.setShortcodes">
<summary>
Set elements templates.
</summary>
</member>
<member name="M:Vc_Grid_Element.vcGitemRowShortcode(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<param name="content" type="string"></param>
</member>
<member name="M:Vc_Grid_Element.vcGitemRowTemplate">
</member>
<member name="M:Vc_Grid_Element.vcGitemColShortcode(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<param name="content" type="string"></param>
</member>
<member name="M:Vc_Grid_Element.vcGitemColTemplate">
</member>
<member name="M:Vc_Grid_Element.vcGitemPostTitleShortcode(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<param name="content" type="string"></param>
</member>
<member name="M:Vc_Grid_Element.vcDefaultTemplate(Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Grid_Element.elementControls(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<param name="theme" type="null"></param>
</member>
<member name="M:Vc_Grid_Item.shortcodes">
<summary>
Get shortcodes to build vc grid item templates.
</summary>
</member>
<member name="M:Vc_Grid_Item.addVcIconShortcodesTemplates(Pchp.Core.PhpValue)">
<summary>
Used by filter vc_shortcode_set_template_vc_icon to set custom template for vc_icon shortcode.
</summary>
</member>
<member name="M:Vc_Grid_Item.addVcButton2ShortcodesTemplates(Pchp.Core.PhpValue)">
<summary>
Used by filter vc_shortcode_set_template_vc_button2 to set custom template for vc_button2 shortcode.
</summary>
</member>
<member name="M:Vc_Grid_Item.addVcSingleImageShortcodesTemplates(Pchp.Core.PhpValue)">
<summary>
Used by filter vc_shortcode_set_template_vc_single_image to set custom template for vc_single_image shortcode.
</summary>
</member>
<member name="M:Vc_Grid_Item.addVcCustomHeadingShortcodesTemplates(Pchp.Core.PhpValue)">
<summary>
Used by filter vc_shortcode_set_template_vc_custom_heading to set custom template for vc_custom_heading
shortcode.
</summary>
</member>
<member name="M:Vc_Grid_Item.addVcBtnShortcodesTemplates(Pchp.Core.PhpValue)">
<summary>
Used by filter vc_shortcode_set_template_vc_button2 to set custom template for vc_button2 shortcode.
</summary>
</member>
<member name="M:Vc_Grid_Item.mapShortcodes">
<summary>
Map shortcodes for vc_grid_item param type.
</summary>
</member>
<member name="M:Vc_Grid_Item.predefinedTemplates(Pchp.Core.Context)">
<summary>
Get list of predefined templates.
</summary>
</member>
<member name="M:Vc_Grid_Item.predefinedTemplate(Pchp.Core.Context,Pchp.Core.PhpValue)">
<param name="id">- Predefined templates id</param>
</member>
<member name="M:Vc_Grid_Item.setTemplateById(Pchp.Core.PhpValue)">
<summary>
Set template which should grid used when vc_grid_item param value is rendered.
</summary>
</member>
<member name="M:Vc_Grid_Item.setTemplate(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Setter for template attribute.
</summary>
</member>
<member name="M:Vc_Grid_Item.template">
<summary>
Getter for template attribute.
</summary>
</member>
<member name="M:Vc_Grid_Item.addShortcodesCustomCss">
<summary>
Add custom css from shortcodes that were mapped for vc grid item.
</summary>
</member>
<member name="M:Vc_Grid_Item.parseTemplate(Pchp.Core.PhpValue)">
<summary>
Generates html with template's variables for rendering new project.
</summary>
</member>
<member name="M:Vc_Grid_Item.templateVariablesRegex">
<summary>
Regexp for variables.
</summary>
</member>
<member name="M:Vc_Grid_Item.getTemplateVariables">
<summary>
Get default variables.
</summary>
</member>
<member name="M:Vc_Grid_Item.renderItem(WP_Post)">
<summary>
Render item by replacing template variables for exact post.
</summary>
<param name="post" type="WP_Post"></param>
</member>
<member name="M:Vc_Grid_Item.addAttributesFilters">
<summary>
Adds filters to build templates variables values.
</summary>
</member>
<member name="M:Vc_Grid_Item.setGridAttributes(Pchp.Core.PhpValue)">
<summary>
Getter for Grid shortcode attributes.
</summary>
</member>
<member name="M:Vc_Grid_Item.gridAttribute(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Setter for Grid shortcode attributes.
</summary>
<param name="default" type="string"></param>
</member>
<member name="M:Vc_Grid_Item.attribute(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Get attribute value for WP_post object.
</summary>
<param name="data" type="string"></param>
</member>
<member name="M:Vc_Grid_Item.setIsEnd(Pchp.Core.PhpValue)">
<summary>
Set that this is last items in the grid. Used for load more button and lazy loading.
</summary>
<param name="is_end" type="bool"></param>
</member>
<member name="M:Vc_Grid_Item.isEnd">
<summary>
Checks is the end.
</summary>
</member>
<member name="M:WpbMap_Grid_Item.generateGitemUserData(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Generates list of shortcodes only for Grid element.
This method parses the list of mapped shortcodes and creates categories list for users.
Also it checks is 'is_grid_item_element' attribute true.
</summary>
<param name="force" type="bool">- force data generation even data already generated.</param>
</member>
<member name="M:WpbMap_Grid_Item.getSortedGitemUserShortCodes(Pchp.Core.Context)">
<summary>
Get sorted list of mapped shortcode settings grid element
Sorting depends on the weight attribute and mapping order.
</summary>
</member>
<member name="M:WpbMap_Grid_Item.getGitemUserShortCodes(Pchp.Core.Context)">
<summary>
Get list of mapped shortcode settings for current user.
</summary>
<returns>- associated array of shortcodes settings with tag as the key.</returns>
</member>
<member name="M:WpbMap_Grid_Item.getGitemUserCategories(Pchp.Core.Context)">
<summary>
Get all categories for current user.
Category is added to the list when at least one shortcode of this category is allowed for current user
by Vc access rules.
</summary>
</member>
<member name="M:Vc_Grid_Item_Editor.addHooksSettings">
<summary>
This method is called to add hooks.
</summary>
</member>
<member name="M:Vc_Grid_Item_Editor.render(Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Grid_Item_Editor.editorEnabled">
</member>
<member name="M:Vc_Grid_Item_Editor.createPostType(Pchp.Core.Context)">
<summary>
Create post type and new item in the admin menu.
</summary>
</member>
<member name="M:Vc_Grid_Item_Editor.getPostTypesLabels(Pchp.Core.Context)">
</member>
<member name="M:Vc_Grid_Item_Editor.isValidPostType(Pchp.Core.PhpValue)">
<summary>
Rewrites validation for correct post_type of th post.
</summary>
<param name="type" type="string"></param>
</member>
<member name="M:Vc_Grid_Item_Editor.postType(Pchp.Core.Context)">
<summary>
Get post type for Vc grid element editor.
</summary>
</member>
<member name="M:Vc_Grid_Item_Editor.addMetaBox">
<summary>
Calls add_meta_box to create Editor block.
</summary>
</member>
<member name="M:Vc_Grid_Item_Editor.shortcodesControls">
<summary>
Change order of the controls for shortcodes admin block.
</summary>
</member>
<member name="M:Vc_Grid_Item_Editor.renderEditor(Pchp.Core.PhpValue)">
<summary>
Output html for backend editor meta box.
</summary>
<param name="post" type="null|int"></param>
</member>
<member name="M:Vc_Grid_Item_Editor.accessCheckShortcodeEdit(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Grid_Item_Editor.accessCheckShortcodeAll(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Grid_Item_Editor.renderEditorFooter">
<summary>
Output required html and js content for VC editor.
Here comes panels, modals and js objects with data for mapped shortcodes.
</summary>
</member>
<member name="M:Vc_Grid_Item_Editor.templatesEditor">
</member>
<member name="M:Vc_Grid_Item_Editor.loadPredefinedTemplate(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Grid_Item_Editor.loadTemplate(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Grid_Item_Editor.templatePreviewPath(Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Grid_Item_Preview.addCssBackgroundImage(Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Grid_Item_Preview.addImageUrl(Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Grid_Item_Preview.addImage(Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Grid_Item_Preview.disableContentLink(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Grid_Item_Preview.disableRealContentLink(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Grid_Item_Preview.disableGitemZoneLink(Pchp.Core.PhpValue)">
<summary>
Used for filter: vc_gitem_zone_image_block_link
</summary>
</member>
<member name="M:Vc_Grid_Item_Preview.mockingPost">
</member>
<member name="M:Vc_Grid_Item_Preview.getTheCategories(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Grid_Item_Preview.addPlaceholderImage(Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Navbar_Grid_Item.getControlTemplates">
</member>
<member name="M:Vc_Navbar_Grid_Item.getControlPreviewTemplate">
</member>
<member name="M:Vc_Navbar_Grid_Item.getControlEdit">
</member>
<member name="M:Vc_Navbar_Grid_Item.getControlSaveBackend">
</member>
<member name="M:Vc_Navbar_Grid_Item.getControlPreviewItemWidth">
</member>
<member name="M:Vc_Navbar_Grid_Item.getControlAnimationList">
</member>
<member name="M:Vc_Add_Element_Box_Grid_Item.shortcodes">
<summary>
Get shortcodes from param type vc_grid_item
</summary>
</member>
<member name="M:Vc_Add_Element_Box_Grid_Item.getCategories">
<summary>
Get categories list from mapping data.
</summary>
</member>
<member name="M:Vc_Add_Element_Box_Grid_Item.getPartState">
</member>
<member name="M:Vc_Templates_Editor_Grid_Item.renderTemplateBlock(Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Templates_Editor_Grid_Item.renderTemplateWindowGrid(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Output rendered template in modal dialog
</summary>
</member>
<member name="M:Vc_Templates_Editor_Grid_Item.renderTemplateWindowGridTemplate(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
</member>
<member name="M:Vc_Templates_Editor_Grid_Item.load(Pchp.Core.PhpValue)">
<param name="template_id" type="bool"></param>
</member>
<member name="M:Vc_Templates_Editor_Grid_Item.loadCustomTemplate(Pchp.Core.PhpValue)">
<param name="template_id" type="bool"></param>
</member>
<member name="M:Vc_Templates_Editor_Grid_Item.getAllTemplates">
</member>
<member name="M:Vc_Templates_Editor_Grid_Item.getCustomTemplateList">
</member>
<member name="M:Vc_Templates_Editor_Grid_Item.getGridTemplates">
</member>
<member name="M:Manual__IP_Course?.is_plugin_activated(Pchp.Core.PhpValue)">
<summary>
Check LearnPress plugin activated.
</summary>
<returns>true if plugin activated</returns>
</member>
<member name="M:TGM_Plugin_Activation?.__construct">
<summary>
Adds a reference of this object to $instance, populates default strings,
does the tgmpa_init action hook, and hooks in the interactions to init.
{@internal This method should be `protected`, but as too many TGMPA implementations
haven't upgraded beyond v2.3.6 yet, this gives backward compatibility issues.
Reverted back to public for the time being.}}
</summary>
</member>
<member name="M:TGM_Plugin_Activation?.__set(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Magic method to (not) set protected properties from outside of this class.
{@internal hackedihack... There is a serious bug in v2.3.2 - 2.3.6  where the `menu` property
is being assigned rather than tested in a conditional, effectively rendering it useless.
This 'hack' prevents this from happening.}}
</summary>
<param name="name" type="string">Name of an inaccessible property.</param>
<param name="value" type="mixed">Value to assign to the property.</param>
<returns>Silently fail to set the property when this is tried from outside of this class context.
(Inside this class context, the __set() method if not used as there is direct access.)</returns>
</member>
<member name="M:TGM_Plugin_Activation?.__get(Pchp.Core.PhpValue)">
<summary>
Magic method to get the value of a protected property outside of this class context.
</summary>
<param name="name" type="string">Name of an inaccessible property.</param>
<returns>The property value.</returns>
</member>
<member name="M:TGM_Plugin_Activation?.init">
<summary>
Initialise the interactions between this class and WordPress.
Hooks in three new methods for the class: admin_menu, notices and styles.
</summary>
</member>
<member name="M:TGM_Plugin_Activation?.load_textdomain">
<summary>
Load translations.
</summary>
</member>
<member name="M:TGM_Plugin_Activation?.correct_plugin_mofile(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Correct the .mo file name for (must-use) plugins.
Themese use `/path/{locale}.mo` while plugins use `/path/{text-domain}-{locale}.mo`.

{@internal IMPORTANT! If this function changes, review the regex in the custom TGMPA
generator on the website.}}
</summary>
<param name="mofile" type="string">Full path to the target mofile.</param>
<param name="domain" type="string">The domain for which a language file is being loaded.</param>
<returns>$mofile</returns>
</member>
<member name="M:TGM_Plugin_Activation?.overload_textdomain_mofile(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Potentially overload the fall-back translation file for the current language.
WP, by default since WP 3.7, will load a local translation first and if none
can be found, will try and find a translation in the /wp-content/languages/ directory.
As this library is theme/plugin agnostic, translation files for TGMPA can exist both
in the WP_LANG_DIR /plugins/ subdirectory as well as in the /themes/ subdirectory.

This method makes sure both directories are checked.

{@internal IMPORTANT! If this function changes, review the regex in the custom TGMPA
generator on the website.}}
</summary>
<param name="mofile" type="string">Full path to the target mofile.</param>
<param name="domain" type="string">The domain for which a language file is being loaded.</param>
<returns>$mofile</returns>
</member>
<member name="M:TGM_Plugin_Activation?.add_plugin_action_link_filters">
<summary>
Hook in plugin action link filters for the WP native plugins page.
- Prevent activation of plugins which don't meet the minimum version requirements.
- Prevent deactivation of force-activated plugins.
- Add update notice if update available.
</summary>
</member>
<member name="M:TGM_Plugin_Activation?.filter_plugin_action_links_activate(Pchp.Core.PhpValue)">
<summary>
Remove the 'Activate' link on the WP native plugins page if the plugin does not meet the
minimum version requirements.
</summary>
<param name="actions" type="array">Action links.</param>
</member>
<member name="M:TGM_Plugin_Activation?.filter_plugin_action_links_deactivate(Pchp.Core.PhpValue)">
<summary>
Remove the 'Deactivate' link on the WP native plugins page if the plugin has been set to force activate.
</summary>
<param name="actions" type="array">Action links.</param>
</member>
<member name="M:TGM_Plugin_Activation?.filter_plugin_action_links_update(Pchp.Core.PhpValue)">
<summary>
Add a 'Requires update' link on the WP native plugins page if the plugin does not meet the
minimum version requirements.
</summary>
<param name="actions" type="array">Action links.</param>
</member>
<member name="M:TGM_Plugin_Activation?.admin_init">
<summary>
Handles calls to show plugin information via links in the notices.
We get the links in the admin notices to point to the TGMPA page, rather
than the typical plugin-install.php file, so we can prepare everything
beforehand.

WP does not make it easy to show the plugin information in the thickbox -
here we have to require a file that includes a function that does the
main work of displaying it, enqueue some styles, set up some globals and
finally call that function before exiting.

Down right easy once you know how...

Returns early if not the TGMPA page.
</summary>
<returns>Returns early if not the TGMPA page.</returns>
</member>
<member name="M:TGM_Plugin_Activation?.thickbox">
<summary>
Enqueue thickbox scripts/styles for plugin info.
Thickbox is not automatically included on all admin pages, so we must
manually enqueue it for those pages.

Thickbox is only loaded if the user has not dismissed the admin
notice or if there are any plugins left to install and activate.
</summary>
</member>
<member name="M:TGM_Plugin_Activation?.admin_menu">
<summary>
Adds submenu page if there are plugin actions to take.
This method adds the submenu page letting users know that a required
plugin needs to be installed.

This page disappears once the plugin has been installed and activated.
</summary>
<returns>Return early if user lacks capability to install a plugin.</returns>
</member>
<member name="M:TGM_Plugin_Activation?.add_admin_menu(Pchp.Core.PhpArray)">
<summary>
Add the menu item.
{@internal IMPORTANT! If this function changes, review the regex in the custom TGMPA
generator on the website.}}
</summary>
<param name="args" type="array">Menu item configuration.</param>
</member>
<member name="M:TGM_Plugin_Activation?.install_plugins_page">
<summary>
Echoes plugin installation form.
This method is the callback for the admin_menu method function.
This displays the admin page and form area where the user can select to install and activate the plugin.
Aborts early if we're processing a plugin installation action.
</summary>
<returns>Aborts early if we're processing a plugin installation action.</returns>
</member>
<member name="M:TGM_Plugin_Activation?.do_plugin_install">
<summary>
Installs, updates or activates a plugin depending on the action link clicked by the user.
Checks the $_GET variable to see which actions have been
passed and responds with the appropriate method.

Uses WP_Filesystem to process and handle the plugin installation
method.
</summary>
<returns>True on success, false on failure.</returns>
</member>
<member name="M:TGM_Plugin_Activation?.inject_update_info(Pchp.Core.PhpValue)">
<summary>
Inject information into the 'update_plugins' site transient as WP checks that before running an update.
</summary>
<param name="plugins" type="array">The plugin information for the plugins which are to be updated.</param>
</member>
<member name="M:TGM_Plugin_Activation?.maybe_adjust_source_dir(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Adjust the plugin directory name if necessary.
The final destination directory of a plugin is based on the subdirectory name found in the
(un)zipped source. In some cases - most notably GitHub repository plugin downloads -, this
subdirectory name is not the same as the expected slug and the plugin will not be recognized
as installed. This is fixed by adjusting the temporary unzipped source subdirectory name to
the expected plugin slug.
</summary>
<param name="source" type="string">Path to upgrade/zip-file-name.tmp/subdirectory/.</param>
<param name="remote_source" type="string">Path to upgrade/zip-file-name.tmp.</param>
<param name="upgrader" type="\WP_Upgrader">Instance of the upgrader which installs the plugin.</param>
<returns>$source</returns>
</member>
<member name="M:TGM_Plugin_Activation?.activate_single_plugin(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Activate a single plugin and send feedback about the result to the screen.
</summary>
<param name="file_path" type="string">Path within wp-plugins/ to main plugin file.</param>
<param name="slug" type="string">Plugin slug.</param>
<param name="automatic" type="bool">Whether this is an automatic activation after an install. Defaults to false.
This determines the styling of the output messages.</param>
<returns>False if an error was encountered, true otherwise.</returns>
</member>
<member name="M:TGM_Plugin_Activation?.notices">
<summary>
Echoes required plugin notice.
Outputs a message telling users that a specific plugin is required for
their theme. If appropriate, it includes a link to the form page where
users can install and activate the plugin.

Returns early if we're on the Install page.
</summary>
<returns>Returns early if we're on the Install page.</returns>
</member>
<member name="M:TGM_Plugin_Activation?.create_user_action_links_for_notice(Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Generate the user action links for the admin notice.
</summary>
<param name="install_count" type="int">Number of plugins to install.</param>
<param name="update_count" type="int">Number of plugins to update.</param>
<param name="activate_count" type="int">Number of plugins to activate.</param>
<param name="line_template" type="int">Template for the HTML tag to output a line.</param>
<returns>Action links.</returns>
</member>
<member name="M:TGM_Plugin_Activation?.get_admin_notice_class">
<summary>
Get admin notice class.
Work around all the changes to the various admin notice classes between WP 4.4 and 3.7
(lowest supported version by TGMPA).
</summary>
</member>
<member name="M:TGM_Plugin_Activation?.display_settings_errors">
<summary>
Display settings errors and remove those which have been displayed to avoid duplicate messages showing
</summary>
</member>
<member name="M:TGM_Plugin_Activation?.dismiss">
<summary>
Register dismissal of admin notices.
Acts on the dismiss link in the admin nag messages.
If clicked, the admin notice disappears and will no longer be visible to this user.
</summary>
</member>
<member name="M:TGM_Plugin_Activation?.register(Pchp.Core.PhpValue)">
<summary>
Add individual plugin to our collection of plugins.
If the required keys are not set or the plugin has already
been registered, the plugin is not added.
</summary>
<param name="plugin" type="array|null">Array of plugin arguments or null if invalid argument.</param>
<returns>Return early if incorrect argument.</returns>
</member>
<member name="M:TGM_Plugin_Activation?.get_plugin_source_type(Pchp.Core.PhpValue)">
<summary>
Determine what type of source the plugin comes from.
</summary>
<param name="source" type="string">The source of the plugin as provided, either empty (= WP repo), a file path
(= bundled) or an external URL.</param>
<returns>'repo', 'external', or 'bundled'</returns>
</member>
<member name="M:TGM_Plugin_Activation?.sanitize_key(Pchp.Core.PhpValue)">
<summary>
Sanitizes a string key.
Near duplicate of WP Core `sanitize_key()`. The difference is that uppercase characters *are*
allowed, so as not to break upgrade paths from non-standard bundled plugins using uppercase
characters in the plugin directory path/slug. Silly them.
</summary>
<param name="key" type="string">String key.</param>
<returns>Sanitized key</returns>
</member>
<member name="M:TGM_Plugin_Activation?.config(Pchp.Core.PhpValue)">
<summary>
Amend default configuration settings.
</summary>
<param name="config" type="array">Array of config options to pass as class properties.</param>
</member>
<member name="M:TGM_Plugin_Activation?.actions(Pchp.Core.PhpValue)">
<summary>
Amend action link after plugin installation.
</summary>
<param name="install_actions" type="array">Existing array of actions.</param>
<returns>Amended array of actions.</returns>
</member>
<member name="M:TGM_Plugin_Activation?.flush_plugins_cache(Pchp.Core.PhpValue)">
<summary>
Flushes the plugins cache on theme switch to prevent stale entries
from remaining in the plugin table.
</summary>
<param name="clear_update_cache" type="bool">Optional. Whether to clear the Plugin updates cache.
Parameter added in v2.5.0.</param>
</member>
<member name="M:TGM_Plugin_Activation?.populate_file_path(Pchp.Core.PhpValue)">
<summary>
Set file_path key for each installed plugin.
</summary>
<param name="plugin_slug" type="string">Optional. If set, only (re-)populates the file path for that specific plugin.
Parameter added in v2.5.0.</param>
</member>
<member name="M:TGM_Plugin_Activation?._get_plugin_basename_from_slug(Pchp.Core.PhpValue)">
<summary>
Helper function to extract the file path of the plugin file from the
plugin slug, if the plugin is installed.
</summary>
<param name="slug" type="string">Plugin slug (typically folder name) as provided by the developer.</param>
<returns>Either file path for plugin if installed, or just the plugin slug.</returns>
</member>
<member name="M:TGM_Plugin_Activation?._get_plugin_data_from_name(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Retrieve plugin data, given the plugin name.
Loops through the registered plugins looking for $name. If it finds it,
it returns the $data from that plugin. Otherwise, returns false.
</summary>
<param name="name" type="string">Name of the plugin, as it was registered.</param>
<param name="data" type="string">Optional. Array key of plugin data to return. Default is slug.</param>
<returns>Plugin slug if found, false otherwise.</returns>
</member>
<member name="M:TGM_Plugin_Activation?.get_download_url(Pchp.Core.PhpValue)">
<summary>
Retrieve the download URL for a package.
</summary>
<param name="slug" type="string">Plugin slug.</param>
<returns>Plugin download URL or path to local file or empty string if undetermined.</returns>
</member>
<member name="M:TGM_Plugin_Activation?.get_wp_repo_download_url(Pchp.Core.PhpValue)">
<summary>
Retrieve the download URL for a WP repo package.
</summary>
<param name="slug" type="string">Plugin slug.</param>
<returns>Plugin download URL.</returns>
</member>
<member name="M:TGM_Plugin_Activation?.get_plugins_api(Pchp.Core.PhpValue)">
<summary>
Try to grab information from WordPress API.
</summary>
<param name="slug" type="string">Plugin slug.</param>
<returns>Plugins_api response object on success, WP_Error on failure.</returns>
</member>
<member name="M:TGM_Plugin_Activation?.get_info_link(Pchp.Core.PhpValue)">
<summary>
Retrieve a link to a plugin information page.
</summary>
<param name="slug" type="string">Plugin slug.</param>
<returns>Fully formed html link to a plugin information page if available
or the plugin name if not.</returns>
</member>
<member name="M:TGM_Plugin_Activation?.is_tgmpa_page">
<summary>
Determine if we're on the TGMPA Install page.
</summary>
<returns>True when on the TGMPA page, false otherwise.</returns>
</member>
<member name="M:TGM_Plugin_Activation?.is_core_update_page">
<summary>
Determine if we're on a WP Core installation/upgrade page.
</summary>
<returns>True when on a WP Core installation/upgrade page, false otherwise.</returns>
</member>
<member name="M:TGM_Plugin_Activation?.get_tgmpa_url">
<summary>
Retrieve the URL to the TGMPA Install page.
I.e. depending on the config settings passed something along the lines of:
http://example.com/wp-admin/themes.php?page=tgmpa-install-plugins
</summary>
<returns>Properly encoded URL (not escaped).</returns>
</member>
<member name="M:TGM_Plugin_Activation?.get_tgmpa_status_url(Pchp.Core.PhpValue)">
<summary>
Retrieve the URL to the TGMPA Install page for a specific plugin status (view).
I.e. depending on the config settings passed something along the lines of:
http://example.com/wp-admin/themes.php?page=tgmpa-install-plugins&amp;plugin_status=install
</summary>
<param name="status" type="string">Plugin status - either 'install', 'update' or 'activate'.</param>
<returns>Properly encoded URL (not escaped).</returns>
</member>
<member name="M:TGM_Plugin_Activation?.is_tgmpa_complete">
<summary>
Determine whether there are open actions for plugins registered with TGMPA.
</summary>
<returns>True if complete, i.e. no outstanding actions. False otherwise.</returns>
</member>
<member name="M:TGM_Plugin_Activation?.is_plugin_installed(Pchp.Core.PhpValue)">
<summary>
Check if a plugin is installed. Does not take must-use plugins into account.
</summary>
<param name="slug" type="string">Plugin slug.</param>
<returns>True if installed, false otherwise.</returns>
</member>
<member name="M:TGM_Plugin_Activation?.is_plugin_active(Pchp.Core.PhpValue)">
<summary>
Check if a plugin is active.
</summary>
<param name="slug" type="string">Plugin slug.</param>
<returns>True if active, false otherwise.</returns>
</member>
<member name="M:TGM_Plugin_Activation?.can_plugin_update(Pchp.Core.PhpValue)">
<summary>
Check if a plugin can be updated, i.e. if we have information on the minimum WP version required
available, check whether the current install meets them.
</summary>
<param name="slug" type="string">Plugin slug.</param>
<returns>True if OK to update, false otherwise.</returns>
</member>
<member name="M:TGM_Plugin_Activation?.is_plugin_updatetable(Pchp.Core.PhpValue)">
<summary>
Check to see if the plugin is 'updatetable', i.e. installed, with an update available
and no WP version requirements blocking it.
</summary>
<param name="slug" type="string">Plugin slug.</param>
<returns>True if OK to proceed with update, false otherwise.</returns>
</member>
<member name="M:TGM_Plugin_Activation?.can_plugin_activate(Pchp.Core.PhpValue)">
<summary>
Check if a plugin can be activated, i.e. is not currently active and meets the minimum
plugin version requirements set in TGMPA (if any).
</summary>
<param name="slug" type="string">Plugin slug.</param>
<returns>True if OK to activate, false otherwise.</returns>
</member>
<member name="M:TGM_Plugin_Activation?.get_installed_version(Pchp.Core.PhpValue)">
<summary>
Retrieve the version number of an installed plugin.
</summary>
<param name="slug" type="string">Plugin slug.</param>
<returns>Version number as string or an empty string if the plugin is not installed
or version unknown (plugins which don't comply with the plugin header standard).</returns>
</member>
<member name="M:TGM_Plugin_Activation?.does_plugin_require_update(Pchp.Core.PhpValue)">
<summary>
Check whether a plugin complies with the minimum version requirements.
</summary>
<param name="slug" type="string">Plugin slug.</param>
<returns>True when a plugin needs to be updated, otherwise false.</returns>
</member>
<member name="M:TGM_Plugin_Activation?.does_plugin_have_update(Pchp.Core.PhpValue)">
<summary>
Check whether there is an update available for a plugin.
</summary>
<param name="slug" type="string">Plugin slug.</param>
<returns>Version number string of the available update or false if no update available.</returns>
</member>
<member name="M:TGM_Plugin_Activation?.get_upgrade_notice(Pchp.Core.PhpValue)">
<summary>
Retrieve potential upgrade notice for a plugin.
</summary>
<param name="slug" type="string">Plugin slug.</param>
<returns>The upgrade notice or an empty string if no message was available or provided.</returns>
</member>
<member name="M:TGM_Plugin_Activation?.get_plugins(Pchp.Core.PhpValue)">
<summary>
Wrapper around the core WP get_plugins function, making sure it's actually available.
</summary>
<param name="plugin_folder" type="string">Optional. Relative path to single plugin folder.</param>
<returns>Array of installed plugins with plugin information.</returns>
</member>
<member name="M:TGM_Plugin_Activation?.update_dismiss">
<summary>
Delete dismissable nag option when theme is switched.
This ensures that the user(s) is/are again reminded via nag of required
and/or recommended plugins if they re-activate the theme.
</summary>
</member>
<member name="M:TGM_Plugin_Activation?.force_activation">
<summary>
Forces plugin activation if the parameter 'force_activation' is
set to true.
This allows theme authors to specify certain plugins that must be
active at all times while using the current theme.

Please take special care when using this parameter as it has the
potential to be harmful if not used correctly. Setting this parameter
to true will not allow the specified plugin to be deactivated unless
the user switches themes.
</summary>
</member>
<member name="M:TGM_Plugin_Activation?.force_deactivation">
<summary>
Forces plugin deactivation if the parameter 'force_deactivation'
is set to true and adds the plugin to the 'recently active' plugins list.
This allows theme authors to specify certain plugins that must be
deactivated upon switching from the current theme to another.

Please take special care when using this parameter as it has the
potential to be harmful if not used correctly.
</summary>
</member>
<member name="M:TGM_Plugin_Activation?.show_tgmpa_version">
<summary>
Echo the current TGMPA version number to the page.
</summary>
</member>
<member name="M:TGM_Plugin_Activation?.get_instance(Pchp.Core.Context)">
<summary>
Returns the singleton instance of the class.
</summary>
<returns>The TGM_Plugin_Activation object.</returns>
</member>
<member name="M:TGMPA_List_Table?.__construct">
<summary>
References parent constructor and sets defaults for class.
</summary>
</member>
<member name="M:TGMPA_List_Table?.get_table_classes">
<summary>
Get a list of CSS classes for the &lt;table&gt; tag.
Overruled to prevent the 'plural' argument from being added.
</summary>
<returns>CSS classnames.</returns>
</member>
<member name="M:TGMPA_List_Table?._gather_plugin_data">
<summary>
Gathers and renames all of our plugin information to be used by WP_List_Table to create our table.
</summary>
<returns>$table_data Information for use in table.</returns>
</member>
<member name="M:TGMPA_List_Table?.categorize_plugins_to_views">
<summary>
Categorize the plugins which have open actions into views for the TGMPA page.
</summary>
</member>
<member name="M:TGMPA_List_Table?.set_view_totals(Pchp.Core.PhpValue)">
<summary>
Set the counts for the view links.
</summary>
<param name="plugins" type="array">Plugins order by view.</param>
</member>
<member name="M:TGMPA_List_Table?.get_plugin_advise_type_text(Pchp.Core.PhpValue)">
<summary>
Get the plugin required/recommended text string.
</summary>
<param name="required" type="string">Plugin required setting.</param>
</member>
<member name="M:TGMPA_List_Table?.get_plugin_source_type_text(Pchp.Core.PhpValue)">
<summary>
Get the plugin source type text string.
</summary>
<param name="type" type="string">Plugin type.</param>
</member>
<member name="M:TGMPA_List_Table?.get_plugin_status_text(Pchp.Core.PhpValue)">
<summary>
Determine the plugin status message.
</summary>
<param name="slug" type="string">Plugin slug.</param>
</member>
<member name="M:TGMPA_List_Table?.sort_table_items(Pchp.Core.PhpValue)">
<summary>
Sort plugins by Required/Recommended type and by alphabetical plugin name within each type.
</summary>
<param name="items" type="array">Prepared table items.</param>
<returns>Sorted table items.</returns>
</member>
<member name="M:TGMPA_List_Table?.get_views">
<summary>
Get an associative array ( id =&gt; link ) of the views available on this table.
</summary>
</member>
<member name="M:TGMPA_List_Table?.column_default(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Create default columns to display important plugin information
like type, action and status.
</summary>
<param name="item" type="array">Array of item data.</param>
<param name="column_name" type="string">The name of the column.</param>
</member>
<member name="M:TGMPA_List_Table?.column_cb(Pchp.Core.PhpValue)">
<summary>
Required for bulk installing.
Adds a checkbox for each plugin.
</summary>
<param name="item" type="array">Array of item data.</param>
<returns>The input checkbox with all necessary info.</returns>
</member>
<member name="M:TGMPA_List_Table?.column_plugin(Pchp.Core.PhpValue)">
<summary>
Create default title column along with the action links.
</summary>
<param name="item" type="array">Array of item data.</param>
<returns>The plugin name and action links.</returns>
</member>
<member name="M:TGMPA_List_Table?.column_version(Pchp.Core.PhpValue)">
<summary>
Create version information column.
</summary>
<param name="item" type="array">Array of item data.</param>
<returns>HTML-formatted version information.</returns>
</member>
<member name="M:TGMPA_List_Table?.no_items">
<summary>
Sets default message within the plugins table if no plugins
are left for interaction.
Hides the menu item to prevent the user from clicking and
getting a permissions error.
</summary>
</member>
<member name="M:TGMPA_List_Table?.get_columns">
<summary>
Output all the column information within the table.
</summary>
<returns>$columns The column names.</returns>
</member>
<member name="M:TGMPA_List_Table?.get_default_primary_column_name">
<summary>
Get name of default primary column
</summary>
</member>
<member name="M:TGMPA_List_Table?.get_primary_column_name">
<summary>
Get the name of the primary column.
</summary>
<returns>The name of the primary column.</returns>
</member>
<member name="M:TGMPA_List_Table?.get_row_actions(Pchp.Core.PhpValue)">
<summary>
Get the actions which are relevant for a specific plugin row.
</summary>
<param name="item" type="array">Array of item data.</param>
<returns>Array with relevant action links.</returns>
</member>
<member name="M:TGMPA_List_Table?.single_row(Pchp.Core.PhpValue)">
<summary>
Generates content for a single row of the table.
</summary>
<param name="item" type="object">The current item.</param>
</member>
<member name="M:TGMPA_List_Table?.wp_plugin_update_row(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Show the upgrade notice below a plugin row if there is one.
</summary>
<param name="slug" type="string">Plugin slug.</param>
<param name="item" type="array">The information available in this table row.</param>
<returns>Return early if upgrade notice is empty.</returns>
</member>
<member name="M:TGMPA_List_Table?.extra_tablenav(Pchp.Core.PhpValue)">
<summary>
Extra controls to be displayed between bulk actions and pagination.
</summary>
<param name="which" type="string">'top' or 'bottom' table navigation.</param>
</member>
<member name="M:TGMPA_List_Table?.get_bulk_actions">
<summary>
Defines the bulk actions for handling registered plugins.
</summary>
<returns>$actions The bulk actions for the plugin install table.</returns>
</member>
<member name="M:TGMPA_List_Table?.process_bulk_actions">
<summary>
Processes bulk installation and activation actions.
The bulk installation process looks for the $_POST information and passes that
through if a user has to use WP_Filesystem to enter their credentials.
</summary>
</member>
<member name="M:TGMPA_List_Table?.prepare_items">
<summary>
Prepares all of our information to be outputted into a usable table.
</summary>
</member>
<member name="M:TGMPA_List_Table?._get_plugin_data_from_name(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Retrieve plugin data, given the plugin name.
</summary>
<param name="name" type="string">Name of the plugin, as it was registered.</param>
<param name="data" type="string">Optional. Array key of plugin data to return. Default is slug.</param>
<returns>Plugin slug if found, false otherwise.</returns>
</member>
<member name="M:TGMPA_Bulk_Installer?.__construct(Pchp.Core.PhpValue)">
<summary>
References parent constructor and sets defaults for class.
</summary>
<param name="skin" type="\Bulk_Upgrader_Skin|null">Installer skin.</param>
</member>
<member name="M:TGMPA_Bulk_Installer?.activate_strings">
<summary>
Sets the correct activation strings for the installer skin to use.
</summary>
</member>
<member name="M:TGMPA_Bulk_Installer?.run(Pchp.Core.PhpValue)">
<summary>
Performs the actual installation of each plugin.
</summary>
<param name="options" type="array">The installation config options.</param>
<returns>Return early if error, array of installation data on success.</returns>
</member>
<member name="M:TGMPA_Bulk_Installer?.bulk_install(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Processes the bulk installation of plugins.
</summary>
<param name="plugins" type="array">The plugin sources needed for installation.</param>
<param name="args" type="array">Arbitrary passed extra arguments.</param>
<returns>Install confirmation messages on success, false on failure.</returns>
</member>
<member name="M:TGMPA_Bulk_Installer?.bulk_upgrade(Pchp.Core.PhpValue,Pchp.Core.PhpValue)">
<summary>
Handle a bulk upgrade request.
</summary>
<param name="plugins" type="array">The local WP file_path's of the plugins which should be upgraded.</param>
<param name="args" type="array">Arbitrary passed extra arguments.</param>
<returns>Install confirmation messages on success, false on failure.</returns>
</member>
<member name="M:TGMPA_Bulk_Installer?.auto_activate(Pchp.Core.PhpValue)">
<summary>
Abuse a filter to auto-activate plugins after installation.
Hooked into the 'upgrader_post_install' filter hook.
</summary>
<param name="bool" type="bool">The value we need to give back (true).</param>
</member>
<member name="M:TGMPA_Bulk_Installer_Skin?.__construct(Pchp.Core.PhpValue)">
<summary>
Constructor. Parses default args with new ones and extracts them for use.
</summary>
<param name="args" type="array">Arguments to pass for use within the class.</param>
</member>
<member name="M:TGMPA_Bulk_Installer_Skin?.add_strings">
<summary>
Sets install skin strings for each individual plugin.
Checks to see if the automatic activation flag is set and uses the
the proper strings accordingly.
</summary>
</member>
<member name="M:TGMPA_Bulk_Installer_Skin?.before(Pchp.Core.PhpValue)">
<summary>
Outputs the header strings and necessary JS before each plugin installation.
</summary>
<param name="title" type="string">Unused in this implementation.</param>
</member>
<member name="M:TGMPA_Bulk_Installer_Skin?.after(Pchp.Core.PhpValue)">
<summary>
Outputs the footer strings and necessary JS after each plugin installation.
Checks for any errors and outputs them if they exist, else output
success strings.
</summary>
<param name="title" type="string">Unused in this implementation.</param>
</member>
<member name="M:TGMPA_Bulk_Installer_Skin?.bulk_footer">
<summary>
Outputs links after bulk plugin installation is complete.
</summary>
</member>
<member name="M:TGMPA_Bulk_Installer_Skin?.before_flush_output">
<summary>
Flush header output buffer.
</summary>
</member>
<member name="M:TGMPA_Bulk_Installer_Skin?.after_flush_output">
<summary>
Flush footer output buffer and iterate $this-&gt;i to make sure the
installation strings reference the correct plugin.
</summary>
</member>
<member name="M:TGMPA_Utils?.wrap_in_em(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Wrap an arbitrary string in &lt;em&gt; tags. Meant to be used in combination with array_map().
</summary>
<param name="string" type="string">Text to be wrapped.</param>
</member>
<member name="M:TGMPA_Utils?.wrap_in_strong(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Wrap an arbitrary string in &lt;strong&gt; tags. Meant to be used in combination with array_map().
</summary>
<param name="string" type="string">Text to be wrapped.</param>
</member>
<member name="M:TGMPA_Utils?.validate_bool(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Helper function: Validate a value as boolean
</summary>
<param name="value" type="mixed">Arbitrary value.</param>
</member>
<member name="M:TGMPA_Utils?.emulate_filter_bool(Pchp.Core.Context,Pchp.Core.PhpValue)">
<summary>
Helper function: Cast a value to bool
</summary>
<param name="value" type="mixed">Value to cast.</param>
</member>
</members>
</doc>
